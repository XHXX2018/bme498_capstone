
myndsearch_pwm_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007694  08007694  00008694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076e8  080076e8  0000910c  2**0
                  CONTENTS
  4 .ARM          00000008  080076e8  080076e8  000086e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076f0  080076f0  0000910c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076f0  080076f0  000086f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076f4  080076f4  000086f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  080076f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c0c  2000010c  08007804  0000910c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d18  08007804  00009d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5ef  00000000  00000000  0000913c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c29  00000000  00000000  0001772b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0001a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008de  00000000  00000000  0001af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023581  00000000  00000000  0001b836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b59  00000000  00000000  0003edb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9bde  00000000  00000000  0004f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001194ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  00119534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0011c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800767c 	.word	0x0800767c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	0800767c 	.word	0x0800767c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Display_First_Channel_Smallest3Bits>:

// Test function to verify that Python Script successfully wrote data into STM32
// Basically, just reads channel_value[0] and shows its lowest 3 bits
// Since Python goes from 0 to 10, we expect to see:
// 000, 001, 010, 011, 100, 101, 110, 111, (1)000, (1)001, (1)010, then repeat
void Display_First_Channel_Smallest3Bits() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	uint8_t testbyte = channel_value[0];
 80004fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <Display_First_Channel_Smallest3Bits+0x80>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
	if(testbyte & 1U){
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	2b00      	cmp	r3, #0
 8000508:	d005      	beq.n	8000516 <Display_First_Channel_Smallest3Bits+0x22>
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2101      	movs	r1, #1
 800050e:	481a      	ldr	r0, [pc, #104]	@ (8000578 <Display_First_Channel_Smallest3Bits+0x84>)
 8000510:	f000 fd00 	bl	8000f14 <HAL_GPIO_WritePin>
 8000514:	e004      	b.n	8000520 <Display_First_Channel_Smallest3Bits+0x2c>
	}
	else{
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	4817      	ldr	r0, [pc, #92]	@ (8000578 <Display_First_Channel_Smallest3Bits+0x84>)
 800051c:	f000 fcfa 	bl	8000f14 <HAL_GPIO_WritePin>
	}
	if(testbyte & 2U){
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b00      	cmp	r3, #0
 8000528:	d005      	beq.n	8000536 <Display_First_Channel_Smallest3Bits+0x42>
	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	4812      	ldr	r0, [pc, #72]	@ (8000578 <Display_First_Channel_Smallest3Bits+0x84>)
 8000530:	f000 fcf0 	bl	8000f14 <HAL_GPIO_WritePin>
 8000534:	e004      	b.n	8000540 <Display_First_Channel_Smallest3Bits+0x4c>
	}
	else{
	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	480f      	ldr	r0, [pc, #60]	@ (8000578 <Display_First_Channel_Smallest3Bits+0x84>)
 800053c:	f000 fcea 	bl	8000f14 <HAL_GPIO_WritePin>
	}
	if(testbyte & 4U){
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	2b00      	cmp	r3, #0
 8000548:	d006      	beq.n	8000558 <Display_First_Channel_Smallest3Bits+0x64>
	  HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000550:	4809      	ldr	r0, [pc, #36]	@ (8000578 <Display_First_Channel_Smallest3Bits+0x84>)
 8000552:	f000 fcdf 	bl	8000f14 <HAL_GPIO_WritePin>
 8000556:	e005      	b.n	8000564 <Display_First_Channel_Smallest3Bits+0x70>
	}
	else{
	  HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800055e:	4806      	ldr	r0, [pc, #24]	@ (8000578 <Display_First_Channel_Smallest3Bits+0x84>)
 8000560:	f000 fcd8 	bl	8000f14 <HAL_GPIO_WritePin>
	}
	HAL_Delay(100);
 8000564:	2064      	movs	r0, #100	@ 0x64
 8000566:	f000 fa0b 	bl	8000980 <HAL_Delay>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000128 	.word	0x20000128
 8000578:	40020400 	.word	0x40020400

0800057c <USB_CDC_RxHandler>:

// Below is the Handler, Called from CDC_Receive_FS() in USB_DEVICE -> App -> usbd_cdc_if.c
// Make Edits there

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
//	HAL_GPIO_TogglePin (GPIOB, LED2_Pin);
	for(int i = 0; i<8; i++){
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	e00b      	b.n	80005a4 <USB_CDC_RxHandler+0x28>
		channel_value[i] = Buf[i];
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	7819      	ldrb	r1, [r3, #0]
 8000594:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <USB_CDC_RxHandler+0x3c>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	460a      	mov	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8; i++){
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b07      	cmp	r3, #7
 80005a8:	ddf0      	ble.n	800058c <USB_CDC_RxHandler+0x10>
	}
//	HAL_GPIO_TogglePin (GPIOB, LED2_Pin);
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	20000128 	.word	0x20000128

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 f96c 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f808 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f872 	bl	80006b0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005cc:	f006 fabc 	bl	8006b48 <MX_USB_DEVICE_Init>
  {
	  // Basic LED Blink Test to make sure that your MCU can be programmed.
	  // Flash_LED();

	  // Testing dynamic memory writing with just the user LED for testing
	  Display_First_Channel_Smallest3Bits();
 80005d0:	f7ff ff90 	bl	80004f4 <Display_First_Channel_Smallest3Bits>
 80005d4:	e7fc      	b.n	80005d0 <main+0x14>
	...

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 f81c 	bl	8007624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <SystemClock_Config+0xd4>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000650:	2348      	movs	r3, #72	@ 0x48
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000658:	2303      	movs	r3, #3
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fcd3 	bl	8003010 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000670:	f000 f870 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fef8 	bl	8002484 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069a:	f000 f85b 	bl	8000754 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <MX_GPIO_Init+0x9c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a1f      	ldr	r2, [pc, #124]	@ (800074c <MX_GPIO_Init+0x9c>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_GPIO_Init+0x9c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b19      	ldr	r3, [pc, #100]	@ (800074c <MX_GPIO_Init+0x9c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a18      	ldr	r2, [pc, #96]	@ (800074c <MX_GPIO_Init+0x9c>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_GPIO_Init+0x9c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_GPIO_Init+0x9c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a11      	ldr	r2, [pc, #68]	@ (800074c <MX_GPIO_Init+0x9c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_GPIO_Init+0x9c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000720:	480b      	ldr	r0, [pc, #44]	@ (8000750 <MX_GPIO_Init+0xa0>)
 8000722:	f000 fbf7 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8000726:	f244 0381 	movw	r3, #16513	@ 0x4081
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_GPIO_Init+0xa0>)
 8000740:	f000 fa54 	bl	8000bec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a0f      	ldr	r2, [pc, #60]	@ (80007ac <HAL_MspInit+0x4c>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	@ 0x40
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <NMI_Handler+0x4>

080007b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <MemManage_Handler+0x4>

080007c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f89b 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <OTG_FS_IRQHandler+0x10>)
 8000816:	f000 fce1 	bl	80011dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20001614 	.word	0x20001614

08000824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000880 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800084c:	f7ff ffea 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	@ (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	@ (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000876:	f006 fedd 	bl	8007634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe9f 	bl	80005bc <main>
  bx  lr    
 800087e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 800088c:	080076f8 	.word	0x080076f8
  ldr r2, =_sbss
 8000890:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000894:	20001d18 	.word	0x20001d18

08000898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <HAL_Init+0x40>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <HAL_Init+0x40>)
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_Init+0x40>)
 80008be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f94f 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff ff46 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f967 	bl	8000bd2 <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f92f 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	@ (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20000130 	.word	0x20000130

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	@ (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000130 	.word	0x20000130

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff ffee 	bl	8000968 <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffde 	bl	8000968 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	@ (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	@ (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	@ 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff29 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff3e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff31 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffa2 	bl	8000b24 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	e165      	b.n	8000ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8154 	bne.w	8000ece <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d005      	beq.n	8000c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d130      	bne.n	8000ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4013      	ands	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	091b      	lsrs	r3, r3, #4
 8000c8a:	f003 0201 	and.w	r2, r3, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d017      	beq.n	8000cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d123      	bne.n	8000d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	69b9      	ldr	r1, [r7, #24]
 8000d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0203 	and.w	r2, r3, #3
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 80ae 	beq.w	8000ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b5d      	ldr	r3, [pc, #372]	@ (8000eec <HAL_GPIO_Init+0x300>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8000eec <HAL_GPIO_Init+0x300>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d82:	4b5a      	ldr	r3, [pc, #360]	@ (8000eec <HAL_GPIO_Init+0x300>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8e:	4a58      	ldr	r2, [pc, #352]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	220f      	movs	r2, #15
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4f      	ldr	r2, [pc, #316]	@ (8000ef4 <HAL_GPIO_Init+0x308>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d025      	beq.n	8000e06 <HAL_GPIO_Init+0x21a>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4e      	ldr	r2, [pc, #312]	@ (8000ef8 <HAL_GPIO_Init+0x30c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01f      	beq.n	8000e02 <HAL_GPIO_Init+0x216>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8000efc <HAL_GPIO_Init+0x310>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d019      	beq.n	8000dfe <HAL_GPIO_Init+0x212>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8000f00 <HAL_GPIO_Init+0x314>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x20e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8000f04 <HAL_GPIO_Init+0x318>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x20a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8000f08 <HAL_GPIO_Init+0x31c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x206>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a49      	ldr	r2, [pc, #292]	@ (8000f0c <HAL_GPIO_Init+0x320>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x202>
 8000dea:	2306      	movs	r3, #6
 8000dec:	e00c      	b.n	8000e08 <HAL_GPIO_Init+0x21c>
 8000dee:	2307      	movs	r3, #7
 8000df0:	e00a      	b.n	8000e08 <HAL_GPIO_Init+0x21c>
 8000df2:	2305      	movs	r3, #5
 8000df4:	e008      	b.n	8000e08 <HAL_GPIO_Init+0x21c>
 8000df6:	2304      	movs	r3, #4
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x21c>
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e004      	b.n	8000e08 <HAL_GPIO_Init+0x21c>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x21c>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x21c>
 8000e06:	2300      	movs	r3, #0
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	f002 0203 	and.w	r2, r2, #3
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4093      	lsls	r3, r2
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e18:	4935      	ldr	r1, [pc, #212]	@ (8000ef0 <HAL_GPIO_Init+0x304>)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e26:	4b3a      	ldr	r3, [pc, #232]	@ (8000f10 <HAL_GPIO_Init+0x324>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e4a:	4a31      	ldr	r2, [pc, #196]	@ (8000f10 <HAL_GPIO_Init+0x324>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e50:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <HAL_GPIO_Init+0x324>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e74:	4a26      	ldr	r2, [pc, #152]	@ (8000f10 <HAL_GPIO_Init+0x324>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e7a:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <HAL_GPIO_Init+0x324>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f10 <HAL_GPIO_Init+0x324>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HAL_GPIO_Init+0x324>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec8:	4a11      	ldr	r2, [pc, #68]	@ (8000f10 <HAL_GPIO_Init+0x324>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	f67f ae96 	bls.w	8000c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3724      	adds	r7, #36	@ 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40021400 	.word	0x40021400
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f30:	e003      	b.n	8000f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	041a      	lsls	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af02      	add	r7, sp, #8
 8000f4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e108      	b.n	800116a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d106      	bne.n	8000f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f005 ffde 	bl	8006f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f86:	d102      	bne.n	8000f8e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fbf1 	bl	800377a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7c1a      	ldrb	r2, [r3, #16]
 8000fa0:	f88d 2000 	strb.w	r2, [sp]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa8:	f002 fad0 	bl	800354c <USB_CoreInit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0d5      	b.n	800116a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fbe9 	bl	800379c <USB_SetCurrentMode>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0c6      	b.n	800116a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e04a      	b.n	8001078 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3315      	adds	r3, #21
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3314      	adds	r3, #20
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	b298      	uxth	r0, r3
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	332e      	adds	r3, #46	@ 0x2e
 800101e:	4602      	mov	r2, r0
 8001020:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3318      	adds	r3, #24
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	331c      	adds	r3, #28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3320      	adds	r3, #32
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3324      	adds	r3, #36	@ 0x24
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	3301      	adds	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	791b      	ldrb	r3, [r3, #4]
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3af      	bcc.n	8000fe2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e044      	b.n	8001112 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	3301      	adds	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	429a      	cmp	r2, r3
 800111a:	d3b5      	bcc.n	8001088 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7c1a      	ldrb	r2, [r3, #16]
 8001124:	f88d 2000 	strb.w	r2, [sp]
 8001128:	3304      	adds	r3, #4
 800112a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112c:	f002 fb82 	bl	8003834 <USB_DevInit>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2202      	movs	r2, #2
 800113a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e013      	b.n	800116a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b1b      	ldrb	r3, [r3, #12]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d102      	bne.n	800115e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f001 f96f 	bl	800243c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f003 fbbf 	bl	80048e6 <USB_DevDisconnect>

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_PCD_Start+0x1c>
 800118a:	2302      	movs	r3, #2
 800118c:	e022      	b.n	80011d4 <HAL_PCD_Start+0x62>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d105      	bne.n	80011b6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 facc 	bl	8003758 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fb6d 	bl	80048a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b08d      	sub	sp, #52	@ 0x34
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fc2b 	bl	8004a4e <USB_GetMode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 84b9 	bne.w	8001b72 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fb8f 	bl	8004928 <USB_ReadInterrupts>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 84af 	beq.w	8001b70 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fb7c 	bl	8004928 <USB_ReadInterrupts>
 8001230:	4603      	mov	r3, r0
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b02      	cmp	r3, #2
 8001238:	d107      	bne.n	800124a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f002 0202 	and.w	r2, r2, #2
 8001248:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fb6a 	bl	8004928 <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b10      	cmp	r3, #16
 800125c:	d161      	bne.n	8001322 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0210 	bic.w	r2, r2, #16
 800126c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	f003 020f 	and.w	r2, r3, #15
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	0c5b      	lsrs	r3, r3, #17
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	2b02      	cmp	r3, #2
 8001298:	d124      	bne.n	80012e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d035      	beq.n	8001312 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	6a38      	ldr	r0, [r7, #32]
 80012ba:	f003 f9a1 	bl	8004600 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	441a      	add	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012dc:	441a      	add	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	e016      	b.n	8001312 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	0c5b      	lsrs	r3, r3, #17
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d110      	bne.n	8001312 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80012f6:	2208      	movs	r2, #8
 80012f8:	4619      	mov	r1, r3
 80012fa:	6a38      	ldr	r0, [r7, #32]
 80012fc:	f003 f980 	bl	8004600 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800130c:	441a      	add	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0210 	orr.w	r2, r2, #16
 8001320:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fafe 	bl	8004928 <USB_ReadInterrupts>
 800132c:	4603      	mov	r3, r0
 800132e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001332:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001336:	f040 80a7 	bne.w	8001488 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fb03 	bl	800494e <USB_ReadDevAllOutEpInterrupt>
 8001348:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800134a:	e099      	b.n	8001480 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 808e 	beq.w	8001474 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fb27 	bl	80049b6 <USB_ReadDevOutEPInterrupt>
 8001368:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00c      	beq.n	800138e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	015a      	lsls	r2, r3, #5
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	4413      	add	r3, r2
 800137c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001380:	461a      	mov	r2, r3
 8001382:	2301      	movs	r3, #1
 8001384:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fed1 	bl	8002130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013a4:	461a      	mov	r2, r3
 80013a6:	2308      	movs	r3, #8
 80013a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 ffa7 	bl	8002300 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013c8:	461a      	mov	r2, r3
 80013ca:	2310      	movs	r3, #16
 80013cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d030      	beq.n	800143a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e0:	2b80      	cmp	r3, #128	@ 0x80
 80013e2:	d109      	bne.n	80013f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	3304      	adds	r3, #4
 800140c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	78db      	ldrb	r3, [r3, #3]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2200      	movs	r2, #0
 800141a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f005 fea2 	bl	800716c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	015a      	lsls	r2, r3, #5
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001434:	461a      	mov	r2, r3
 8001436:	2302      	movs	r3, #2
 8001438:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	015a      	lsls	r2, r3, #5
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001450:	461a      	mov	r2, r3
 8001452:	2320      	movs	r3, #32
 8001454:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d009      	beq.n	8001474 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	015a      	lsls	r2, r3, #5
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800146c:	461a      	mov	r2, r3
 800146e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001472:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	3301      	adds	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800147a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f af62 	bne.w	800134c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fa4b 	bl	8004928 <USB_ReadInterrupts>
 8001492:	4603      	mov	r3, r0
 8001494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001498:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800149c:	f040 80db 	bne.w	8001656 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fa6c 	bl	8004982 <USB_ReadDevAllInEpInterrupt>
 80014aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014b0:	e0cd      	b.n	800164e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80c2 	beq.w	8001642 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fa92 	bl	80049f2 <USB_ReadDevInEPInterrupt>
 80014ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d057      	beq.n	800158a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	2201      	movs	r2, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69f9      	ldr	r1, [r7, #28]
 80014f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80014fa:	4013      	ands	r3, r2
 80014fc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800150a:	461a      	mov	r2, r3
 800150c:	2301      	movs	r3, #1
 800150e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	799b      	ldrb	r3, [r3, #6]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d132      	bne.n	800157e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3320      	adds	r3, #32
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4403      	add	r3, r0
 8001538:	331c      	adds	r3, #28
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4419      	add	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4403      	add	r3, r0
 800154c:	3320      	adds	r3, #32
 800154e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	2b00      	cmp	r3, #0
 8001554:	d113      	bne.n	800157e <HAL_PCD_IRQHandler+0x3a2>
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3324      	adds	r3, #36	@ 0x24
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d108      	bne.n	800157e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001576:	461a      	mov	r2, r3
 8001578:	2101      	movs	r1, #1
 800157a:	f003 fa99 	bl	8004ab0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f005 fd6c 	bl	8007062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015a0:	461a      	mov	r2, r3
 80015a2:	2308      	movs	r3, #8
 80015a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015bc:	461a      	mov	r2, r3
 80015be:	2310      	movs	r3, #16
 80015c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015d8:	461a      	mov	r2, r3
 80015da:	2340      	movs	r3, #64	@ 0x40
 80015dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015ea:	6a38      	ldr	r0, [r7, #32]
 80015ec:	f002 fa80 	bl	8003af0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	3310      	adds	r3, #16
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	3304      	adds	r3, #4
 8001602:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	78db      	ldrb	r3, [r3, #3]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2200      	movs	r2, #0
 8001610:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f005 fdb9 	bl	8007190 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800162a:	461a      	mov	r2, r3
 800162c:	2302      	movs	r3, #2
 800162e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800163a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fcea 	bl	8002016 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	3301      	adds	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800164e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f af2e 	bne.w	80014b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f964 	bl	8004928 <USB_ReadInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800166a:	d122      	bne.n	80016b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001692:	2100      	movs	r1, #0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f005 ff33 	bl	8007500 <HAL_PCDEx_LPM_Callback>
 800169a:	e002      	b.n	80016a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f005 fd57 	bl	8007150 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f936 	bl	8004928 <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016c6:	d112      	bne.n	80016ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f005 fd13 	bl	8007104 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80016ec:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 f918 	bl	8004928 <USB_ReadInterrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001702:	d121      	bne.n	8001748 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001712:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800171a:	2b00      	cmp	r3, #0
 800171c:	d111      	bne.n	8001742 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	f003 020f 	and.w	r2, r3, #15
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001738:	2101      	movs	r1, #1
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f005 fee0 	bl	8007500 <HAL_PCDEx_LPM_Callback>
 8001740:	e002      	b.n	8001748 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f005 fcde 	bl	8007104 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f8eb 	bl	8004928 <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800175c:	f040 80b7 	bne.w	80018ce <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2110      	movs	r1, #16
 800177a:	4618      	mov	r0, r3
 800177c:	f002 f9b8 	bl	8003af0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001784:	e046      	b.n	8001814 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001792:	461a      	mov	r2, r3
 8001794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001798:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800179a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017aa:	0151      	lsls	r1, r2, #5
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	440a      	add	r2, r1
 80017b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017c6:	461a      	mov	r2, r3
 80017c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017de:	0151      	lsls	r1, r2, #5
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	440a      	add	r2, r1
 80017e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017fe:	0151      	lsls	r1, r2, #5
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	440a      	add	r2, r1
 8001804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800180c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001810:	3301      	adds	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	461a      	mov	r2, r3
 800181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181c:	4293      	cmp	r3, r2
 800181e:	d3b2      	bcc.n	8001786 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800182e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001832:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7bdb      	ldrb	r3, [r3, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d016      	beq.n	800186a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800184c:	f043 030b 	orr.w	r3, r3, #11
 8001850:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800185a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001862:	f043 030b 	orr.w	r3, r3, #11
 8001866:	6453      	str	r3, [r2, #68]	@ 0x44
 8001868:	e015      	b.n	8001896 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001878:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800187c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001880:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001890:	f043 030b 	orr.w	r3, r3, #11
 8001894:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018b8:	461a      	mov	r2, r3
 80018ba:	f003 f8f9 	bl	8004ab0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80018cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 f828 	bl	8004928 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018e2:	d123      	bne.n	800192c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 f8be 	bl	8004a6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 f975 	bl	8003be2 <USB_GetDevSpeed>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	f000 fea4 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8001908:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800190e:	461a      	mov	r2, r3
 8001910:	4620      	mov	r0, r4
 8001912:	f001 fe7f 	bl	8003614 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f005 fbcb 	bl	80070b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800192a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fff9 	bl	8004928 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b08      	cmp	r3, #8
 800193e:	d10a      	bne.n	8001956 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f005 fba8 	bl	8007096 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f002 0208 	and.w	r2, r2, #8
 8001954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f002 ffe4 	bl	8004928 <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001966:	2b80      	cmp	r3, #128	@ 0x80
 8001968:	d123      	bne.n	80019b2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
 800197a:	e014      	b.n	80019a6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fb0a 	bl	8001fb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	3301      	adds	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	791b      	ldrb	r3, [r3, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d3e4      	bcc.n	800197c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 ffb6 	bl	8004928 <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019c6:	d13c      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c8:	2301      	movs	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80019cc:	e02b      	b.n	8001a26 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	015a      	lsls	r2, r3, #5
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e2:	4613      	mov	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	3318      	adds	r3, #24
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d115      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da12      	bge.n	8001a20 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3317      	adds	r3, #23
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 faca 	bl	8001fb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	3301      	adds	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d3cd      	bcc.n	80019ce <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 ff6e 	bl	8004928 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a56:	d156      	bne.n	8001b06 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a58:	2301      	movs	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5c:	e045      	b.n	8001aea <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d12e      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da2b      	bge.n	8001ae4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a98:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d121      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10a      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001adc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae0:	6053      	str	r3, [r2, #4]
            break;
 8001ae2:	e008      	b.n	8001af6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	461a      	mov	r2, r3
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d3b3      	bcc.n	8001a5e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 ff0c 	bl	8004928 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b1a:	d10a      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f005 fb49 	bl	80071b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fef6 	bl	8004928 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d115      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f005 fb39 	bl	80071d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	e000      	b.n	8001b72 <HAL_PCD_IRQHandler+0x996>
      return;
 8001b70:	bf00      	nop
    }
  }
}
 8001b72:	3734      	adds	r7, #52	@ 0x34
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}

08001b78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_PCD_SetAddress+0x1a>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e012      	b.n	8001bb8 <HAL_PCD_SetAddress+0x40>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 fe55 	bl	8004858 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4603      	mov	r3, r0
 8001bd0:	70fb      	strb	r3, [r7, #3]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	803b      	strh	r3, [r7, #0]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da0f      	bge.n	8001c06 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 020f 	and.w	r2, r3, #15
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3310      	adds	r3, #16
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e00f      	b.n	8001c26 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c32:	883b      	ldrh	r3, [r7, #0]
 8001c34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	78ba      	ldrb	r2, [r7, #2]
 8001c40:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d004      	beq.n	8001c54 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c54:	78bb      	ldrb	r3, [r7, #2]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d102      	bne.n	8001c60 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_PCD_EP_Open+0xae>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e00e      	b.n	8001c8c <HAL_PCD_EP_Open+0xcc>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68f9      	ldr	r1, [r7, #12]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 ffd5 	bl	8003c2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da0f      	bge.n	8001cc8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3310      	adds	r3, #16
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	705a      	strb	r2, [r3, #1]
 8001cc6:	e00f      	b.n	8001ce8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_PCD_EP_Close+0x6e>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e00e      	b.n	8001d20 <HAL_PCD_EP_Close+0x8c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68f9      	ldr	r1, [r7, #12]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 f813 	bl	8003d3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	460b      	mov	r3, r1
 8001d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d38:	7afb      	ldrb	r3, [r7, #11]
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2200      	movs	r2, #0
 8001d68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	799b      	ldrb	r3, [r3, #6]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	799b      	ldrb	r3, [r3, #6]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6979      	ldr	r1, [r7, #20]
 8001d90:	f002 f8b0 	bl	8003ef4 <USB_EPStartXfer>

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001dc0:	681b      	ldr	r3, [r3, #0]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	3310      	adds	r3, #16
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	799b      	ldrb	r3, [r3, #6]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	799b      	ldrb	r3, [r3, #6]
 8001e30:	461a      	mov	r2, r3
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	f002 f85e 	bl	8003ef4 <USB_EPStartXfer>

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	7912      	ldrb	r2, [r2, #4]
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e04f      	b.n	8001f00 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da0f      	bge.n	8001e88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	3310      	adds	r3, #16
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	705a      	strb	r2, [r3, #1]
 8001e86:	e00d      	b.n	8001ea4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_PCD_EP_SetStall+0x82>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e01d      	b.n	8001f00 <HAL_PCD_EP_SetStall+0xbe>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68f9      	ldr	r1, [r7, #12]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fbec 	bl	80046b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7999      	ldrb	r1, [r3, #6]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f002 fddd 	bl	8004ab0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	7912      	ldrb	r2, [r2, #4]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e042      	b.n	8001fac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da0f      	bge.n	8001f4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3310      	adds	r3, #16
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e00f      	b.n	8001f6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	3304      	adds	r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_PCD_EP_ClrStall+0x86>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e00e      	b.n	8001fac <HAL_PCD_EP_ClrStall+0xa4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f002 fbf5 	bl	800478c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	da0c      	bge.n	8001fe2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 020f 	and.w	r2, r3, #15
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	3310      	adds	r3, #16
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e00c      	b.n	8001ffc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fa14 	bl	8004430 <USB_EPStopXfer>
 8002008:	4603      	mov	r3, r0
 800200a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800200c:	7afb      	ldrb	r3, [r7, #11]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b08a      	sub	sp, #40	@ 0x28
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3310      	adds	r3, #16
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	429a      	cmp	r2, r3
 8002048:	d901      	bls.n	800204e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e06b      	b.n	8002126 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	d902      	bls.n	800206a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3303      	adds	r3, #3
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002072:	e02a      	b.n	80020ca <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	429a      	cmp	r2, r3
 8002088:	d902      	bls.n	8002090 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3303      	adds	r3, #3
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68d9      	ldr	r1, [r3, #12]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4603      	mov	r3, r0
 80020ac:	6978      	ldr	r0, [r7, #20]
 80020ae:	f002 fa69 	bl	8004584 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	441a      	add	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	441a      	add	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d809      	bhi.n	80020f4 <PCD_WriteEmptyTxFifo+0xde>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d203      	bcs.n	80020f4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1bf      	bne.n	8002074 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d811      	bhi.n	8002124 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	2201      	movs	r2, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	43db      	mvns	r3, r3
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002120:	4013      	ands	r3, r2
 8002122:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	333c      	adds	r3, #60	@ 0x3c
 8002148:	3304      	adds	r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	799b      	ldrb	r3, [r3, #6]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d17b      	bne.n	800225e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4a61      	ldr	r2, [pc, #388]	@ (80022f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	f240 80b9 	bls.w	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80b3 	beq.w	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002192:	461a      	mov	r2, r3
 8002194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002198:	6093      	str	r3, [r2, #8]
 800219a:	e0a7      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b2:	461a      	mov	r2, r3
 80021b4:	2320      	movs	r3, #32
 80021b6:	6093      	str	r3, [r2, #8]
 80021b8:	e098      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 8093 	bne.w	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	@ (80022f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d90f      	bls.n	80021ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ea:	6093      	str	r3, [r2, #8]
 80021ec:	e07e      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	0159      	lsls	r1, r3, #5
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	440b      	add	r3, r1
 8002210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	1ad2      	subs	r2, r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d114      	bne.n	8002250 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002238:	461a      	mov	r2, r3
 800223a:	2101      	movs	r1, #1
 800223c:	f002 fc38 	bl	8004ab0 <USB_EP0_OutStart>
 8002240:	e006      	b.n	8002250 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	441a      	add	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f004 fee8 	bl	800702c <HAL_PCD_DataOutStageCallback>
 800225c:	e046      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4a26      	ldr	r2, [pc, #152]	@ (80022fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d124      	bne.n	80022b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800227c:	461a      	mov	r2, r3
 800227e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002282:	6093      	str	r3, [r2, #8]
 8002284:	e032      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	2320      	movs	r3, #32
 80022a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f004 febf 	bl	800702c <HAL_PCD_DataOutStageCallback>
 80022ae:	e01d      	b.n	80022ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d114      	bne.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022d8:	461a      	mov	r2, r3
 80022da:	2100      	movs	r1, #0
 80022dc:	f002 fbe8 	bl	8004ab0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f004 fea0 	bl	800702c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	4f54300a 	.word	0x4f54300a
 80022fc:	4f54310a 	.word	0x4f54310a

08002300 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	333c      	adds	r3, #60	@ 0x3c
 8002318:	3304      	adds	r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4a15      	ldr	r2, [pc, #84]	@ (8002388 <PCD_EP_OutSetupPacket_int+0x88>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d90e      	bls.n	8002354 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002352:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f004 fe57 	bl	8007008 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <PCD_EP_OutSetupPacket_int+0x88>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d90c      	bls.n	800237c <PCD_EP_OutSetupPacket_int+0x7c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	799b      	ldrb	r3, [r3, #6]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d108      	bne.n	800237c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002374:	461a      	mov	r2, r3
 8002376:	2101      	movs	r1, #1
 8002378:	f002 fb9a 	bl	8004ab0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	4f54300a 	.word	0x4f54300a

0800238c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
 8002398:	4613      	mov	r3, r2
 800239a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023aa:	883b      	ldrh	r3, [r7, #0]
 80023ac:	0419      	lsls	r1, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80023b8:	e028      	b.n	800240c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e00d      	b.n	80023ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3340      	adds	r3, #64	@ 0x40
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3301      	adds	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3ec      	bcc.n	80023ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023f4:	883b      	ldrh	r3, [r7, #0]
 80023f6:	0418      	lsls	r0, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	3b01      	subs	r3, #1
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	4302      	orrs	r2, r0
 8002404:	3340      	adds	r3, #64	@ 0x40
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246e:	f043 0303 	orr.w	r3, r3, #3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0cc      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b68      	ldr	r3, [pc, #416]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d90c      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b65      	ldr	r3, [pc, #404]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b63      	ldr	r3, [pc, #396]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b59      	ldr	r3, [pc, #356]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a58      	ldr	r2, [pc, #352]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4b53      	ldr	r3, [pc, #332]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a52      	ldr	r2, [pc, #328]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b50      	ldr	r3, [pc, #320]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	494d      	ldr	r1, [pc, #308]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d044      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d119      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d003      	beq.n	8002542 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b3f      	ldr	r3, [pc, #252]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e06f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3b      	ldr	r3, [pc, #236]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e067      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b37      	ldr	r3, [pc, #220]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4934      	ldr	r1, [pc, #208]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7fe f9f8 	bl	8000968 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7fe f9f4 	bl	8000968 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e04f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d20c      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b22      	ldr	r3, [pc, #136]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e032      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4916      	ldr	r1, [pc, #88]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	490e      	ldr	r1, [pc, #56]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800260a:	f000 fb57 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 800260e:	4602      	mov	r2, r0
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490a      	ldr	r1, [pc, #40]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a09      	ldr	r2, [pc, #36]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe f958 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00
 8002640:	40023800 	.word	0x40023800
 8002644:	080076d8 	.word	0x080076d8
 8002648:	20000000 	.word	0x20000000
 800264c:	20000004 	.word	0x20000004

08002650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_RCC_GetHCLKFreq+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000000 	.word	0x20000000

08002668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	@ 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d010      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80026a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ae:	496c      	ldr	r1, [pc, #432]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026be:	2301      	movs	r3, #1
 80026c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d010      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026ce:	4b64      	ldr	r3, [pc, #400]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026d4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026dc:	4960      	ldr	r1, [pc, #384]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80026ec:	2301      	movs	r3, #1
 80026ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026fc:	4b58      	ldr	r3, [pc, #352]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002702:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4955      	ldr	r1, [pc, #340]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800271a:	d101      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800271c:	2301      	movs	r3, #1
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002728:	2301      	movs	r3, #1
 800272a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d017      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002738:	4b49      	ldr	r3, [pc, #292]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800273a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800273e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002746:	4946      	ldr	r1, [pc, #280]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002752:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002756:	d101      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002758:	2301      	movs	r3, #1
 800275a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 808a 	beq.w	800288a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b39      	ldr	r3, [pc, #228]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	4a38      	ldr	r2, [pc, #224]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	@ 0x40
 8002786:	4b36      	ldr	r3, [pc, #216]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002792:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a33      	ldr	r2, [pc, #204]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800279e:	f7fe f8e3 	bl	8000968 <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7fe f8df 	bl	8000968 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e278      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027c4:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027cc:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02f      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d028      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ea:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027fe:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d114      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe f8ad 	bl	8000968 <HAL_GetTick>
 800280e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe f8a9 	bl	8000968 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e240      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ee      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800283c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002840:	d114      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002856:	4902      	ldr	r1, [pc, #8]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
 800285c:	e00c      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40007000 	.word	0x40007000
 8002868:	42470e40 	.word	0x42470e40
 800286c:	4b4a      	ldr	r3, [pc, #296]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a49      	ldr	r2, [pc, #292]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002872:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002876:	6093      	str	r3, [r2, #8]
 8002878:	4b47      	ldr	r3, [pc, #284]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800287a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002884:	4944      	ldr	r1, [pc, #272]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002886:	4313      	orrs	r3, r2
 8002888:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800289c:	4b3f      	ldr	r3, [pc, #252]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800289e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	4937      	ldr	r1, [pc, #220]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028ce:	4b32      	ldr	r3, [pc, #200]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028dc:	492e      	ldr	r1, [pc, #184]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d011      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028f0:	4b29      	ldr	r3, [pc, #164]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	4926      	ldr	r1, [pc, #152]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800290e:	d101      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002910:	2301      	movs	r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002920:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002926:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	491a      	ldr	r1, [pc, #104]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d011      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002948:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002950:	4911      	ldr	r1, [pc, #68]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002960:	d101      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002962:	2301      	movs	r3, #1
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002968:	2b01      	cmp	r3, #1
 800296a:	d005      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002974:	f040 80ff 	bne.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800297e:	f7fd fff3 	bl	8000968 <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002984:	e00e      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002986:	f7fd ffef 	bl	8000968 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d907      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e188      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002998:	40023800 	.word	0x40023800
 800299c:	424711e0 	.word	0x424711e0
 80029a0:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029a4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ea      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d028      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d124      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029d8:	4b71      	ldr	r3, [pc, #452]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029de:	0c1b      	lsrs	r3, r3, #16
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	3301      	adds	r3, #1
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f0:	0e1b      	lsrs	r3, r3, #24
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	019b      	lsls	r3, r3, #6
 8002a02:	431a      	orrs	r2, r3
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	071b      	lsls	r3, r3, #28
 8002a1a:	4961      	ldr	r1, [pc, #388]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d035      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a4c:	d130      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a60:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a66:	0f1b      	lsrs	r3, r3, #28
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	019b      	lsls	r3, r3, #6
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	071b      	lsls	r3, r3, #28
 8002a90:	4943      	ldr	r1, [pc, #268]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a98:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9e:	f023 021f 	bic.w	r2, r3, #31
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	493d      	ldr	r1, [pc, #244]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d029      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ac4:	d124      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ac6:	4b36      	ldr	r3, [pc, #216]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ad8:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ade:	0f1b      	lsrs	r3, r3, #28
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	019b      	lsls	r3, r3, #6
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	3b01      	subs	r3, #1
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	071b      	lsls	r3, r3, #28
 8002b08:	4925      	ldr	r1, [pc, #148]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d016      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	071b      	lsls	r3, r3, #28
 8002b42:	4917      	ldr	r1, [pc, #92]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fd ff0a 	bl	8000968 <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b58:	f7fd ff06 	bl	8000968 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e09f      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	f040 8095 	bne.w	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fd fef0 	bl	8000968 <HAL_GetTick>
 8002b88:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b8a:	e00f      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b8c:	f7fd feec 	bl	8000968 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d908      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e085      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470068 	.word	0x42470068
 8002ba8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bac:	4b41      	ldr	r3, [pc, #260]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb8:	d0e8      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d02b      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d127      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002be2:	4b34      	ldr	r3, [pc, #208]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	019b      	lsls	r3, r3, #6
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	4928      	ldr	r1, [pc, #160]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c1e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	3b01      	subs	r3, #1
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	4922      	ldr	r1, [pc, #136]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d01d      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c46:	d118      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c48:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4e:	0e1b      	lsrs	r3, r3, #24
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	019b      	lsls	r3, r3, #6
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	4910      	ldr	r1, [pc, #64]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c80:	f7fd fe72 	bl	8000968 <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c88:	f7fd fe6e 	bl	8000968 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e007      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca6:	d1ef      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3730      	adds	r7, #48	@ 0x30
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	42470070 	.word	0x42470070

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc0:	b0a6      	sub	sp, #152	@ 0x98
 8002cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce2:	4bc8      	ldr	r3, [pc, #800]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	f200 817e 	bhi.w	8002fec <HAL_RCC_GetSysClockFreq+0x330>
 8002cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002fed 	.word	0x08002fed
 8002d00:	08002fed 	.word	0x08002fed
 8002d04:	08002fed 	.word	0x08002fed
 8002d08:	08002d35 	.word	0x08002d35
 8002d0c:	08002fed 	.word	0x08002fed
 8002d10:	08002fed 	.word	0x08002fed
 8002d14:	08002fed 	.word	0x08002fed
 8002d18:	08002d3d 	.word	0x08002d3d
 8002d1c:	08002fed 	.word	0x08002fed
 8002d20:	08002fed 	.word	0x08002fed
 8002d24:	08002fed 	.word	0x08002fed
 8002d28:	08002ea7 	.word	0x08002ea7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4bb6      	ldr	r3, [pc, #728]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d32:	e15f      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d34:	4bb5      	ldr	r3, [pc, #724]	@ (800300c <HAL_RCC_GetSysClockFreq+0x350>)
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d3a:	e15b      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d3c:	4bb1      	ldr	r3, [pc, #708]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d48:	4bae      	ldr	r3, [pc, #696]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d031      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d54:	4bab      	ldr	r3, [pc, #684]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d66:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d68:	2300      	movs	r3, #0
 8002d6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d6c:	4ba7      	ldr	r3, [pc, #668]	@ (800300c <HAL_RCC_GetSysClockFreq+0x350>)
 8002d6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d72:	462a      	mov	r2, r5
 8002d74:	fb03 f202 	mul.w	r2, r3, r2
 8002d78:	2300      	movs	r3, #0
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	4aa2      	ldr	r2, [pc, #648]	@ (800300c <HAL_RCC_GetSysClockFreq+0x350>)
 8002d84:	4621      	mov	r1, r4
 8002d86:	fba1 1202 	umull	r1, r2, r1, r2
 8002d8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002d90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d92:	4413      	add	r3, r2
 8002d94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002da0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002da4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002da8:	f7fd fa2c 	bl	8000204 <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4613      	mov	r3, r2
 8002db2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002db6:	e064      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db8:	4b92      	ldr	r3, [pc, #584]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc2:	657a      	str	r2, [r7, #84]	@ 0x54
 8002dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dcc:	2300      	movs	r3, #0
 8002dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	f04f 0000 	mov.w	r0, #0
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	0159      	lsls	r1, r3, #5
 8002de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de6:	0150      	lsls	r0, r2, #5
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4621      	mov	r1, r4
 8002dee:	1a51      	subs	r1, r2, r1
 8002df0:	6139      	str	r1, [r7, #16]
 8002df2:	4629      	mov	r1, r5
 8002df4:	eb63 0301 	sbc.w	r3, r3, r1
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e06:	4659      	mov	r1, fp
 8002e08:	018b      	lsls	r3, r1, #6
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e10:	4651      	mov	r1, sl
 8002e12:	018a      	lsls	r2, r1, #6
 8002e14:	4651      	mov	r1, sl
 8002e16:	ebb2 0801 	subs.w	r8, r2, r1
 8002e1a:	4659      	mov	r1, fp
 8002e1c:	eb63 0901 	sbc.w	r9, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e34:	4690      	mov	r8, r2
 8002e36:	4699      	mov	r9, r3
 8002e38:	4623      	mov	r3, r4
 8002e3a:	eb18 0303 	adds.w	r3, r8, r3
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	462b      	mov	r3, r5
 8002e42:	eb49 0303 	adc.w	r3, r9, r3
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e54:	4629      	mov	r1, r5
 8002e56:	028b      	lsls	r3, r1, #10
 8002e58:	4621      	mov	r1, r4
 8002e5a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5e:	4621      	mov	r1, r4
 8002e60:	028a      	lsls	r2, r1, #10
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e74:	f7fd f9c6 	bl	8000204 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e82:	4b60      	ldr	r3, [pc, #384]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002e94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ea4:	e0a6      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea6:	4b57      	ldr	r3, [pc, #348]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb2:	4b54      	ldr	r3, [pc, #336]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d02a      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebe:	4b51      	ldr	r3, [pc, #324]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ec8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ecc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800300c <HAL_RCC_GetSysClockFreq+0x350>)
 8002ed4:	fb03 f201 	mul.w	r2, r3, r1
 8002ed8:	2300      	movs	r3, #0
 8002eda:	fb00 f303 	mul.w	r3, r0, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800300c <HAL_RCC_GetSysClockFreq+0x350>)
 8002ee2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ee6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ee8:	460a      	mov	r2, r1
 8002eea:	673a      	str	r2, [r7, #112]	@ 0x70
 8002eec:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002eee:	4413      	add	r3, r2
 8002ef0:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002efa:	637a      	str	r2, [r7, #52]	@ 0x34
 8002efc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002f04:	f7fd f97e 	bl	8000204 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f12:	e05b      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f14:	4b3b      	ldr	r3, [pc, #236]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f26:	623b      	str	r3, [r7, #32]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f30:	4642      	mov	r2, r8
 8002f32:	464b      	mov	r3, r9
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	0159      	lsls	r1, r3, #5
 8002f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f42:	0150      	lsls	r0, r2, #5
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4641      	mov	r1, r8
 8002f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f4e:	4649      	mov	r1, r9
 8002f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f68:	ebb2 040a 	subs.w	r4, r2, sl
 8002f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	00eb      	lsls	r3, r5, #3
 8002f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f7e:	00e2      	lsls	r2, r4, #3
 8002f80:	4614      	mov	r4, r2
 8002f82:	461d      	mov	r5, r3
 8002f84:	4643      	mov	r3, r8
 8002f86:	18e3      	adds	r3, r4, r3
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	eb45 0303 	adc.w	r3, r5, r3
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	028b      	lsls	r3, r1, #10
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa8:	4621      	mov	r1, r4
 8002faa:	028a      	lsls	r2, r1, #10
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	61fa      	str	r2, [r7, #28]
 8002fba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fbe:	f7fd f921 	bl	8000204 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0f1b      	lsrs	r3, r3, #28
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002fea:	e003      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ff2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3798      	adds	r7, #152	@ 0x98
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	00f42400 	.word	0x00f42400
 800300c:	00989680 	.word	0x00989680

08003010 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e28d      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8083 	beq.w	8003136 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003030:	4b94      	ldr	r3, [pc, #592]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b04      	cmp	r3, #4
 800303a:	d019      	beq.n	8003070 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800303c:	4b91      	ldr	r3, [pc, #580]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
        || \
 8003044:	2b08      	cmp	r3, #8
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003048:	4b8e      	ldr	r3, [pc, #568]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003054:	d00c      	beq.n	8003070 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003056:	4b8b      	ldr	r3, [pc, #556]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d112      	bne.n	8003088 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4b88      	ldr	r3, [pc, #544]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800306a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306e:	d10b      	bne.n	8003088 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	4b84      	ldr	r3, [pc, #528]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d05b      	beq.n	8003134 <HAL_RCC_OscConfig+0x124>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d157      	bne.n	8003134 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e25a      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003090:	d106      	bne.n	80030a0 <HAL_RCC_OscConfig+0x90>
 8003092:	4b7c      	ldr	r3, [pc, #496]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7b      	ldr	r2, [pc, #492]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e01d      	b.n	80030dc <HAL_RCC_OscConfig+0xcc>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0xb4>
 80030aa:	4b76      	ldr	r3, [pc, #472]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a75      	ldr	r2, [pc, #468]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80030b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b73      	ldr	r3, [pc, #460]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a72      	ldr	r2, [pc, #456]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0xcc>
 80030c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80030ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80030d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d013      	beq.n	800310c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fd fc40 	bl	8000968 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ec:	f7fd fc3c 	bl	8000968 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	@ 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e21f      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b61      	ldr	r3, [pc, #388]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0xdc>
 800310a:	e014      	b.n	8003136 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fd fc2c 	bl	8000968 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003114:	f7fd fc28 	bl	8000968 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	@ 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e20b      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	4b57      	ldr	r3, [pc, #348]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x104>
 8003132:	e000      	b.n	8003136 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d06f      	beq.n	8003222 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003142:	4b50      	ldr	r3, [pc, #320]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800314e:	4b4d      	ldr	r3, [pc, #308]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
        || \
 8003156:	2b08      	cmp	r3, #8
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800315a:	4b4a      	ldr	r3, [pc, #296]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b47      	ldr	r3, [pc, #284]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d11c      	bne.n	80031ac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b44      	ldr	r3, [pc, #272]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d116      	bne.n	80031ac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	4b41      	ldr	r3, [pc, #260]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x186>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e1d3      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003196:	4b3b      	ldr	r3, [pc, #236]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4937      	ldr	r1, [pc, #220]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	e03a      	b.n	8003222 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b4:	4b34      	ldr	r3, [pc, #208]	@ (8003288 <HAL_RCC_OscConfig+0x278>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7fd fbd5 	bl	8000968 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c2:	f7fd fbd1 	bl	8000968 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1b4      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	4b28      	ldr	r3, [pc, #160]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4925      	ldr	r1, [pc, #148]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
 80031f4:	e015      	b.n	8003222 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f6:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <HAL_RCC_OscConfig+0x278>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fd fbb4 	bl	8000968 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003204:	f7fd fbb0 	bl	8000968 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e193      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d036      	beq.n	800329c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <HAL_RCC_OscConfig+0x27c>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fd fb94 	bl	8000968 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003244:	f7fd fb90 	bl	8000968 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e173      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x234>
 8003262:	e01b      	b.n	800329c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003264:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_RCC_OscConfig+0x27c>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fd fb7d 	bl	8000968 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	e00e      	b.n	8003290 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003272:	f7fd fb79 	bl	8000968 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d907      	bls.n	8003290 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e15c      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
 8003284:	40023800 	.word	0x40023800
 8003288:	42470000 	.word	0x42470000
 800328c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	4b8a      	ldr	r3, [pc, #552]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ea      	bne.n	8003272 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8097 	beq.w	80033d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ae:	4b83      	ldr	r3, [pc, #524]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b7f      	ldr	r3, [pc, #508]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	4a7e      	ldr	r2, [pc, #504]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ca:	4b7c      	ldr	r3, [pc, #496]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b79      	ldr	r3, [pc, #484]	@ (80034c0 <HAL_RCC_OscConfig+0x4b0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d118      	bne.n	8003318 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e6:	4b76      	ldr	r3, [pc, #472]	@ (80034c0 <HAL_RCC_OscConfig+0x4b0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a75      	ldr	r2, [pc, #468]	@ (80034c0 <HAL_RCC_OscConfig+0x4b0>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f2:	f7fd fb39 	bl	8000968 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fa:	f7fd fb35 	bl	8000968 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e118      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	4b6c      	ldr	r3, [pc, #432]	@ (80034c0 <HAL_RCC_OscConfig+0x4b0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d106      	bne.n	800332e <HAL_RCC_OscConfig+0x31e>
 8003320:	4b66      	ldr	r3, [pc, #408]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003324:	4a65      	ldr	r2, [pc, #404]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6713      	str	r3, [r2, #112]	@ 0x70
 800332c:	e01c      	b.n	8003368 <HAL_RCC_OscConfig+0x358>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b05      	cmp	r3, #5
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x340>
 8003336:	4b61      	ldr	r3, [pc, #388]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	4a60      	ldr	r2, [pc, #384]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	@ 0x70
 8003342:	4b5e      	ldr	r3, [pc, #376]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	4a5d      	ldr	r2, [pc, #372]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6713      	str	r3, [r2, #112]	@ 0x70
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0x358>
 8003350:	4b5a      	ldr	r3, [pc, #360]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003354:	4a59      	ldr	r2, [pc, #356]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6713      	str	r3, [r2, #112]	@ 0x70
 800335c:	4b57      	ldr	r3, [pc, #348]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a56      	ldr	r2, [pc, #344]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003362:	f023 0304 	bic.w	r3, r3, #4
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fd fafa 	bl	8000968 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fd faf6 	bl	8000968 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0d7      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	4b4b      	ldr	r3, [pc, #300]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ee      	beq.n	8003378 <HAL_RCC_OscConfig+0x368>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd fae4 	bl	8000968 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fd fae0 	bl	8000968 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0c1      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ba:	4b40      	ldr	r3, [pc, #256]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ee      	bne.n	80033a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033cc:	4b3b      	ldr	r3, [pc, #236]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	4a3a      	ldr	r2, [pc, #232]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80033d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80ad 	beq.w	800353c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e2:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d060      	beq.n	80034b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d145      	bne.n	8003482 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b33      	ldr	r3, [pc, #204]	@ (80034c4 <HAL_RCC_OscConfig+0x4b4>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fd fab4 	bl	8000968 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd fab0 	bl	8000968 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e093      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b29      	ldr	r3, [pc, #164]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	019b      	lsls	r3, r3, #6
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	3b01      	subs	r3, #1
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	071b      	lsls	r3, r3, #28
 800344e:	491b      	ldr	r1, [pc, #108]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003454:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <HAL_RCC_OscConfig+0x4b4>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fd fa85 	bl	8000968 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7fd fa81 	bl	8000968 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e064      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x452>
 8003480:	e05c      	b.n	800353c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <HAL_RCC_OscConfig+0x4b4>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd fa6e 	bl	8000968 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7fd fa6a 	bl	8000968 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e04d      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x480>
 80034ae:	e045      	b.n	800353c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e040      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40007000 	.word	0x40007000
 80034c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <HAL_RCC_OscConfig+0x538>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d030      	beq.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d129      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d122      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003500:	4293      	cmp	r3, r2
 8003502:	d119      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	3b01      	subs	r3, #1
 8003512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d10f      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800

0800354c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800354c:	b084      	sub	sp, #16
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	f107 001c 	add.w	r0, r7, #28
 800355a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800355e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003562:	2b01      	cmp	r3, #1
 8003564:	d123      	bne.n	80035ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800357a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800358e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003592:	2b01      	cmp	r3, #1
 8003594:	d105      	bne.n	80035a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f001 fae2 	bl	8004b6c <USB_CoreReset>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	e01b      	b.n	80035e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f001 fad6 	bl	8004b6c <USB_CoreReset>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80035d8:	e005      	b.n	80035e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035e6:	7fbb      	ldrb	r3, [r7, #30]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d10b      	bne.n	8003604 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f043 0206 	orr.w	r2, r3, #6
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003610:	b004      	add	sp, #16
 8003612:	4770      	bx	lr

08003614 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d165      	bne.n	80036f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4a41      	ldr	r2, [pc, #260]	@ (8003730 <USB_SetTurnaroundTime+0x11c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d906      	bls.n	800363e <USB_SetTurnaroundTime+0x2a>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4a40      	ldr	r2, [pc, #256]	@ (8003734 <USB_SetTurnaroundTime+0x120>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d202      	bcs.n	800363e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003638:	230f      	movs	r3, #15
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e062      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4a3c      	ldr	r2, [pc, #240]	@ (8003734 <USB_SetTurnaroundTime+0x120>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d306      	bcc.n	8003654 <USB_SetTurnaroundTime+0x40>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4a3b      	ldr	r2, [pc, #236]	@ (8003738 <USB_SetTurnaroundTime+0x124>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d202      	bcs.n	8003654 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800364e:	230e      	movs	r3, #14
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e057      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a38      	ldr	r2, [pc, #224]	@ (8003738 <USB_SetTurnaroundTime+0x124>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d306      	bcc.n	800366a <USB_SetTurnaroundTime+0x56>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4a37      	ldr	r2, [pc, #220]	@ (800373c <USB_SetTurnaroundTime+0x128>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d202      	bcs.n	800366a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003664:	230d      	movs	r3, #13
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e04c      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4a33      	ldr	r2, [pc, #204]	@ (800373c <USB_SetTurnaroundTime+0x128>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d306      	bcc.n	8003680 <USB_SetTurnaroundTime+0x6c>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4a32      	ldr	r2, [pc, #200]	@ (8003740 <USB_SetTurnaroundTime+0x12c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d802      	bhi.n	8003680 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800367a:	230c      	movs	r3, #12
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	e041      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4a2f      	ldr	r2, [pc, #188]	@ (8003740 <USB_SetTurnaroundTime+0x12c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d906      	bls.n	8003696 <USB_SetTurnaroundTime+0x82>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4a2e      	ldr	r2, [pc, #184]	@ (8003744 <USB_SetTurnaroundTime+0x130>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d802      	bhi.n	8003696 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003690:	230b      	movs	r3, #11
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e036      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <USB_SetTurnaroundTime+0x130>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d906      	bls.n	80036ac <USB_SetTurnaroundTime+0x98>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4a29      	ldr	r2, [pc, #164]	@ (8003748 <USB_SetTurnaroundTime+0x134>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d802      	bhi.n	80036ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036a6:	230a      	movs	r3, #10
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e02b      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a26      	ldr	r2, [pc, #152]	@ (8003748 <USB_SetTurnaroundTime+0x134>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d906      	bls.n	80036c2 <USB_SetTurnaroundTime+0xae>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4a25      	ldr	r2, [pc, #148]	@ (800374c <USB_SetTurnaroundTime+0x138>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d202      	bcs.n	80036c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036bc:	2309      	movs	r3, #9
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e020      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4a21      	ldr	r2, [pc, #132]	@ (800374c <USB_SetTurnaroundTime+0x138>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d306      	bcc.n	80036d8 <USB_SetTurnaroundTime+0xc4>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4a20      	ldr	r2, [pc, #128]	@ (8003750 <USB_SetTurnaroundTime+0x13c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d802      	bhi.n	80036d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036d2:	2308      	movs	r3, #8
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e015      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4a1d      	ldr	r2, [pc, #116]	@ (8003750 <USB_SetTurnaroundTime+0x13c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d906      	bls.n	80036ee <USB_SetTurnaroundTime+0xda>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003754 <USB_SetTurnaroundTime+0x140>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d202      	bcs.n	80036ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80036e8:	2307      	movs	r3, #7
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e00a      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80036ee:	2306      	movs	r3, #6
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e007      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80036fa:	2309      	movs	r3, #9
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e001      	b.n	8003704 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003700:	2309      	movs	r3, #9
 8003702:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	00d8acbf 	.word	0x00d8acbf
 8003734:	00e4e1c0 	.word	0x00e4e1c0
 8003738:	00f42400 	.word	0x00f42400
 800373c:	01067380 	.word	0x01067380
 8003740:	011a499f 	.word	0x011a499f
 8003744:	01312cff 	.word	0x01312cff
 8003748:	014ca43f 	.word	0x014ca43f
 800374c:	016e3600 	.word	0x016e3600
 8003750:	01a6ab1f 	.word	0x01a6ab1f
 8003754:	01e84800 	.word	0x01e84800

08003758 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0201 	bic.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d115      	bne.n	80037ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037ca:	200a      	movs	r0, #10
 80037cc:	f7fd f8d8 	bl	8000980 <HAL_Delay>
      ms += 10U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	330a      	adds	r3, #10
 80037d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f001 f939 	bl	8004a4e <USB_GetMode>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d01e      	beq.n	8003820 <USB_SetCurrentMode+0x84>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80037e6:	d9f0      	bls.n	80037ca <USB_SetCurrentMode+0x2e>
 80037e8:	e01a      	b.n	8003820 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d115      	bne.n	800381c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037fc:	200a      	movs	r0, #10
 80037fe:	f7fd f8bf 	bl	8000980 <HAL_Delay>
      ms += 10U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	330a      	adds	r3, #10
 8003806:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f001 f920 	bl	8004a4e <USB_GetMode>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <USB_SetCurrentMode+0x84>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2bc7      	cmp	r3, #199	@ 0xc7
 8003818:	d9f0      	bls.n	80037fc <USB_SetCurrentMode+0x60>
 800381a:	e001      	b.n	8003820 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e005      	b.n	800382c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2bc8      	cmp	r3, #200	@ 0xc8
 8003824:	d101      	bne.n	800382a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003834:	b084      	sub	sp, #16
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	e009      	b.n	8003868 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	3340      	adds	r3, #64	@ 0x40
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	3301      	adds	r3, #1
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0e      	cmp	r3, #14
 800386c:	d9f2      	bls.n	8003854 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800386e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11c      	bne.n	80038b0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e005      	b.n	80038bc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80038c2:	461a      	mov	r2, r3
 80038c4:	2300      	movs	r3, #0
 80038c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10d      	bne.n	80038ec <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038d8:	2100      	movs	r1, #0
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f968 	bl	8003bb0 <USB_SetDevSpeed>
 80038e0:	e008      	b.n	80038f4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038e2:	2101      	movs	r1, #1
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f963 	bl	8003bb0 <USB_SetDevSpeed>
 80038ea:	e003      	b.n	80038f4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038ec:	2103      	movs	r1, #3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f95e 	bl	8003bb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038f4:	2110      	movs	r1, #16
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8fa 	bl	8003af0 <USB_FlushTxFifo>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f924 	bl	8003b54 <USB_FlushRxFifo>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800391c:	461a      	mov	r2, r3
 800391e:	2300      	movs	r3, #0
 8003920:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003928:	461a      	mov	r2, r3
 800392a:	2300      	movs	r3, #0
 800392c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003934:	461a      	mov	r2, r3
 8003936:	2300      	movs	r3, #0
 8003938:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e043      	b.n	80039c8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003952:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003956:	d118      	bne.n	800398a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396a:	461a      	mov	r2, r3
 800396c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e013      	b.n	800399c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003980:	461a      	mov	r2, r3
 8003982:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e008      	b.n	800399c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a8:	461a      	mov	r2, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ba:	461a      	mov	r2, r3
 80039bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039cc:	461a      	mov	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d3b5      	bcc.n	8003940 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e043      	b.n	8003a62 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039f0:	d118      	bne.n	8003a24 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e013      	b.n	8003a36 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e008      	b.n	8003a36 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a42:	461a      	mov	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a54:	461a      	mov	r2, r3
 8003a56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a66:	461a      	mov	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d3b5      	bcc.n	80039da <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d105      	bne.n	8003aa4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f043 0210 	orr.w	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <USB_DevInit+0x2b8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ab0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f043 0208 	orr.w	r2, r3, #8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ac4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d107      	bne.n	8003adc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ae8:	b004      	add	sp, #16
 8003aea:	4770      	bx	lr
 8003aec:	803c3800 	.word	0x803c3800

08003af0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b0a:	d901      	bls.n	8003b10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e01b      	b.n	8003b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	daf2      	bge.n	8003afe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b34:	d901      	bls.n	8003b3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e006      	b.n	8003b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d0f0      	beq.n	8003b28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b6c:	d901      	bls.n	8003b72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e018      	b.n	8003ba4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	daf2      	bge.n	8003b60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2210      	movs	r2, #16
 8003b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b90:	d901      	bls.n	8003b96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e006      	b.n	8003ba4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d0f0      	beq.n	8003b84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b087      	sub	sp, #28
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0306 	and.w	r3, r3, #6
 8003bfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75fb      	strb	r3, [r7, #23]
 8003c06:	e00a      	b.n	8003c1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d002      	beq.n	8003c14 <USB_GetDevSpeed+0x32>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d102      	bne.n	8003c1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c14:	2302      	movs	r3, #2
 8003c16:	75fb      	strb	r3, [r7, #23]
 8003c18:	e001      	b.n	8003c1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c1a:	230f      	movs	r3, #15
 8003c1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d13a      	bne.n	8003cbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d155      	bne.n	8003d2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	791b      	ldrb	r3, [r3, #4]
 8003c9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	059b      	lsls	r3, r3, #22
 8003ca2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	e036      	b.n	8003d2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11a      	bne.n	8003d2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	791b      	ldrb	r3, [r3, #4]
 8003d10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d12:	430b      	orrs	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	0151      	lsls	r1, r2, #5
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	785b      	ldrb	r3, [r3, #1]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d161      	bne.n	8003e1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d6e:	d11f      	bne.n	8003db0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	0151      	lsls	r1, r2, #5
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	440a      	add	r2, r1
 8003d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003daa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	68f9      	ldr	r1, [r7, #12]
 8003dcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003df4:	4013      	ands	r3, r2
 8003df6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	0159      	lsls	r1, r3, #5
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	440b      	add	r3, r1
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e12:	4619      	mov	r1, r3
 8003e14:	4b35      	ldr	r3, [pc, #212]	@ (8003eec <USB_DeactivateEndpoint+0x1b0>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
 8003e1a:	e060      	b.n	8003ede <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e32:	d11f      	bne.n	8003e74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	0151      	lsls	r1, r2, #5
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	440a      	add	r2, r1
 8003e4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	0151      	lsls	r1, r2, #5
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	440a      	add	r2, r1
 8003e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	2101      	movs	r1, #1
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	68f9      	ldr	r1, [r7, #12]
 8003e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e94:	4013      	ands	r3, r2
 8003e96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	68f9      	ldr	r1, [r7, #12]
 8003eb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	0159      	lsls	r1, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <USB_DeactivateEndpoint+0x1b4>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	ec337800 	.word	0xec337800
 8003ef0:	eff37800 	.word	0xeff37800

08003ef4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	f040 817f 	bne.w	8004214 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d132      	bne.n	8003f84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f38:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f3c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f7c:	0cdb      	lsrs	r3, r3, #19
 8003f7e:	04db      	lsls	r3, r3, #19
 8003f80:	6113      	str	r3, [r2, #16]
 8003f82:	e097      	b.n	80040b4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	0151      	lsls	r1, r2, #5
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	440a      	add	r2, r1
 8003f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f9e:	0cdb      	lsrs	r3, r3, #19
 8003fa0:	04db      	lsls	r3, r3, #19
 8003fa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fbe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003fc2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003fc6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11a      	bne.n	8004004 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d903      	bls.n	8003fe2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ffc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004000:	6113      	str	r3, [r2, #16]
 8004002:	e044      	b.n	800408e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4413      	add	r3, r2
 800400e:	1e5a      	subs	r2, r3, #1
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	8afb      	ldrh	r3, [r7, #22]
 800402a:	04d9      	lsls	r1, r3, #19
 800402c:	4ba4      	ldr	r3, [pc, #656]	@ (80042c0 <USB_EPStartXfer+0x3cc>)
 800402e:	400b      	ands	r3, r1
 8004030:	69b9      	ldr	r1, [r7, #24]
 8004032:	0148      	lsls	r0, r1, #5
 8004034:	69f9      	ldr	r1, [r7, #28]
 8004036:	4401      	add	r1, r0
 8004038:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800403c:	4313      	orrs	r3, r2
 800403e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	791b      	ldrb	r3, [r3, #4]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d122      	bne.n	800408e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004062:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004066:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	8afb      	ldrh	r3, [r7, #22]
 8004078:	075b      	lsls	r3, r3, #29
 800407a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800407e:	69b9      	ldr	r1, [r7, #24]
 8004080:	0148      	lsls	r0, r1, #5
 8004082:	69f9      	ldr	r1, [r7, #28]
 8004084:	4401      	add	r1, r0
 8004086:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800408a:	4313      	orrs	r3, r2
 800408c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	0148      	lsls	r0, r1, #5
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	4401      	add	r1, r0
 80040ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d14b      	bne.n	8004152 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ce:	461a      	mov	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	791b      	ldrb	r3, [r3, #4]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d128      	bne.n	8004130 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d110      	bne.n	8004110 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004108:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e00f      	b.n	8004130 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800414a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e166      	b.n	8004420 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800416c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004170:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	791b      	ldrb	r3, [r3, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d015      	beq.n	80041a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 814e 	beq.w	8004420 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800418a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	2101      	movs	r1, #1
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	69f9      	ldr	r1, [r7, #28]
 800419c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041a0:	4313      	orrs	r3, r2
 80041a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80041a4:	e13c      	b.n	8004420 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d110      	bne.n	80041d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e00f      	b.n	80041f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	68d9      	ldr	r1, [r3, #12]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	b298      	uxth	r0, r3
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	4603      	mov	r3, r0
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f9b9 	bl	8004584 <USB_WritePacket>
 8004212:	e105      	b.n	8004420 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800422e:	0cdb      	lsrs	r3, r3, #19
 8004230:	04db      	lsls	r3, r3, #19
 8004232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800424e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004252:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004256:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d132      	bne.n	80042c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428c:	69b9      	ldr	r1, [r7, #24]
 800428e:	0148      	lsls	r0, r1, #5
 8004290:	69f9      	ldr	r1, [r7, #28]
 8004292:	4401      	add	r1, r0
 8004294:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004298:	4313      	orrs	r3, r2
 800429a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042ba:	6113      	str	r3, [r2, #16]
 80042bc:	e062      	b.n	8004384 <USB_EPStartXfer+0x490>
 80042be:	bf00      	nop
 80042c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d123      	bne.n	8004314 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	0148      	lsls	r0, r1, #5
 80042e6:	69f9      	ldr	r1, [r7, #28]
 80042e8:	4401      	add	r1, r0
 80042ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	0151      	lsls	r1, r2, #5
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	440a      	add	r2, r1
 8004308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800430c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004310:	6113      	str	r3, [r2, #16]
 8004312:	e037      	b.n	8004384 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4413      	add	r3, r2
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	fbb2 f3f3 	udiv	r3, r2, r3
 8004328:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	8afa      	ldrh	r2, [r7, #22]
 8004330:	fb03 f202 	mul.w	r2, r3, r2
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	8afb      	ldrh	r3, [r7, #22]
 8004348:	04d9      	lsls	r1, r3, #19
 800434a:	4b38      	ldr	r3, [pc, #224]	@ (800442c <USB_EPStartXfer+0x538>)
 800434c:	400b      	ands	r3, r1
 800434e:	69b9      	ldr	r1, [r7, #24]
 8004350:	0148      	lsls	r0, r1, #5
 8004352:	69f9      	ldr	r1, [r7, #28]
 8004354:	4401      	add	r1, r0
 8004356:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800435a:	4313      	orrs	r3, r2
 800435c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004374:	69b9      	ldr	r1, [r7, #24]
 8004376:	0148      	lsls	r0, r1, #5
 8004378:	69f9      	ldr	r1, [r7, #28]
 800437a:	4401      	add	r1, r0
 800437c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d10d      	bne.n	80043a6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	68d9      	ldr	r1, [r3, #12]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a2:	460a      	mov	r2, r1
 80043a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	791b      	ldrb	r3, [r3, #4]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d128      	bne.n	8004400 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d110      	bne.n	80043e0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e00f      	b.n	8004400 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800441a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800441e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	1ff80000 	.word	0x1ff80000

08004430 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d14a      	bne.n	80044e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004466:	f040 8086 	bne.w	8004576 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	7812      	ldrb	r2, [r2, #0]
 800447e:	0151      	lsls	r1, r2, #5
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	440a      	add	r2, r1
 8004484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004488:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800448c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80044be:	4293      	cmp	r3, r2
 80044c0:	d902      	bls.n	80044c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
          break;
 80044c6:	e056      	b.n	8004576 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044e0:	d0e7      	beq.n	80044b2 <USB_EPStopXfer+0x82>
 80044e2:	e048      	b.n	8004576 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044fc:	d13b      	bne.n	8004576 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	0151      	lsls	r1, r2, #5
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	440a      	add	r2, r1
 8004518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800451c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004520:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004540:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004544:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3301      	adds	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004552:	4293      	cmp	r3, r2
 8004554:	d902      	bls.n	800455c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
          break;
 800455a:	e00c      	b.n	8004576 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004574:	d0e7      	beq.n	8004546 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004576:	7dfb      	ldrb	r3, [r7, #23]
}
 8004578:	4618      	mov	r0, r3
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004584:	b480      	push	{r7}
 8004586:	b089      	sub	sp, #36	@ 0x24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	4611      	mov	r1, r2
 8004590:	461a      	mov	r2, r3
 8004592:	460b      	mov	r3, r1
 8004594:	71fb      	strb	r3, [r7, #7]
 8004596:	4613      	mov	r3, r2
 8004598:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80045a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d123      	bne.n	80045f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045aa:	88bb      	ldrh	r3, [r7, #4]
 80045ac:	3303      	adds	r3, #3
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e018      	b.n	80045ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	031a      	lsls	r2, r3, #12
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c4:	461a      	mov	r2, r3
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3301      	adds	r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	3301      	adds	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3301      	adds	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d3e2      	bcc.n	80045b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3724      	adds	r7, #36	@ 0x24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004600:	b480      	push	{r7}
 8004602:	b08b      	sub	sp, #44	@ 0x2c
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	b29b      	uxth	r3, r3
 800461c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	623b      	str	r3, [r7, #32]
 800462a:	e014      	b.n	8004656 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	601a      	str	r2, [r3, #0]
    pDest++;
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	3301      	adds	r3, #1
 800463c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	3301      	adds	r3, #1
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	3301      	adds	r3, #1
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	3301      	adds	r3, #1
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	3301      	adds	r3, #1
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	6a3a      	ldr	r2, [r7, #32]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	429a      	cmp	r2, r3
 800465c:	d3e6      	bcc.n	800462c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800465e:	8bfb      	ldrh	r3, [r7, #30]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01e      	beq.n	80046a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800466e:	461a      	mov	r2, r3
 8004670:	f107 0310 	add.w	r3, r7, #16
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
 8004684:	b2da      	uxtb	r2, r3
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	701a      	strb	r2, [r3, #0]
      i++;
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	3301      	adds	r3, #1
 800468e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	3301      	adds	r3, #1
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004696:	8bfb      	ldrh	r3, [r7, #30]
 8004698:	3b01      	subs	r3, #1
 800469a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800469c:	8bfb      	ldrh	r3, [r7, #30]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ea      	bne.n	8004678 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	372c      	adds	r7, #44	@ 0x2c
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d12c      	bne.n	8004726 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db12      	blt.n	8004704 <USB_EPSetStall+0x54>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00f      	beq.n	8004704 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004702:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	440a      	add	r2, r1
 800471a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800471e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	e02b      	b.n	800477e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	db12      	blt.n	800475e <USB_EPSetStall+0xae>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00f      	beq.n	800475e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004758:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800475c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004778:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800477c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d128      	bne.n	80047fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	791b      	ldrb	r3, [r3, #4]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d003      	beq.n	80047d8 <USB_EPClearStall+0x4c>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	791b      	ldrb	r3, [r3, #4]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d138      	bne.n	800484a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e027      	b.n	800484a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004814:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004818:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	791b      	ldrb	r3, [r3, #4]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d003      	beq.n	800482a <USB_EPClearStall+0x9e>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	791b      	ldrb	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d10f      	bne.n	800484a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004848:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004876:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800487a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048d2:	f023 0302 	bic.w	r3, r3, #2
 80048d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004900:	f023 0303 	bic.w	r3, r3, #3
 8004904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4013      	ands	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004940:	68fb      	ldr	r3, [r7, #12]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	0c1b      	lsrs	r3, r3, #16
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	b29b      	uxth	r3, r3
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049e4:	68bb      	ldr	r3, [r7, #8]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	01db      	lsls	r3, r3, #7
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a40:	68bb      	ldr	r3, [r7, #8]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a88:	f023 0307 	bic.w	r3, r3, #7
 8004a8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	333c      	adds	r3, #60	@ 0x3c
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4a26      	ldr	r2, [pc, #152]	@ (8004b68 <USB_EP0_OutStart+0xb8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d90a      	bls.n	8004aea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ae4:	d101      	bne.n	8004aea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e037      	b.n	8004b5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b18:	f043 0318 	orr.w	r3, r3, #24
 8004b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004b30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d10f      	bne.n	8004b58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3e:	461a      	mov	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004b56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	4f54300a 	.word	0x4f54300a

08004b6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b84:	d901      	bls.n	8004b8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e01b      	b.n	8004bc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	daf2      	bge.n	8004b78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bae:	d901      	bls.n	8004bb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e006      	b.n	8004bc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d0f0      	beq.n	8004ba2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004bdc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004be0:	f002 fcdc 	bl	800759c <USBD_static_malloc>
 8004be4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	32b0      	adds	r2, #176	@ 0xb0
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e0d4      	b.n	8004daa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004c00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004c04:	2100      	movs	r1, #0
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f002 fd0c 	bl	8007624 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	32b0      	adds	r2, #176	@ 0xb0
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	32b0      	adds	r2, #176	@ 0xb0
 8004c26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	7c1b      	ldrb	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d138      	bne.n	8004caa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c38:	4b5e      	ldr	r3, [pc, #376]	@ (8004db4 <USBD_CDC_Init+0x1e4>)
 8004c3a:	7819      	ldrb	r1, [r3, #0]
 8004c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c40:	2202      	movs	r2, #2
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f002 fb39 	bl	80072ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c48:	4b5a      	ldr	r3, [pc, #360]	@ (8004db4 <USBD_CDC_Init+0x1e4>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f003 020f 	and.w	r2, r3, #15
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3324      	adds	r3, #36	@ 0x24
 8004c5e:	2201      	movs	r2, #1
 8004c60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c62:	4b55      	ldr	r3, [pc, #340]	@ (8004db8 <USBD_CDC_Init+0x1e8>)
 8004c64:	7819      	ldrb	r1, [r3, #0]
 8004c66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f002 fb24 	bl	80072ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c72:	4b51      	ldr	r3, [pc, #324]	@ (8004db8 <USBD_CDC_Init+0x1e8>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	f003 020f 	and.w	r2, r3, #15
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8004dbc <USBD_CDC_Init+0x1ec>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	f003 020f 	and.w	r2, r3, #15
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3326      	adds	r3, #38	@ 0x26
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	e035      	b.n	8004d16 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004caa:	4b42      	ldr	r3, [pc, #264]	@ (8004db4 <USBD_CDC_Init+0x1e4>)
 8004cac:	7819      	ldrb	r1, [r3, #0]
 8004cae:	2340      	movs	r3, #64	@ 0x40
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f002 fb01 	bl	80072ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <USBD_CDC_Init+0x1e4>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	f003 020f 	and.w	r2, r3, #15
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3324      	adds	r3, #36	@ 0x24
 8004cce:	2201      	movs	r2, #1
 8004cd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004cd2:	4b39      	ldr	r3, [pc, #228]	@ (8004db8 <USBD_CDC_Init+0x1e8>)
 8004cd4:	7819      	ldrb	r1, [r3, #0]
 8004cd6:	2340      	movs	r3, #64	@ 0x40
 8004cd8:	2202      	movs	r2, #2
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f002 faed 	bl	80072ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ce0:	4b35      	ldr	r3, [pc, #212]	@ (8004db8 <USBD_CDC_Init+0x1e8>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8004dbc <USBD_CDC_Init+0x1ec>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	f003 020f 	and.w	r2, r3, #15
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3326      	adds	r3, #38	@ 0x26
 8004d12:	2210      	movs	r2, #16
 8004d14:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d16:	4b29      	ldr	r3, [pc, #164]	@ (8004dbc <USBD_CDC_Init+0x1ec>)
 8004d18:	7819      	ldrb	r1, [r3, #0]
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f002 facb 	bl	80072ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004d24:	4b25      	ldr	r3, [pc, #148]	@ (8004dbc <USBD_CDC_Init+0x1ec>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f003 020f 	and.w	r2, r3, #15
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3324      	adds	r3, #36	@ 0x24
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	33b0      	adds	r3, #176	@ 0xb0
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d74:	2302      	movs	r3, #2
 8004d76:	e018      	b.n	8004daa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	7c1b      	ldrb	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d80:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <USBD_CDC_Init+0x1e8>)
 8004d82:	7819      	ldrb	r1, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f002 fb82 	bl	8007498 <USBD_LL_PrepareReceive>
 8004d94:	e008      	b.n	8004da8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d96:	4b08      	ldr	r3, [pc, #32]	@ (8004db8 <USBD_CDC_Init+0x1e8>)
 8004d98:	7819      	ldrb	r1, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004da0:	2340      	movs	r3, #64	@ 0x40
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f002 fb78 	bl	8007498 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000093 	.word	0x20000093
 8004db8:	20000094 	.word	0x20000094
 8004dbc:	20000095 	.word	0x20000095

08004dc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb8 <USBD_CDC_DeInit+0xf8>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f002 fa97 	bl	8007306 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004dd8:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <USBD_CDC_DeInit+0xf8>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f003 020f 	and.w	r2, r3, #15
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	3324      	adds	r3, #36	@ 0x24
 8004dee:	2200      	movs	r2, #0
 8004df0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004df2:	4b32      	ldr	r3, [pc, #200]	@ (8004ebc <USBD_CDC_DeInit+0xfc>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f002 fa84 	bl	8007306 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004ebc <USBD_CDC_DeInit+0xfc>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f003 020f 	and.w	r2, r3, #15
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e16:	2200      	movs	r2, #0
 8004e18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004e1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ec0 <USBD_CDC_DeInit+0x100>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f002 fa70 	bl	8007306 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004e26:	4b26      	ldr	r3, [pc, #152]	@ (8004ec0 <USBD_CDC_DeInit+0x100>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f003 020f 	and.w	r2, r3, #15
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	3324      	adds	r3, #36	@ 0x24
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004e40:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec0 <USBD_CDC_DeInit+0x100>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	3326      	adds	r3, #38	@ 0x26
 8004e56:	2200      	movs	r2, #0
 8004e58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	32b0      	adds	r2, #176	@ 0xb0
 8004e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01f      	beq.n	8004eac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	33b0      	adds	r3, #176	@ 0xb0
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	32b0      	adds	r2, #176	@ 0xb0
 8004e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f002 fb92 	bl	80075b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	32b0      	adds	r2, #176	@ 0xb0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000093 	.word	0x20000093
 8004ebc:	20000094 	.word	0x20000094
 8004ec0:	20000095 	.word	0x20000095

08004ec4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	32b0      	adds	r2, #176	@ 0xb0
 8004ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004edc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e0bf      	b.n	8005074 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d050      	beq.n	8004fa2 <USBD_CDC_Setup+0xde>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	f040 80af 	bne.w	8005064 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	88db      	ldrh	r3, [r3, #6]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d03a      	beq.n	8004f84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b25b      	sxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	da1b      	bge.n	8004f50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	33b0      	adds	r3, #176	@ 0xb0
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004f2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	88d2      	ldrh	r2, [r2, #6]
 8004f34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	88db      	ldrh	r3, [r3, #6]
 8004f3a:	2b07      	cmp	r3, #7
 8004f3c:	bf28      	it	cs
 8004f3e:	2307      	movcs	r3, #7
 8004f40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	89fa      	ldrh	r2, [r7, #14]
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 fd7d 	bl	8006a48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004f4e:	e090      	b.n	8005072 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	785a      	ldrb	r2, [r3, #1]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	88db      	ldrh	r3, [r3, #6]
 8004f5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f60:	d803      	bhi.n	8004f6a <USBD_CDC_Setup+0xa6>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	88db      	ldrh	r3, [r3, #6]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	e000      	b.n	8004f6c <USBD_CDC_Setup+0xa8>
 8004f6a:	2240      	movs	r2, #64	@ 0x40
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f72:	6939      	ldr	r1, [r7, #16]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fd8f 	bl	8006aa0 <USBD_CtlPrepareRx>
      break;
 8004f82:	e076      	b.n	8005072 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	33b0      	adds	r3, #176	@ 0xb0
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	7850      	ldrb	r0, [r2, #1]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	4798      	blx	r3
      break;
 8004fa0:	e067      	b.n	8005072 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	2b0b      	cmp	r3, #11
 8004fa8:	d851      	bhi.n	800504e <USBD_CDC_Setup+0x18a>
 8004faa:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb0 <USBD_CDC_Setup+0xec>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fe1 	.word	0x08004fe1
 8004fb4:	0800505d 	.word	0x0800505d
 8004fb8:	0800504f 	.word	0x0800504f
 8004fbc:	0800504f 	.word	0x0800504f
 8004fc0:	0800504f 	.word	0x0800504f
 8004fc4:	0800504f 	.word	0x0800504f
 8004fc8:	0800504f 	.word	0x0800504f
 8004fcc:	0800504f 	.word	0x0800504f
 8004fd0:	0800504f 	.word	0x0800504f
 8004fd4:	0800504f 	.word	0x0800504f
 8004fd8:	0800500b 	.word	0x0800500b
 8004fdc:	08005035 	.word	0x08005035
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d107      	bne.n	8004ffc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004fec:	f107 030a 	add.w	r3, r7, #10
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f001 fd27 	bl	8006a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ffa:	e032      	b.n	8005062 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 fca5 	bl	800694e <USBD_CtlError>
            ret = USBD_FAIL;
 8005004:	2303      	movs	r3, #3
 8005006:	75fb      	strb	r3, [r7, #23]
          break;
 8005008:	e02b      	b.n	8005062 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b03      	cmp	r3, #3
 8005014:	d107      	bne.n	8005026 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005016:	f107 030d 	add.w	r3, r7, #13
 800501a:	2201      	movs	r2, #1
 800501c:	4619      	mov	r1, r3
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f001 fd12 	bl	8006a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005024:	e01d      	b.n	8005062 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 fc90 	bl	800694e <USBD_CtlError>
            ret = USBD_FAIL;
 800502e:	2303      	movs	r3, #3
 8005030:	75fb      	strb	r3, [r7, #23]
          break;
 8005032:	e016      	b.n	8005062 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b03      	cmp	r3, #3
 800503e:	d00f      	beq.n	8005060 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 fc83 	bl	800694e <USBD_CtlError>
            ret = USBD_FAIL;
 8005048:	2303      	movs	r3, #3
 800504a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800504c:	e008      	b.n	8005060 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 fc7c 	bl	800694e <USBD_CtlError>
          ret = USBD_FAIL;
 8005056:	2303      	movs	r3, #3
 8005058:	75fb      	strb	r3, [r7, #23]
          break;
 800505a:	e002      	b.n	8005062 <USBD_CDC_Setup+0x19e>
          break;
 800505c:	bf00      	nop
 800505e:	e008      	b.n	8005072 <USBD_CDC_Setup+0x1ae>
          break;
 8005060:	bf00      	nop
      }
      break;
 8005062:	e006      	b.n	8005072 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 fc71 	bl	800694e <USBD_CtlError>
      ret = USBD_FAIL;
 800506c:	2303      	movs	r3, #3
 800506e:	75fb      	strb	r3, [r7, #23]
      break;
 8005070:	bf00      	nop
  }

  return (uint8_t)ret;
 8005072:	7dfb      	ldrb	r3, [r7, #23]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800508e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	32b0      	adds	r2, #176	@ 0xb0
 800509a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e065      	b.n	8005172 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	32b0      	adds	r2, #176	@ 0xb0
 80050b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3318      	adds	r3, #24
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d02f      	beq.n	8005130 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	f003 020f 	and.w	r2, r3, #15
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	3318      	adds	r3, #24
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	f003 010f 	and.w	r1, r3, #15
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	460b      	mov	r3, r1
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	440b      	add	r3, r1
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4403      	add	r3, r0
 80050f8:	331c      	adds	r3, #28
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005106:	2b00      	cmp	r3, #0
 8005108:	d112      	bne.n	8005130 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3318      	adds	r3, #24
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005122:	78f9      	ldrb	r1, [r7, #3]
 8005124:	2300      	movs	r3, #0
 8005126:	2200      	movs	r2, #0
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f002 f994 	bl	8007456 <USBD_LL_Transmit>
 800512e:	e01f      	b.n	8005170 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2200      	movs	r2, #0
 8005134:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	33b0      	adds	r3, #176	@ 0xb0
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d010      	beq.n	8005170 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	33b0      	adds	r3, #176	@ 0xb0
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800516c:	78fa      	ldrb	r2, [r7, #3]
 800516e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	460b      	mov	r3, r1
 8005184:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	32b0      	adds	r2, #176	@ 0xb0
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	32b0      	adds	r2, #176	@ 0xb0
 80051a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e01a      	b.n	80051e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f002 f992 	bl	80074da <USBD_LL_GetRxDataSize>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	33b0      	adds	r3, #176	@ 0xb0
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80051dc:	4611      	mov	r1, r2
 80051de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	32b0      	adds	r2, #176	@ 0xb0
 80051fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005200:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005208:	2303      	movs	r3, #3
 800520a:	e024      	b.n	8005256 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	33b0      	adds	r3, #176	@ 0xb0
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d019      	beq.n	8005254 <USBD_CDC_EP0_RxReady+0x6a>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005226:	2bff      	cmp	r3, #255	@ 0xff
 8005228:	d014      	beq.n	8005254 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	33b0      	adds	r3, #176	@ 0xb0
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005242:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800524a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	22ff      	movs	r2, #255	@ 0xff
 8005250:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005268:	2182      	movs	r1, #130	@ 0x82
 800526a:	4818      	ldr	r0, [pc, #96]	@ (80052cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800526c:	f000 fd0f 	bl	8005c8e <USBD_GetEpDesc>
 8005270:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005272:	2101      	movs	r1, #1
 8005274:	4815      	ldr	r0, [pc, #84]	@ (80052cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005276:	f000 fd0a 	bl	8005c8e <USBD_GetEpDesc>
 800527a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800527c:	2181      	movs	r1, #129	@ 0x81
 800527e:	4813      	ldr	r0, [pc, #76]	@ (80052cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005280:	f000 fd05 	bl	8005c8e <USBD_GetEpDesc>
 8005284:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2210      	movs	r2, #16
 8005290:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d006      	beq.n	80052a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2200      	movs	r2, #0
 800529c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052a0:	711a      	strb	r2, [r3, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d006      	beq.n	80052ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052b4:	711a      	strb	r2, [r3, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2243      	movs	r2, #67	@ 0x43
 80052be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052c0:	4b02      	ldr	r3, [pc, #8]	@ (80052cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000050 	.word	0x20000050

080052d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052d8:	2182      	movs	r1, #130	@ 0x82
 80052da:	4818      	ldr	r0, [pc, #96]	@ (800533c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052dc:	f000 fcd7 	bl	8005c8e <USBD_GetEpDesc>
 80052e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052e2:	2101      	movs	r1, #1
 80052e4:	4815      	ldr	r0, [pc, #84]	@ (800533c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052e6:	f000 fcd2 	bl	8005c8e <USBD_GetEpDesc>
 80052ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052ec:	2181      	movs	r1, #129	@ 0x81
 80052ee:	4813      	ldr	r0, [pc, #76]	@ (800533c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052f0:	f000 fccd 	bl	8005c8e <USBD_GetEpDesc>
 80052f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2210      	movs	r2, #16
 8005300:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d006      	beq.n	8005316 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	2200      	movs	r2, #0
 800530c:	711a      	strb	r2, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f042 0202 	orr.w	r2, r2, #2
 8005314:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d006      	beq.n	800532a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	711a      	strb	r2, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f042 0202 	orr.w	r2, r2, #2
 8005328:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2243      	movs	r2, #67	@ 0x43
 800532e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005330:	4b02      	ldr	r3, [pc, #8]	@ (800533c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000050 	.word	0x20000050

08005340 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005348:	2182      	movs	r1, #130	@ 0x82
 800534a:	4818      	ldr	r0, [pc, #96]	@ (80053ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800534c:	f000 fc9f 	bl	8005c8e <USBD_GetEpDesc>
 8005350:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005352:	2101      	movs	r1, #1
 8005354:	4815      	ldr	r0, [pc, #84]	@ (80053ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005356:	f000 fc9a 	bl	8005c8e <USBD_GetEpDesc>
 800535a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800535c:	2181      	movs	r1, #129	@ 0x81
 800535e:	4813      	ldr	r0, [pc, #76]	@ (80053ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005360:	f000 fc95 	bl	8005c8e <USBD_GetEpDesc>
 8005364:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2210      	movs	r2, #16
 8005370:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d006      	beq.n	8005386 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2200      	movs	r2, #0
 800537c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005380:	711a      	strb	r2, [r3, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d006      	beq.n	800539a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005394:	711a      	strb	r2, [r3, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2243      	movs	r2, #67	@ 0x43
 800539e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053a0:	4b02      	ldr	r3, [pc, #8]	@ (80053ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000050 	.word	0x20000050

080053b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	220a      	movs	r2, #10
 80053bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053be:	4b03      	ldr	r3, [pc, #12]	@ (80053cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e009      	b.n	80053f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	33b0      	adds	r3, #176	@ 0xb0
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	32b0      	adds	r2, #176	@ 0xb0
 800541a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005426:	2303      	movs	r3, #3
 8005428:	e008      	b.n	800543c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	32b0      	adds	r2, #176	@ 0xb0
 800545c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005460:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005468:	2303      	movs	r3, #3
 800546a:	e004      	b.n	8005476 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	32b0      	adds	r2, #176	@ 0xb0
 8005496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32b0      	adds	r2, #176	@ 0xb0
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e018      	b.n	80054e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	7c1b      	ldrb	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054ba:	4b0c      	ldr	r3, [pc, #48]	@ (80054ec <USBD_CDC_ReceivePacket+0x68>)
 80054bc:	7819      	ldrb	r1, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 ffe5 	bl	8007498 <USBD_LL_PrepareReceive>
 80054ce:	e008      	b.n	80054e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054d0:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <USBD_CDC_ReceivePacket+0x68>)
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054da:	2340      	movs	r3, #64	@ 0x40
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 ffdb 	bl	8007498 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000094 	.word	0x20000094

080054f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005504:	2303      	movs	r3, #3
 8005506:	e01f      	b.n	8005548 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	79fa      	ldrb	r2, [r7, #7]
 800553a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f001 fe55 	bl	80071ec <USBD_LL_Init>
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005546:	7dfb      	ldrb	r3, [r7, #23]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005564:	2303      	movs	r3, #3
 8005566:	e025      	b.n	80055b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	32ae      	adds	r2, #174	@ 0xae
 800557a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00f      	beq.n	80055a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	32ae      	adds	r2, #174	@ 0xae
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	f107 020e 	add.w	r2, r7, #14
 8005598:	4610      	mov	r0, r2
 800559a:	4798      	blx	r3
 800559c:	4602      	mov	r2, r0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 fe5d 	bl	8007284 <USBD_LL_Start>
 80055ca:	4603      	mov	r3, r0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	460b      	mov	r3, r1
 80055f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d009      	beq.n	8005618 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	4611      	mov	r1, r2
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	4611      	mov	r1, r2
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005648:	2303      	movs	r3, #3
 800564a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f001 f936 	bl	80068da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800567c:	461a      	mov	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2b02      	cmp	r3, #2
 8005690:	d01a      	beq.n	80056c8 <USBD_LL_SetupStage+0x72>
 8005692:	2b02      	cmp	r3, #2
 8005694:	d822      	bhi.n	80056dc <USBD_LL_SetupStage+0x86>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <USBD_LL_SetupStage+0x4a>
 800569a:	2b01      	cmp	r3, #1
 800569c:	d00a      	beq.n	80056b4 <USBD_LL_SetupStage+0x5e>
 800569e:	e01d      	b.n	80056dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fb63 	bl	8005d74 <USBD_StdDevReq>
 80056ae:	4603      	mov	r3, r0
 80056b0:	73fb      	strb	r3, [r7, #15]
      break;
 80056b2:	e020      	b.n	80056f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fbcb 	bl	8005e58 <USBD_StdItfReq>
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]
      break;
 80056c6:	e016      	b.n	80056f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fc2d 	bl	8005f30 <USBD_StdEPReq>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73fb      	strb	r3, [r7, #15]
      break;
 80056da:	e00c      	b.n	80056f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f001 fe2a 	bl	8007344 <USBD_LL_StallEP>
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
      break;
 80056f4:	bf00      	nop
  }

  return ret;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	460b      	mov	r3, r1
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d16e      	bne.n	80057f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800571e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005726:	2b03      	cmp	r3, #3
 8005728:	f040 8098 	bne.w	800585c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	429a      	cmp	r2, r3
 8005736:	d913      	bls.n	8005760 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	1ad2      	subs	r2, r2, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	4293      	cmp	r3, r2
 8005750:	bf28      	it	cs
 8005752:	4613      	movcs	r3, r2
 8005754:	461a      	mov	r2, r3
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f001 f9be 	bl	8006ada <USBD_CtlContinueRx>
 800575e:	e07d      	b.n	800585c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2b02      	cmp	r3, #2
 800576c:	d014      	beq.n	8005798 <USBD_LL_DataOutStage+0x98>
 800576e:	2b02      	cmp	r3, #2
 8005770:	d81d      	bhi.n	80057ae <USBD_LL_DataOutStage+0xae>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <USBD_LL_DataOutStage+0x7c>
 8005776:	2b01      	cmp	r3, #1
 8005778:	d003      	beq.n	8005782 <USBD_LL_DataOutStage+0x82>
 800577a:	e018      	b.n	80057ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	75bb      	strb	r3, [r7, #22]
            break;
 8005780:	e018      	b.n	80057b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005788:	b2db      	uxtb	r3, r3
 800578a:	4619      	mov	r1, r3
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fa64 	bl	8005c5a <USBD_CoreFindIF>
 8005792:	4603      	mov	r3, r0
 8005794:	75bb      	strb	r3, [r7, #22]
            break;
 8005796:	e00d      	b.n	80057b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	4619      	mov	r1, r3
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 fa66 	bl	8005c74 <USBD_CoreFindEP>
 80057a8:	4603      	mov	r3, r0
 80057aa:	75bb      	strb	r3, [r7, #22]
            break;
 80057ac:	e002      	b.n	80057b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	75bb      	strb	r3, [r7, #22]
            break;
 80057b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057b4:	7dbb      	ldrb	r3, [r7, #22]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d119      	bne.n	80057ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d113      	bne.n	80057ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057c6:	7dba      	ldrb	r2, [r7, #22]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	32ae      	adds	r2, #174	@ 0xae
 80057cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057d6:	7dba      	ldrb	r2, [r7, #22]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80057de:	7dba      	ldrb	r2, [r7, #22]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	32ae      	adds	r2, #174	@ 0xae
 80057e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f001 f984 	bl	8006afc <USBD_CtlSendStatus>
 80057f4:	e032      	b.n	800585c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80057f6:	7afb      	ldrb	r3, [r7, #11]
 80057f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	4619      	mov	r1, r3
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fa37 	bl	8005c74 <USBD_CoreFindEP>
 8005806:	4603      	mov	r3, r0
 8005808:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800580a:	7dbb      	ldrb	r3, [r7, #22]
 800580c:	2bff      	cmp	r3, #255	@ 0xff
 800580e:	d025      	beq.n	800585c <USBD_LL_DataOutStage+0x15c>
 8005810:	7dbb      	ldrb	r3, [r7, #22]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d122      	bne.n	800585c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b03      	cmp	r3, #3
 8005820:	d117      	bne.n	8005852 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005822:	7dba      	ldrb	r2, [r7, #22]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	32ae      	adds	r2, #174	@ 0xae
 8005828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00f      	beq.n	8005852 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005832:	7dba      	ldrb	r2, [r7, #22]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800583a:	7dba      	ldrb	r2, [r7, #22]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	32ae      	adds	r2, #174	@ 0xae
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	7afa      	ldrb	r2, [r7, #11]
 8005848:	4611      	mov	r1, r2
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	4798      	blx	r3
 800584e:	4603      	mov	r3, r0
 8005850:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	e000      	b.n	800585e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	460b      	mov	r3, r1
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005874:	7afb      	ldrb	r3, [r7, #11]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d16f      	bne.n	800595a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3314      	adds	r3, #20
 800587e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005886:	2b02      	cmp	r3, #2
 8005888:	d15a      	bne.n	8005940 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	429a      	cmp	r2, r3
 8005894:	d914      	bls.n	80058c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f001 f8e6 	bl	8006a7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058b2:	2300      	movs	r3, #0
 80058b4:	2200      	movs	r2, #0
 80058b6:	2100      	movs	r1, #0
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f001 fded 	bl	8007498 <USBD_LL_PrepareReceive>
 80058be:	e03f      	b.n	8005940 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d11c      	bne.n	8005906 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d316      	bcc.n	8005906 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d20f      	bcs.n	8005906 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058e6:	2200      	movs	r2, #0
 80058e8:	2100      	movs	r1, #0
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f001 f8c7 	bl	8006a7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058f8:	2300      	movs	r3, #0
 80058fa:	2200      	movs	r2, #0
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f001 fdca 	bl	8007498 <USBD_LL_PrepareReceive>
 8005904:	e01c      	b.n	8005940 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b03      	cmp	r3, #3
 8005910:	d10f      	bne.n	8005932 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005932:	2180      	movs	r1, #128	@ 0x80
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f001 fd05 	bl	8007344 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f001 f8f1 	bl	8006b22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d03a      	beq.n	80059c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7ff fe42 	bl	80055d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005958:	e032      	b.n	80059c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800595a:	7afb      	ldrb	r3, [r7, #11]
 800595c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005960:	b2db      	uxtb	r3, r3
 8005962:	4619      	mov	r1, r3
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f985 	bl	8005c74 <USBD_CoreFindEP>
 800596a:	4603      	mov	r3, r0
 800596c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2bff      	cmp	r3, #255	@ 0xff
 8005972:	d025      	beq.n	80059c0 <USBD_LL_DataInStage+0x15a>
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d122      	bne.n	80059c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b03      	cmp	r3, #3
 8005984:	d11c      	bne.n	80059c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005986:	7dfa      	ldrb	r2, [r7, #23]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	32ae      	adds	r2, #174	@ 0xae
 800598c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d014      	beq.n	80059c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005996:	7dfa      	ldrb	r2, [r7, #23]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800599e:	7dfa      	ldrb	r2, [r7, #23]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	32ae      	adds	r2, #174	@ 0xae
 80059a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	7afa      	ldrb	r2, [r7, #11]
 80059ac:	4611      	mov	r1, r2
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	4798      	blx	r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80059b6:	7dbb      	ldrb	r3, [r7, #22]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059bc:	7dbb      	ldrb	r3, [r7, #22]
 80059be:	e000      	b.n	80059c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d014      	beq.n	8005a30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00e      	beq.n	8005a30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6852      	ldr	r2, [r2, #4]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	4611      	mov	r1, r2
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	4798      	blx	r3
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a30:	2340      	movs	r3, #64	@ 0x40
 8005a32:	2200      	movs	r2, #0
 8005a34:	2100      	movs	r1, #0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 fc3f 	bl	80072ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2240      	movs	r2, #64	@ 0x40
 8005a48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a4c:	2340      	movs	r3, #64	@ 0x40
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2180      	movs	r1, #128	@ 0x80
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 fc31 	bl	80072ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2240      	movs	r2, #64	@ 0x40
 8005a62:	621a      	str	r2, [r3, #32]

  return ret;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d006      	beq.n	8005ab0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d106      	bne.n	8005ae8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d110      	bne.n	8005b2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00b      	beq.n	8005b2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	32ae      	adds	r2, #174	@ 0xae
 8005b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e01c      	b.n	8005b92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d115      	bne.n	8005b90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	32ae      	adds	r2, #174	@ 0xae
 8005b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	32ae      	adds	r2, #174	@ 0xae
 8005b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	78fa      	ldrb	r2, [r7, #3]
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	32ae      	adds	r2, #174	@ 0xae
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e01c      	b.n	8005bf6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d115      	bne.n	8005bf4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	32ae      	adds	r2, #174	@ 0xae
 8005bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	32ae      	adds	r2, #174	@ 0xae
 8005be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	78fa      	ldrb	r2, [r7, #3]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00e      	beq.n	8005c50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6852      	ldr	r2, [r2, #4]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	4611      	mov	r1, r2
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	885b      	ldrh	r3, [r3, #2]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d91f      	bls.n	8005cf4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005cba:	e013      	b.n	8005ce4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005cbc:	f107 030a 	add.w	r3, r7, #10
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6978      	ldr	r0, [r7, #20]
 8005cc4:	f000 f81b 	bl	8005cfe <USBD_GetNextDesc>
 8005cc8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d108      	bne.n	8005ce4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	789b      	ldrb	r3, [r3, #2]
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d008      	beq.n	8005cf2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	885b      	ldrh	r3, [r3, #2]
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	897b      	ldrh	r3, [r7, #10]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d8e5      	bhi.n	8005cbc <USBD_GetEpDesc+0x2e>
 8005cf0:	e000      	b.n	8005cf4 <USBD_GetEpDesc+0x66>
          break;
 8005cf2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005cf4:	693b      	ldr	r3, [r7, #16]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	7812      	ldrb	r2, [r2, #0]
 8005d14:	4413      	add	r3, r2
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d28:	68fb      	ldr	r3, [r7, #12]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b087      	sub	sp, #28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d54:	8a3b      	ldrh	r3, [r7, #16]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	b21a      	sxth	r2, r3
 8005d5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	b21b      	sxth	r3, r3
 8005d62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d64:	89fb      	ldrh	r3, [r7, #14]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d8a:	2b40      	cmp	r3, #64	@ 0x40
 8005d8c:	d005      	beq.n	8005d9a <USBD_StdDevReq+0x26>
 8005d8e:	2b40      	cmp	r3, #64	@ 0x40
 8005d90:	d857      	bhi.n	8005e42 <USBD_StdDevReq+0xce>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00f      	beq.n	8005db6 <USBD_StdDevReq+0x42>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d153      	bne.n	8005e42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	32ae      	adds	r2, #174	@ 0xae
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	4798      	blx	r3
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e04a      	b.n	8005e4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	2b09      	cmp	r3, #9
 8005dbc:	d83b      	bhi.n	8005e36 <USBD_StdDevReq+0xc2>
 8005dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <USBD_StdDevReq+0x50>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005e2d 	.word	0x08005e2d
 8005dcc:	08005e37 	.word	0x08005e37
 8005dd0:	08005e23 	.word	0x08005e23
 8005dd4:	08005e37 	.word	0x08005e37
 8005dd8:	08005df7 	.word	0x08005df7
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005e37 	.word	0x08005e37
 8005de4:	08005e0f 	.word	0x08005e0f
 8005de8:	08005e01 	.word	0x08005e01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa3c 	bl	800626c <USBD_GetDescriptor>
          break;
 8005df4:	e024      	b.n	8005e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fbcb 	bl	8006594 <USBD_SetAddress>
          break;
 8005dfe:	e01f      	b.n	8005e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fc0a 	bl	800661c <USBD_SetConfig>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
          break;
 8005e0c:	e018      	b.n	8005e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fcad 	bl	8006770 <USBD_GetConfig>
          break;
 8005e16:	e013      	b.n	8005e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fcde 	bl	80067dc <USBD_GetStatus>
          break;
 8005e20:	e00e      	b.n	8005e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fd0d 	bl	8006844 <USBD_SetFeature>
          break;
 8005e2a:	e009      	b.n	8005e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fd31 	bl	8006896 <USBD_ClrFeature>
          break;
 8005e34:	e004      	b.n	8005e40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fd88 	bl	800694e <USBD_CtlError>
          break;
 8005e3e:	bf00      	nop
      }
      break;
 8005e40:	e004      	b.n	8005e4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fd82 	bl	800694e <USBD_CtlError>
      break;
 8005e4a:	bf00      	nop
  }

  return ret;
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop

08005e58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d005      	beq.n	8005e7e <USBD_StdItfReq+0x26>
 8005e72:	2b40      	cmp	r3, #64	@ 0x40
 8005e74:	d852      	bhi.n	8005f1c <USBD_StdItfReq+0xc4>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <USBD_StdItfReq+0x26>
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d14e      	bne.n	8005f1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d840      	bhi.n	8005f0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	889b      	ldrh	r3, [r3, #4]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d836      	bhi.n	8005f04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	889b      	ldrh	r3, [r3, #4]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fedb 	bl	8005c5a <USBD_CoreFindIF>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	2bff      	cmp	r3, #255	@ 0xff
 8005eac:	d01d      	beq.n	8005eea <USBD_StdItfReq+0x92>
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11a      	bne.n	8005eea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005eb4:	7bba      	ldrb	r2, [r7, #14]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	32ae      	adds	r2, #174	@ 0xae
 8005eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00f      	beq.n	8005ee4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ec4:	7bba      	ldrb	r2, [r7, #14]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ecc:	7bba      	ldrb	r2, [r7, #14]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	32ae      	adds	r2, #174	@ 0xae
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4798      	blx	r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ee2:	e004      	b.n	8005eee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ee8:	e001      	b.n	8005eee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005eea:	2303      	movs	r3, #3
 8005eec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	88db      	ldrh	r3, [r3, #6]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d110      	bne.n	8005f18 <USBD_StdItfReq+0xc0>
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10d      	bne.n	8005f18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fdfd 	bl	8006afc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f02:	e009      	b.n	8005f18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fd21 	bl	800694e <USBD_CtlError>
          break;
 8005f0c:	e004      	b.n	8005f18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fd1c 	bl	800694e <USBD_CtlError>
          break;
 8005f16:	e000      	b.n	8005f1a <USBD_StdItfReq+0xc2>
          break;
 8005f18:	bf00      	nop
      }
      break;
 8005f1a:	e004      	b.n	8005f26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fd15 	bl	800694e <USBD_CtlError>
      break;
 8005f24:	bf00      	nop
  }

  return ret;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	889b      	ldrh	r3, [r3, #4]
 8005f42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f4c:	2b40      	cmp	r3, #64	@ 0x40
 8005f4e:	d007      	beq.n	8005f60 <USBD_StdEPReq+0x30>
 8005f50:	2b40      	cmp	r3, #64	@ 0x40
 8005f52:	f200 817f 	bhi.w	8006254 <USBD_StdEPReq+0x324>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02a      	beq.n	8005fb0 <USBD_StdEPReq+0x80>
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	f040 817a 	bne.w	8006254 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fe85 	bl	8005c74 <USBD_CoreFindEP>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f6e:	7b7b      	ldrb	r3, [r7, #13]
 8005f70:	2bff      	cmp	r3, #255	@ 0xff
 8005f72:	f000 8174 	beq.w	800625e <USBD_StdEPReq+0x32e>
 8005f76:	7b7b      	ldrb	r3, [r7, #13]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f040 8170 	bne.w	800625e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f7e:	7b7a      	ldrb	r2, [r7, #13]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f86:	7b7a      	ldrb	r2, [r7, #13]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	32ae      	adds	r2, #174	@ 0xae
 8005f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8163 	beq.w	800625e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f98:	7b7a      	ldrb	r2, [r7, #13]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	32ae      	adds	r2, #174	@ 0xae
 8005f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4798      	blx	r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fae:	e156      	b.n	800625e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d008      	beq.n	8005fca <USBD_StdEPReq+0x9a>
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	f300 8145 	bgt.w	8006248 <USBD_StdEPReq+0x318>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 809b 	beq.w	80060fa <USBD_StdEPReq+0x1ca>
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d03c      	beq.n	8006042 <USBD_StdEPReq+0x112>
 8005fc8:	e13e      	b.n	8006248 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d002      	beq.n	8005fdc <USBD_StdEPReq+0xac>
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d016      	beq.n	8006008 <USBD_StdEPReq+0xd8>
 8005fda:	e02c      	b.n	8006036 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00d      	beq.n	8005ffe <USBD_StdEPReq+0xce>
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	2b80      	cmp	r3, #128	@ 0x80
 8005fe6:	d00a      	beq.n	8005ffe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f9a9 	bl	8007344 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 f9a5 	bl	8007344 <USBD_LL_StallEP>
 8005ffa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ffc:	e020      	b.n	8006040 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fca4 	bl	800694e <USBD_CtlError>
              break;
 8006006:	e01b      	b.n	8006040 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	885b      	ldrh	r3, [r3, #2]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10e      	bne.n	800602e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <USBD_StdEPReq+0xfe>
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b80      	cmp	r3, #128	@ 0x80
 800601a:	d008      	beq.n	800602e <USBD_StdEPReq+0xfe>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	88db      	ldrh	r3, [r3, #6]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 f98b 	bl	8007344 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fd64 	bl	8006afc <USBD_CtlSendStatus>

              break;
 8006034:	e004      	b.n	8006040 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fc88 	bl	800694e <USBD_CtlError>
              break;
 800603e:	bf00      	nop
          }
          break;
 8006040:	e107      	b.n	8006252 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d002      	beq.n	8006054 <USBD_StdEPReq+0x124>
 800604e:	2b03      	cmp	r3, #3
 8006050:	d016      	beq.n	8006080 <USBD_StdEPReq+0x150>
 8006052:	e04b      	b.n	80060ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006054:	7bbb      	ldrb	r3, [r7, #14]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <USBD_StdEPReq+0x146>
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d00a      	beq.n	8006076 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 f96d 	bl	8007344 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800606a:	2180      	movs	r1, #128	@ 0x80
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 f969 	bl	8007344 <USBD_LL_StallEP>
 8006072:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006074:	e040      	b.n	80060f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fc68 	bl	800694e <USBD_CtlError>
              break;
 800607e:	e03b      	b.n	80060f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	885b      	ldrh	r3, [r3, #2]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d136      	bne.n	80060f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006088:	7bbb      	ldrb	r3, [r7, #14]
 800608a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006092:	7bbb      	ldrb	r3, [r7, #14]
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 f973 	bl	8007382 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fd2d 	bl	8006afc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fde4 	bl	8005c74 <USBD_CoreFindEP>
 80060ac:	4603      	mov	r3, r0
 80060ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060b0:	7b7b      	ldrb	r3, [r7, #13]
 80060b2:	2bff      	cmp	r3, #255	@ 0xff
 80060b4:	d01f      	beq.n	80060f6 <USBD_StdEPReq+0x1c6>
 80060b6:	7b7b      	ldrb	r3, [r7, #13]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d11c      	bne.n	80060f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80060bc:	7b7a      	ldrb	r2, [r7, #13]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060c4:	7b7a      	ldrb	r2, [r7, #13]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	32ae      	adds	r2, #174	@ 0xae
 80060ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d010      	beq.n	80060f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060d4:	7b7a      	ldrb	r2, [r7, #13]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	32ae      	adds	r2, #174	@ 0xae
 80060da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80060ea:	e004      	b.n	80060f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fc2d 	bl	800694e <USBD_CtlError>
              break;
 80060f4:	e000      	b.n	80060f8 <USBD_StdEPReq+0x1c8>
              break;
 80060f6:	bf00      	nop
          }
          break;
 80060f8:	e0ab      	b.n	8006252 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d002      	beq.n	800610c <USBD_StdEPReq+0x1dc>
 8006106:	2b03      	cmp	r3, #3
 8006108:	d032      	beq.n	8006170 <USBD_StdEPReq+0x240>
 800610a:	e097      	b.n	800623c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <USBD_StdEPReq+0x1f2>
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b80      	cmp	r3, #128	@ 0x80
 8006116:	d004      	beq.n	8006122 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fc17 	bl	800694e <USBD_CtlError>
                break;
 8006120:	e091      	b.n	8006246 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006122:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006126:	2b00      	cmp	r3, #0
 8006128:	da0b      	bge.n	8006142 <USBD_StdEPReq+0x212>
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	3310      	adds	r3, #16
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	3304      	adds	r3, #4
 8006140:	e00b      	b.n	800615a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	4413      	add	r3, r2
 8006158:	3304      	adds	r3, #4
 800615a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2202      	movs	r2, #2
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fc6d 	bl	8006a48 <USBD_CtlSendData>
              break;
 800616e:	e06a      	b.n	8006246 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006174:	2b00      	cmp	r3, #0
 8006176:	da11      	bge.n	800619c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	3324      	adds	r3, #36	@ 0x24
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d117      	bne.n	80061c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fbda 	bl	800694e <USBD_CtlError>
                  break;
 800619a:	e054      	b.n	8006246 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	f003 020f 	and.w	r2, r3, #15
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fbc7 	bl	800694e <USBD_CtlError>
                  break;
 80061c0:	e041      	b.n	8006246 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	da0b      	bge.n	80061e2 <USBD_StdEPReq+0x2b2>
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	3310      	adds	r3, #16
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	3304      	adds	r3, #4
 80061e0:	e00b      	b.n	80061fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	4413      	add	r3, r2
 80061f8:	3304      	adds	r3, #4
 80061fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <USBD_StdEPReq+0x2d8>
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	2b80      	cmp	r3, #128	@ 0x80
 8006206:	d103      	bne.n	8006210 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	e00e      	b.n	800622e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f8d3 	bl	80073c0 <USBD_LL_IsStallEP>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e002      	b.n	800622e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2202      	movs	r2, #2
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fc07 	bl	8006a48 <USBD_CtlSendData>
              break;
 800623a:	e004      	b.n	8006246 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fb85 	bl	800694e <USBD_CtlError>
              break;
 8006244:	bf00      	nop
          }
          break;
 8006246:	e004      	b.n	8006252 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fb7f 	bl	800694e <USBD_CtlError>
          break;
 8006250:	bf00      	nop
      }
      break;
 8006252:	e005      	b.n	8006260 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fb79 	bl	800694e <USBD_CtlError>
      break;
 800625c:	e000      	b.n	8006260 <USBD_StdEPReq+0x330>
      break;
 800625e:	bf00      	nop
  }

  return ret;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	885b      	ldrh	r3, [r3, #2]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	2b0e      	cmp	r3, #14
 800628e:	f200 8152 	bhi.w	8006536 <USBD_GetDescriptor+0x2ca>
 8006292:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <USBD_GetDescriptor+0x2c>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	08006309 	.word	0x08006309
 800629c:	08006321 	.word	0x08006321
 80062a0:	08006361 	.word	0x08006361
 80062a4:	08006537 	.word	0x08006537
 80062a8:	08006537 	.word	0x08006537
 80062ac:	080064d7 	.word	0x080064d7
 80062b0:	08006503 	.word	0x08006503
 80062b4:	08006537 	.word	0x08006537
 80062b8:	08006537 	.word	0x08006537
 80062bc:	08006537 	.word	0x08006537
 80062c0:	08006537 	.word	0x08006537
 80062c4:	08006537 	.word	0x08006537
 80062c8:	08006537 	.word	0x08006537
 80062cc:	08006537 	.word	0x08006537
 80062d0:	080062d5 	.word	0x080062d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	7c12      	ldrb	r2, [r2, #16]
 80062ec:	f107 0108 	add.w	r1, r7, #8
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062f6:	e126      	b.n	8006546 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fb27 	bl	800694e <USBD_CtlError>
        err++;
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	3301      	adds	r3, #1
 8006304:	72fb      	strb	r3, [r7, #11]
      break;
 8006306:	e11e      	b.n	8006546 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	7c12      	ldrb	r2, [r2, #16]
 8006314:	f107 0108 	add.w	r1, r7, #8
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	60f8      	str	r0, [r7, #12]
      break;
 800631e:	e112      	b.n	8006546 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7c1b      	ldrb	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10d      	bne.n	8006344 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	f107 0208 	add.w	r2, r7, #8
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
 8006338:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	2202      	movs	r2, #2
 8006340:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006342:	e100      	b.n	8006546 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634c:	f107 0208 	add.w	r2, r7, #8
 8006350:	4610      	mov	r0, r2
 8006352:	4798      	blx	r3
 8006354:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	2202      	movs	r2, #2
 800635c:	701a      	strb	r2, [r3, #0]
      break;
 800635e:	e0f2      	b.n	8006546 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	885b      	ldrh	r3, [r3, #2]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b05      	cmp	r3, #5
 8006368:	f200 80ac 	bhi.w	80064c4 <USBD_GetDescriptor+0x258>
 800636c:	a201      	add	r2, pc, #4	@ (adr r2, 8006374 <USBD_GetDescriptor+0x108>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	0800638d 	.word	0x0800638d
 8006378:	080063c1 	.word	0x080063c1
 800637c:	080063f5 	.word	0x080063f5
 8006380:	08006429 	.word	0x08006429
 8006384:	0800645d 	.word	0x0800645d
 8006388:	08006491 	.word	0x08006491
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	7c12      	ldrb	r2, [r2, #16]
 80063a4:	f107 0108 	add.w	r1, r7, #8
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
 80063ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ae:	e091      	b.n	80064d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 facb 	bl	800694e <USBD_CtlError>
            err++;
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	3301      	adds	r3, #1
 80063bc:	72fb      	strb	r3, [r7, #11]
          break;
 80063be:	e089      	b.n	80064d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	7c12      	ldrb	r2, [r2, #16]
 80063d8:	f107 0108 	add.w	r1, r7, #8
 80063dc:	4610      	mov	r0, r2
 80063de:	4798      	blx	r3
 80063e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063e2:	e077      	b.n	80064d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fab1 	bl	800694e <USBD_CtlError>
            err++;
 80063ec:	7afb      	ldrb	r3, [r7, #11]
 80063ee:	3301      	adds	r3, #1
 80063f0:	72fb      	strb	r3, [r7, #11]
          break;
 80063f2:	e06f      	b.n	80064d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	7c12      	ldrb	r2, [r2, #16]
 800640c:	f107 0108 	add.w	r1, r7, #8
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
 8006414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006416:	e05d      	b.n	80064d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fa97 	bl	800694e <USBD_CtlError>
            err++;
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	3301      	adds	r3, #1
 8006424:	72fb      	strb	r3, [r7, #11]
          break;
 8006426:	e055      	b.n	80064d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	7c12      	ldrb	r2, [r2, #16]
 8006440:	f107 0108 	add.w	r1, r7, #8
 8006444:	4610      	mov	r0, r2
 8006446:	4798      	blx	r3
 8006448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800644a:	e043      	b.n	80064d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa7d 	bl	800694e <USBD_CtlError>
            err++;
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	3301      	adds	r3, #1
 8006458:	72fb      	strb	r3, [r7, #11]
          break;
 800645a:	e03b      	b.n	80064d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	7c12      	ldrb	r2, [r2, #16]
 8006474:	f107 0108 	add.w	r1, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800647e:	e029      	b.n	80064d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa63 	bl	800694e <USBD_CtlError>
            err++;
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	3301      	adds	r3, #1
 800648c:	72fb      	strb	r3, [r7, #11]
          break;
 800648e:	e021      	b.n	80064d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	7c12      	ldrb	r2, [r2, #16]
 80064a8:	f107 0108 	add.w	r1, r7, #8
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064b2:	e00f      	b.n	80064d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa49 	bl	800694e <USBD_CtlError>
            err++;
 80064bc:	7afb      	ldrb	r3, [r7, #11]
 80064be:	3301      	adds	r3, #1
 80064c0:	72fb      	strb	r3, [r7, #11]
          break;
 80064c2:	e007      	b.n	80064d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa41 	bl	800694e <USBD_CtlError>
          err++;
 80064cc:	7afb      	ldrb	r3, [r7, #11]
 80064ce:	3301      	adds	r3, #1
 80064d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80064d2:	bf00      	nop
      }
      break;
 80064d4:	e037      	b.n	8006546 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	7c1b      	ldrb	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e6:	f107 0208 	add.w	r2, r7, #8
 80064ea:	4610      	mov	r0, r2
 80064ec:	4798      	blx	r3
 80064ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064f0:	e029      	b.n	8006546 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fa2a 	bl	800694e <USBD_CtlError>
        err++;
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	3301      	adds	r3, #1
 80064fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006500:	e021      	b.n	8006546 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	7c1b      	ldrb	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10d      	bne.n	8006526 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006512:	f107 0208 	add.w	r2, r7, #8
 8006516:	4610      	mov	r0, r2
 8006518:	4798      	blx	r3
 800651a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	2207      	movs	r2, #7
 8006522:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006524:	e00f      	b.n	8006546 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fa10 	bl	800694e <USBD_CtlError>
        err++;
 800652e:	7afb      	ldrb	r3, [r7, #11]
 8006530:	3301      	adds	r3, #1
 8006532:	72fb      	strb	r3, [r7, #11]
      break;
 8006534:	e007      	b.n	8006546 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fa08 	bl	800694e <USBD_CtlError>
      err++;
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	3301      	adds	r3, #1
 8006542:	72fb      	strb	r3, [r7, #11]
      break;
 8006544:	bf00      	nop
  }

  if (err != 0U)
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d11e      	bne.n	800658a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	88db      	ldrh	r3, [r3, #6]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d016      	beq.n	8006582 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006554:	893b      	ldrh	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	88da      	ldrh	r2, [r3, #6]
 800655e:	893b      	ldrh	r3, [r7, #8]
 8006560:	4293      	cmp	r3, r2
 8006562:	bf28      	it	cs
 8006564:	4613      	movcs	r3, r2
 8006566:	b29b      	uxth	r3, r3
 8006568:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800656a:	893b      	ldrh	r3, [r7, #8]
 800656c:	461a      	mov	r2, r3
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa69 	bl	8006a48 <USBD_CtlSendData>
 8006576:	e009      	b.n	800658c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f9e7 	bl	800694e <USBD_CtlError>
 8006580:	e004      	b.n	800658c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 faba 	bl	8006afc <USBD_CtlSendStatus>
 8006588:	e000      	b.n	800658c <USBD_GetDescriptor+0x320>
    return;
 800658a:	bf00      	nop
  }
}
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop

08006594 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	889b      	ldrh	r3, [r3, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d131      	bne.n	800660a <USBD_SetAddress+0x76>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	88db      	ldrh	r3, [r3, #6]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d12d      	bne.n	800660a <USBD_SetAddress+0x76>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	885b      	ldrh	r3, [r3, #2]
 80065b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80065b4:	d829      	bhi.n	800660a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	885b      	ldrh	r3, [r3, #2]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d104      	bne.n	80065d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f9bc 	bl	800694e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d6:	e01d      	b.n	8006614 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	7bfa      	ldrb	r2, [r7, #15]
 80065dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 ff17 	bl	8007418 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa86 	bl	8006afc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fe:	e009      	b.n	8006614 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006608:	e004      	b.n	8006614 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f99e 	bl	800694e <USBD_CtlError>
  }
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	885b      	ldrh	r3, [r3, #2]
 800662e:	b2da      	uxtb	r2, r3
 8006630:	4b4e      	ldr	r3, [pc, #312]	@ (800676c <USBD_SetConfig+0x150>)
 8006632:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006634:	4b4d      	ldr	r3, [pc, #308]	@ (800676c <USBD_SetConfig+0x150>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d905      	bls.n	8006648 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f985 	bl	800694e <USBD_CtlError>
    return USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	e08c      	b.n	8006762 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d002      	beq.n	800665a <USBD_SetConfig+0x3e>
 8006654:	2b03      	cmp	r3, #3
 8006656:	d029      	beq.n	80066ac <USBD_SetConfig+0x90>
 8006658:	e075      	b.n	8006746 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800665a:	4b44      	ldr	r3, [pc, #272]	@ (800676c <USBD_SetConfig+0x150>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d020      	beq.n	80066a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006662:	4b42      	ldr	r3, [pc, #264]	@ (800676c <USBD_SetConfig+0x150>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800666c:	4b3f      	ldr	r3, [pc, #252]	@ (800676c <USBD_SetConfig+0x150>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fe ffb9 	bl	80055ea <USBD_SetClassConfig>
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f962 	bl	800694e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006692:	e065      	b.n	8006760 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fa31 	bl	8006afc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2203      	movs	r2, #3
 800669e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80066a2:	e05d      	b.n	8006760 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fa29 	bl	8006afc <USBD_CtlSendStatus>
      break;
 80066aa:	e059      	b.n	8006760 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066ac:	4b2f      	ldr	r3, [pc, #188]	@ (800676c <USBD_SetConfig+0x150>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d112      	bne.n	80066da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80066bc:	4b2b      	ldr	r3, [pc, #172]	@ (800676c <USBD_SetConfig+0x150>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066c6:	4b29      	ldr	r3, [pc, #164]	@ (800676c <USBD_SetConfig+0x150>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fe ffa8 	bl	8005622 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa12 	bl	8006afc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066d8:	e042      	b.n	8006760 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066da:	4b24      	ldr	r3, [pc, #144]	@ (800676c <USBD_SetConfig+0x150>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d02a      	beq.n	800673e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fe ff96 	bl	8005622 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066f6:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <USBD_SetConfig+0x150>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006700:	4b1a      	ldr	r3, [pc, #104]	@ (800676c <USBD_SetConfig+0x150>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fe ff6f 	bl	80055ea <USBD_SetClassConfig>
 800670c:	4603      	mov	r3, r0
 800670e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00f      	beq.n	8006736 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f918 	bl	800694e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fe ff7b 	bl	8005622 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006734:	e014      	b.n	8006760 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f9e0 	bl	8006afc <USBD_CtlSendStatus>
      break;
 800673c:	e010      	b.n	8006760 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9dc 	bl	8006afc <USBD_CtlSendStatus>
      break;
 8006744:	e00c      	b.n	8006760 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f900 	bl	800694e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800674e:	4b07      	ldr	r3, [pc, #28]	@ (800676c <USBD_SetConfig+0x150>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fe ff64 	bl	8005622 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	73fb      	strb	r3, [r7, #15]
      break;
 800675e:	bf00      	nop
  }

  return ret;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000134 	.word	0x20000134

08006770 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	88db      	ldrh	r3, [r3, #6]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d004      	beq.n	800678c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f8e2 	bl	800694e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800678a:	e023      	b.n	80067d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	dc02      	bgt.n	800679e <USBD_GetConfig+0x2e>
 8006798:	2b00      	cmp	r3, #0
 800679a:	dc03      	bgt.n	80067a4 <USBD_GetConfig+0x34>
 800679c:	e015      	b.n	80067ca <USBD_GetConfig+0x5a>
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d00b      	beq.n	80067ba <USBD_GetConfig+0x4a>
 80067a2:	e012      	b.n	80067ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3308      	adds	r3, #8
 80067ae:	2201      	movs	r2, #1
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f948 	bl	8006a48 <USBD_CtlSendData>
        break;
 80067b8:	e00c      	b.n	80067d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	2201      	movs	r2, #1
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f940 	bl	8006a48 <USBD_CtlSendData>
        break;
 80067c8:	e004      	b.n	80067d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f8be 	bl	800694e <USBD_CtlError>
        break;
 80067d2:	bf00      	nop
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d81e      	bhi.n	8006832 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	88db      	ldrh	r3, [r3, #6]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d004      	beq.n	8006806 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f8a5 	bl	800694e <USBD_CtlError>
        break;
 8006804:	e01a      	b.n	800683c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f043 0202 	orr.w	r2, r3, #2
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	330c      	adds	r3, #12
 8006826:	2202      	movs	r2, #2
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f90c 	bl	8006a48 <USBD_CtlSendData>
      break;
 8006830:	e004      	b.n	800683c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f88a 	bl	800694e <USBD_CtlError>
      break;
 800683a:	bf00      	nop
  }
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d107      	bne.n	8006866 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f94c 	bl	8006afc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006864:	e013      	b.n	800688e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d10b      	bne.n	8006886 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	889b      	ldrh	r3, [r3, #4]
 8006872:	0a1b      	lsrs	r3, r3, #8
 8006874:	b29b      	uxth	r3, r3
 8006876:	b2da      	uxtb	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f93c 	bl	8006afc <USBD_CtlSendStatus>
}
 8006884:	e003      	b.n	800688e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f860 	bl	800694e <USBD_CtlError>
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d80b      	bhi.n	80068c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	885b      	ldrh	r3, [r3, #2]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d10c      	bne.n	80068d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f91c 	bl	8006afc <USBD_CtlSendStatus>
      }
      break;
 80068c4:	e004      	b.n	80068d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f840 	bl	800694e <USBD_CtlError>
      break;
 80068ce:	e000      	b.n	80068d2 <USBD_ClrFeature+0x3c>
      break;
 80068d0:	bf00      	nop
  }
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	781a      	ldrb	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	781a      	ldrb	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fa16 	bl	8005d36 <SWAPBYTE>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3301      	adds	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3301      	adds	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fa09 	bl	8005d36 <SWAPBYTE>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff f9fc 	bl	8005d36 <SWAPBYTE>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	80da      	strh	r2, [r3, #6]
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006958:	2180      	movs	r1, #128	@ 0x80
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fcf2 	bl	8007344 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006960:	2100      	movs	r1, #0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fcee 	bl	8007344 <USBD_LL_StallEP>
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d042      	beq.n	8006a0c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800698a:	6938      	ldr	r0, [r7, #16]
 800698c:	f000 f842 	bl	8006a14 <USBD_GetLen>
 8006990:	4603      	mov	r3, r0
 8006992:	3301      	adds	r3, #1
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800699a:	d808      	bhi.n	80069ae <USBD_GetString+0x3e>
 800699c:	6938      	ldr	r0, [r7, #16]
 800699e:	f000 f839 	bl	8006a14 <USBD_GetLen>
 80069a2:	4603      	mov	r3, r0
 80069a4:	3301      	adds	r3, #1
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	e001      	b.n	80069b2 <USBD_GetString+0x42>
 80069ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	4413      	add	r3, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	3301      	adds	r3, #1
 80069c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	4413      	add	r3, r2
 80069ce:	2203      	movs	r2, #3
 80069d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	3301      	adds	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80069d8:	e013      	b.n	8006a02 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	4413      	add	r3, r2
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	7812      	ldrb	r2, [r2, #0]
 80069e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3301      	adds	r3, #1
 80069ea:	613b      	str	r3, [r7, #16]
    idx++;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	3301      	adds	r3, #1
 80069f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	4413      	add	r3, r2
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	3301      	adds	r3, #1
 8006a00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e7      	bne.n	80069da <USBD_GetString+0x6a>
 8006a0a:	e000      	b.n	8006a0e <USBD_GetString+0x9e>
    return;
 8006a0c:	bf00      	nop
  }
}
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a24:	e005      	b.n	8006a32 <USBD_GetLen+0x1e>
  {
    len++;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f5      	bne.n	8006a26 <USBD_GetLen+0x12>
  }

  return len;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 fcf1 	bl	8007456 <USBD_LL_Transmit>

  return USBD_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 fce0 	bl	8007456 <USBD_LL_Transmit>

  return USBD_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	2100      	movs	r1, #0
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fce4 	bl	8007498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	2100      	movs	r1, #0
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fcd3 	bl	8007498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2204      	movs	r2, #4
 8006b08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2100      	movs	r1, #0
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fc9f 	bl	8007456 <USBD_LL_Transmit>

  return USBD_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b32:	2300      	movs	r3, #0
 8006b34:	2200      	movs	r2, #0
 8006b36:	2100      	movs	r1, #0
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fcad 	bl	8007498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4912      	ldr	r1, [pc, #72]	@ (8006b98 <MX_USB_DEVICE_Init+0x50>)
 8006b50:	4812      	ldr	r0, [pc, #72]	@ (8006b9c <MX_USB_DEVICE_Init+0x54>)
 8006b52:	f7fe fccd 	bl	80054f0 <USBD_Init>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b5c:	f7f9 fdfa 	bl	8000754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b60:	490f      	ldr	r1, [pc, #60]	@ (8006ba0 <MX_USB_DEVICE_Init+0x58>)
 8006b62:	480e      	ldr	r0, [pc, #56]	@ (8006b9c <MX_USB_DEVICE_Init+0x54>)
 8006b64:	f7fe fcf4 	bl	8005550 <USBD_RegisterClass>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b6e:	f7f9 fdf1 	bl	8000754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b72:	490c      	ldr	r1, [pc, #48]	@ (8006ba4 <MX_USB_DEVICE_Init+0x5c>)
 8006b74:	4809      	ldr	r0, [pc, #36]	@ (8006b9c <MX_USB_DEVICE_Init+0x54>)
 8006b76:	f7fe fc2b 	bl	80053d0 <USBD_CDC_RegisterInterface>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b80:	f7f9 fde8 	bl	8000754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b84:	4805      	ldr	r0, [pc, #20]	@ (8006b9c <MX_USB_DEVICE_Init+0x54>)
 8006b86:	f7fe fd19 	bl	80055bc <USBD_Start>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b90:	f7f9 fde0 	bl	8000754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	200000ac 	.word	0x200000ac
 8006b9c:	20000138 	.word	0x20000138
 8006ba0:	20000018 	.word	0x20000018
 8006ba4:	20000098 	.word	0x20000098

08006ba8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bac:	2200      	movs	r2, #0
 8006bae:	4905      	ldr	r1, [pc, #20]	@ (8006bc4 <CDC_Init_FS+0x1c>)
 8006bb0:	4805      	ldr	r0, [pc, #20]	@ (8006bc8 <CDC_Init_FS+0x20>)
 8006bb2:	f7fe fc27 	bl	8005404 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bb6:	4905      	ldr	r1, [pc, #20]	@ (8006bcc <CDC_Init_FS+0x24>)
 8006bb8:	4803      	ldr	r0, [pc, #12]	@ (8006bc8 <CDC_Init_FS+0x20>)
 8006bba:	f7fe fc45 	bl	8005448 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20000c14 	.word	0x20000c14
 8006bc8:	20000138 	.word	0x20000138
 8006bcc:	20000414 	.word	0x20000414

08006bd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	6039      	str	r1, [r7, #0]
 8006bea:	71fb      	strb	r3, [r7, #7]
 8006bec:	4613      	mov	r3, r2
 8006bee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	2b23      	cmp	r3, #35	@ 0x23
 8006bf4:	d84a      	bhi.n	8006c8c <CDC_Control_FS+0xac>
 8006bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bfc <CDC_Control_FS+0x1c>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c8d 	.word	0x08006c8d
 8006c00:	08006c8d 	.word	0x08006c8d
 8006c04:	08006c8d 	.word	0x08006c8d
 8006c08:	08006c8d 	.word	0x08006c8d
 8006c0c:	08006c8d 	.word	0x08006c8d
 8006c10:	08006c8d 	.word	0x08006c8d
 8006c14:	08006c8d 	.word	0x08006c8d
 8006c18:	08006c8d 	.word	0x08006c8d
 8006c1c:	08006c8d 	.word	0x08006c8d
 8006c20:	08006c8d 	.word	0x08006c8d
 8006c24:	08006c8d 	.word	0x08006c8d
 8006c28:	08006c8d 	.word	0x08006c8d
 8006c2c:	08006c8d 	.word	0x08006c8d
 8006c30:	08006c8d 	.word	0x08006c8d
 8006c34:	08006c8d 	.word	0x08006c8d
 8006c38:	08006c8d 	.word	0x08006c8d
 8006c3c:	08006c8d 	.word	0x08006c8d
 8006c40:	08006c8d 	.word	0x08006c8d
 8006c44:	08006c8d 	.word	0x08006c8d
 8006c48:	08006c8d 	.word	0x08006c8d
 8006c4c:	08006c8d 	.word	0x08006c8d
 8006c50:	08006c8d 	.word	0x08006c8d
 8006c54:	08006c8d 	.word	0x08006c8d
 8006c58:	08006c8d 	.word	0x08006c8d
 8006c5c:	08006c8d 	.word	0x08006c8d
 8006c60:	08006c8d 	.word	0x08006c8d
 8006c64:	08006c8d 	.word	0x08006c8d
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006c8d 	.word	0x08006c8d
 8006c70:	08006c8d 	.word	0x08006c8d
 8006c74:	08006c8d 	.word	0x08006c8d
 8006c78:	08006c8d 	.word	0x08006c8d
 8006c7c:	08006c8d 	.word	0x08006c8d
 8006c80:	08006c8d 	.word	0x08006c8d
 8006c84:	08006c8d 	.word	0x08006c8d
 8006c88:	08006c8d 	.word	0x08006c8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c8c:	bf00      	nop
  }

  return (USBD_OK);
 8006c8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  // Custom Handler for Dealing with this
  USB_CDC_RxHandler(Buf, Len);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7f9 fc67 	bl	800057c <USB_CDC_RxHandler>

  // Reset Buffer for further interrupts and reading
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4805      	ldr	r0, [pc, #20]	@ (8006cc8 <CDC_Receive_FS+0x2c>)
 8006cb2:	f7fe fbc9 	bl	8005448 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cb6:	4804      	ldr	r0, [pc, #16]	@ (8006cc8 <CDC_Receive_FS+0x2c>)
 8006cb8:	f7fe fbe4 	bl	8005484 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006cbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000138 	.word	0x20000138

08006ccc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	6039      	str	r1, [r7, #0]
 8006cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2212      	movs	r2, #18
 8006d00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d02:	4b03      	ldr	r3, [pc, #12]	@ (8006d10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	200000cc 	.word	0x200000cc

08006d14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2204      	movs	r2, #4
 8006d24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d26:	4b03      	ldr	r3, [pc, #12]	@ (8006d34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	200000ec 	.word	0x200000ec

08006d38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	6039      	str	r1, [r7, #0]
 8006d42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d105      	bne.n	8006d56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	4907      	ldr	r1, [pc, #28]	@ (8006d6c <USBD_FS_ProductStrDescriptor+0x34>)
 8006d4e:	4808      	ldr	r0, [pc, #32]	@ (8006d70 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d50:	f7ff fe0e 	bl	8006970 <USBD_GetString>
 8006d54:	e004      	b.n	8006d60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4904      	ldr	r1, [pc, #16]	@ (8006d6c <USBD_FS_ProductStrDescriptor+0x34>)
 8006d5a:	4805      	ldr	r0, [pc, #20]	@ (8006d70 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d5c:	f7ff fe08 	bl	8006970 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d60:	4b02      	ldr	r3, [pc, #8]	@ (8006d6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20001414 	.word	0x20001414
 8006d70:	08007694 	.word	0x08007694

08006d74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	4904      	ldr	r1, [pc, #16]	@ (8006d94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d84:	4804      	ldr	r0, [pc, #16]	@ (8006d98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d86:	f7ff fdf3 	bl	8006970 <USBD_GetString>
  return USBD_StrDesc;
 8006d8a:	4b02      	ldr	r3, [pc, #8]	@ (8006d94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20001414 	.word	0x20001414
 8006d98:	080076a8 	.word	0x080076a8

08006d9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	6039      	str	r1, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	221a      	movs	r2, #26
 8006dac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dae:	f000 f855 	bl	8006e5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006db2:	4b02      	ldr	r3, [pc, #8]	@ (8006dbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	200000f0 	.word	0x200000f0

08006dc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	6039      	str	r1, [r7, #0]
 8006dca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d105      	bne.n	8006dde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	4907      	ldr	r1, [pc, #28]	@ (8006df4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dd6:	4808      	ldr	r0, [pc, #32]	@ (8006df8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dd8:	f7ff fdca 	bl	8006970 <USBD_GetString>
 8006ddc:	e004      	b.n	8006de8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	4904      	ldr	r1, [pc, #16]	@ (8006df4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006de2:	4805      	ldr	r0, [pc, #20]	@ (8006df8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006de4:	f7ff fdc4 	bl	8006970 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006de8:	4b02      	ldr	r3, [pc, #8]	@ (8006df4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20001414 	.word	0x20001414
 8006df8:	080076bc 	.word	0x080076bc

08006dfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	6039      	str	r1, [r7, #0]
 8006e06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	4907      	ldr	r1, [pc, #28]	@ (8006e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e12:	4808      	ldr	r0, [pc, #32]	@ (8006e34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e14:	f7ff fdac 	bl	8006970 <USBD_GetString>
 8006e18:	e004      	b.n	8006e24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	4904      	ldr	r1, [pc, #16]	@ (8006e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e1e:	4805      	ldr	r0, [pc, #20]	@ (8006e34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e20:	f7ff fda6 	bl	8006970 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e24:	4b02      	ldr	r3, [pc, #8]	@ (8006e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20001414 	.word	0x20001414
 8006e34:	080076c8 	.word	0x080076c8

08006e38 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	6039      	str	r1, [r7, #0]
 8006e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	220c      	movs	r2, #12
 8006e48:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006e4a:	4b03      	ldr	r3, [pc, #12]	@ (8006e58 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	200000e0 	.word	0x200000e0

08006e5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e62:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <Get_SerialNum+0x44>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <Get_SerialNum+0x48>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea8 <Get_SerialNum+0x4c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e82:	2208      	movs	r2, #8
 8006e84:	4909      	ldr	r1, [pc, #36]	@ (8006eac <Get_SerialNum+0x50>)
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f814 	bl	8006eb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	4908      	ldr	r1, [pc, #32]	@ (8006eb0 <Get_SerialNum+0x54>)
 8006e90:	68b8      	ldr	r0, [r7, #8]
 8006e92:	f000 f80f 	bl	8006eb4 <IntToUnicode>
  }
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	1fff7a10 	.word	0x1fff7a10
 8006ea4:	1fff7a14 	.word	0x1fff7a14
 8006ea8:	1fff7a18 	.word	0x1fff7a18
 8006eac:	200000f2 	.word	0x200000f2
 8006eb0:	20000102 	.word	0x20000102

08006eb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]
 8006eca:	e027      	b.n	8006f1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	0f1b      	lsrs	r3, r3, #28
 8006ed0:	2b09      	cmp	r3, #9
 8006ed2:	d80b      	bhi.n	8006eec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	0f1b      	lsrs	r3, r3, #28
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	440b      	add	r3, r1
 8006ee4:	3230      	adds	r2, #48	@ 0x30
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	e00a      	b.n	8006f02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	0f1b      	lsrs	r3, r3, #28
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	440b      	add	r3, r1
 8006efc:	3237      	adds	r2, #55	@ 0x37
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	4413      	add	r3, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	75fb      	strb	r3, [r7, #23]
 8006f1c:	7dfa      	ldrb	r2, [r7, #23]
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d3d3      	bcc.n	8006ecc <IntToUnicode+0x18>
  }
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b0a0      	sub	sp, #128	@ 0x80
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	605a      	str	r2, [r3, #4]
 8006f46:	609a      	str	r2, [r3, #8]
 8006f48:	60da      	str	r2, [r3, #12]
 8006f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f4c:	f107 0310 	add.w	r3, r7, #16
 8006f50:	225c      	movs	r2, #92	@ 0x5c
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fb65 	bl	8007624 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f62:	d149      	bne.n	8006ff8 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006f64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f6e:	f107 0310 	add.w	r3, r7, #16
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fb fb78 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8006f7e:	f7f9 fbe9 	bl	8000754 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	4b1e      	ldr	r3, [pc, #120]	@ (8007000 <HAL_PCD_MspInit+0xcc>)
 8006f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8007000 <HAL_PCD_MspInit+0xcc>)
 8006f8c:	f043 0301 	orr.w	r3, r3, #1
 8006f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f92:	4b1b      	ldr	r3, [pc, #108]	@ (8007000 <HAL_PCD_MspInit+0xcc>)
 8006f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f9e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fac:	2303      	movs	r3, #3
 8006fae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fb0:	230a      	movs	r3, #10
 8006fb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fb4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4812      	ldr	r0, [pc, #72]	@ (8007004 <HAL_PCD_MspInit+0xd0>)
 8006fbc:	f7f9 fe16 	bl	8000bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007000 <HAL_PCD_MspInit+0xcc>)
 8006fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8007000 <HAL_PCD_MspInit+0xcc>)
 8006fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fca:	6353      	str	r3, [r2, #52]	@ 0x34
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <HAL_PCD_MspInit+0xcc>)
 8006fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007000 <HAL_PCD_MspInit+0xcc>)
 8006fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fda:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fdc:	4b08      	ldr	r3, [pc, #32]	@ (8007000 <HAL_PCD_MspInit+0xcc>)
 8006fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2100      	movs	r1, #0
 8006fec:	2043      	movs	r0, #67	@ 0x43
 8006fee:	f7f9 fdc6 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ff2:	2043      	movs	r0, #67	@ 0x43
 8006ff4:	f7f9 fddf 	bl	8000bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	3780      	adds	r7, #128	@ 0x80
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40023800 	.word	0x40023800
 8007004:	40020000 	.word	0x40020000

08007008 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f7fe fb19 	bl	8005656 <USBD_LL_SetupStage>
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	4619      	mov	r1, r3
 8007056:	f7fe fb53 	bl	8005700 <USBD_LL_DataOutStage>
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007074:	78fa      	ldrb	r2, [r7, #3]
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4613      	mov	r3, r2
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	3320      	adds	r3, #32
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	4619      	mov	r1, r3
 800708a:	f7fe fbec 	bl	8005866 <USBD_LL_DataInStage>
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fe fd26 	bl	8005af6 <USBD_LL_SOF>
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80070ba:	2301      	movs	r3, #1
 80070bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	79db      	ldrb	r3, [r3, #7]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
 80070ca:	e008      	b.n	80070de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	79db      	ldrb	r3, [r3, #7]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d102      	bne.n	80070da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80070d4:	2301      	movs	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
 80070d8:	e001      	b.n	80070de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80070da:	f7f9 fb3b 	bl	8000754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070e4:	7bfa      	ldrb	r2, [r7, #15]
 80070e6:	4611      	mov	r1, r2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fcc0 	bl	8005a6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fe fc68 	bl	80059ca <USBD_LL_Reset>
}
 80070fa:	bf00      	nop
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fcbb 	bl	8005a8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800712a:	f043 0301 	orr.w	r3, r3, #1
 800712e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7adb      	ldrb	r3, [r3, #11]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007138:	4b04      	ldr	r3, [pc, #16]	@ (800714c <HAL_PCD_SuspendCallback+0x48>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	4a03      	ldr	r2, [pc, #12]	@ (800714c <HAL_PCD_SuspendCallback+0x48>)
 800713e:	f043 0306 	orr.w	r3, r3, #6
 8007142:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	e000ed00 	.word	0xe000ed00

08007150 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe fcb1 	bl	8005ac6 <USBD_LL_Resume>
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fd09 	bl	8005b9a <USBD_LL_IsoOUTIncomplete>
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	4611      	mov	r1, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fcc5 	bl	8005b36 <USBD_LL_IsoINIncomplete>
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fd1b 	bl	8005bfe <USBD_LL_DevConnected>
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fd18 	bl	8005c14 <USBD_LL_DevDisconnected>
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d13c      	bne.n	8007276 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071fc:	4a20      	ldr	r2, [pc, #128]	@ (8007280 <USBD_LL_Init+0x94>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a1e      	ldr	r2, [pc, #120]	@ (8007280 <USBD_LL_Init+0x94>)
 8007208:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800720c:	4b1c      	ldr	r3, [pc, #112]	@ (8007280 <USBD_LL_Init+0x94>)
 800720e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007212:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007214:	4b1a      	ldr	r3, [pc, #104]	@ (8007280 <USBD_LL_Init+0x94>)
 8007216:	2206      	movs	r2, #6
 8007218:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800721a:	4b19      	ldr	r3, [pc, #100]	@ (8007280 <USBD_LL_Init+0x94>)
 800721c:	2202      	movs	r2, #2
 800721e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007220:	4b17      	ldr	r3, [pc, #92]	@ (8007280 <USBD_LL_Init+0x94>)
 8007222:	2200      	movs	r2, #0
 8007224:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007226:	4b16      	ldr	r3, [pc, #88]	@ (8007280 <USBD_LL_Init+0x94>)
 8007228:	2202      	movs	r2, #2
 800722a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800722c:	4b14      	ldr	r3, [pc, #80]	@ (8007280 <USBD_LL_Init+0x94>)
 800722e:	2200      	movs	r2, #0
 8007230:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007232:	4b13      	ldr	r3, [pc, #76]	@ (8007280 <USBD_LL_Init+0x94>)
 8007234:	2200      	movs	r2, #0
 8007236:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007238:	4b11      	ldr	r3, [pc, #68]	@ (8007280 <USBD_LL_Init+0x94>)
 800723a:	2200      	movs	r2, #0
 800723c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800723e:	4b10      	ldr	r3, [pc, #64]	@ (8007280 <USBD_LL_Init+0x94>)
 8007240:	2200      	movs	r2, #0
 8007242:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007244:	4b0e      	ldr	r3, [pc, #56]	@ (8007280 <USBD_LL_Init+0x94>)
 8007246:	2200      	movs	r2, #0
 8007248:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800724a:	480d      	ldr	r0, [pc, #52]	@ (8007280 <USBD_LL_Init+0x94>)
 800724c:	f7f9 fe7b 	bl	8000f46 <HAL_PCD_Init>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007256:	f7f9 fa7d 	bl	8000754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800725a:	2180      	movs	r1, #128	@ 0x80
 800725c:	4808      	ldr	r0, [pc, #32]	@ (8007280 <USBD_LL_Init+0x94>)
 800725e:	f7fb f8dc 	bl	800241a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007262:	2240      	movs	r2, #64	@ 0x40
 8007264:	2100      	movs	r1, #0
 8007266:	4806      	ldr	r0, [pc, #24]	@ (8007280 <USBD_LL_Init+0x94>)
 8007268:	f7fb f890 	bl	800238c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800726c:	2280      	movs	r2, #128	@ 0x80
 800726e:	2101      	movs	r1, #1
 8007270:	4803      	ldr	r0, [pc, #12]	@ (8007280 <USBD_LL_Init+0x94>)
 8007272:	f7fb f88b 	bl	800238c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20001614 	.word	0x20001614

08007284 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800729a:	4618      	mov	r0, r3
 800729c:	f7f9 ff69 	bl	8001172 <HAL_PCD_Start>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f990 	bl	80075cc <USBD_Get_USB_Status>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	461a      	mov	r2, r3
 80072c8:	4603      	mov	r3, r0
 80072ca:	70fb      	strb	r3, [r7, #3]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70bb      	strb	r3, [r7, #2]
 80072d0:	4613      	mov	r3, r2
 80072d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80072e2:	78bb      	ldrb	r3, [r7, #2]
 80072e4:	883a      	ldrh	r2, [r7, #0]
 80072e6:	78f9      	ldrb	r1, [r7, #3]
 80072e8:	f7fa fc6a 	bl	8001bc0 <HAL_PCD_EP_Open>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f96a 	bl	80075cc <USBD_Get_USB_Status>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f7fa fcb5 	bl	8001c94 <HAL_PCD_EP_Close>
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	4618      	mov	r0, r3
 8007332:	f000 f94b 	bl	80075cc <USBD_Get_USB_Status>
 8007336:	4603      	mov	r3, r0
 8007338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800733a:	7bbb      	ldrb	r3, [r7, #14]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800735e:	78fa      	ldrb	r2, [r7, #3]
 8007360:	4611      	mov	r1, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7fa fd6d 	bl	8001e42 <HAL_PCD_EP_SetStall>
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f92c 	bl	80075cc <USBD_Get_USB_Status>
 8007374:	4603      	mov	r3, r0
 8007376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007378:	7bbb      	ldrb	r3, [r7, #14]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fa fdb1 	bl	8001f08 <HAL_PCD_EP_ClrStall>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 f90d 	bl	80075cc <USBD_Get_USB_Status>
 80073b2:	4603      	mov	r3, r0
 80073b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da0b      	bge.n	80073f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073e2:	68f9      	ldr	r1, [r7, #12]
 80073e4:	4613      	mov	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	3316      	adds	r3, #22
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	e00b      	b.n	800740c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073fa:	68f9      	ldr	r1, [r7, #12]
 80073fc:	4613      	mov	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	440b      	add	r3, r1
 8007406:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800740a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f7fa fb9e 	bl	8001b78 <HAL_PCD_SetAddress>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f8c2 	bl	80075cc <USBD_Get_USB_Status>
 8007448:	4603      	mov	r3, r0
 800744a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800744c:	7bbb      	ldrb	r3, [r7, #14]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b086      	sub	sp, #24
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	460b      	mov	r3, r1
 8007464:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007474:	7af9      	ldrb	r1, [r7, #11]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	f7fa fca8 	bl	8001dce <HAL_PCD_EP_Transmit>
 800747e:	4603      	mov	r3, r0
 8007480:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 f8a1 	bl	80075cc <USBD_Get_USB_Status>
 800748a:	4603      	mov	r3, r0
 800748c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800748e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	607a      	str	r2, [r7, #4]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	460b      	mov	r3, r1
 80074a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074b6:	7af9      	ldrb	r1, [r7, #11]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	f7fa fc34 	bl	8001d28 <HAL_PCD_EP_Receive>
 80074c0:	4603      	mov	r3, r0
 80074c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 f880 	bl	80075cc <USBD_Get_USB_Status>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	4611      	mov	r1, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fa fc54 	bl	8001d9e <HAL_PCD_EP_GetRxCount>
 80074f6:	4603      	mov	r3, r0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_PCDEx_LPM_Callback+0x18>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d01f      	beq.n	8007556 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007516:	e03b      	b.n	8007590 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7adb      	ldrb	r3, [r3, #11]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007520:	f7f9 f85a 	bl	80005d8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007524:	4b1c      	ldr	r3, [pc, #112]	@ (8007598 <HAL_PCDEx_LPM_Callback+0x98>)
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	4a1b      	ldr	r2, [pc, #108]	@ (8007598 <HAL_PCDEx_LPM_Callback+0x98>)
 800752a:	f023 0306 	bic.w	r3, r3, #6
 800752e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007542:	f023 0301 	bic.w	r3, r3, #1
 8007546:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fab9 	bl	8005ac6 <USBD_LL_Resume>
    break;
 8007554:	e01c      	b.n	8007590 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007568:	f043 0301 	orr.w	r3, r3, #1
 800756c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fa8a 	bl	8005a8e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7adb      	ldrb	r3, [r3, #11]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007582:	4b05      	ldr	r3, [pc, #20]	@ (8007598 <HAL_PCDEx_LPM_Callback+0x98>)
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	4a04      	ldr	r2, [pc, #16]	@ (8007598 <HAL_PCDEx_LPM_Callback+0x98>)
 8007588:	f043 0306 	orr.w	r3, r3, #6
 800758c:	6113      	str	r3, [r2, #16]
    break;
 800758e:	bf00      	nop
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed00 	.word	0xe000ed00

0800759c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075a4:	4b03      	ldr	r3, [pc, #12]	@ (80075b4 <USBD_static_malloc+0x18>)
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20001af8 	.word	0x20001af8

080075b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d817      	bhi.n	8007610 <USBD_Get_USB_Status+0x44>
 80075e0:	a201      	add	r2, pc, #4	@ (adr r2, 80075e8 <USBD_Get_USB_Status+0x1c>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	080075ff 	.word	0x080075ff
 80075f0:	08007605 	.word	0x08007605
 80075f4:	0800760b 	.word	0x0800760b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
    break;
 80075fc:	e00b      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075fe:	2303      	movs	r3, #3
 8007600:	73fb      	strb	r3, [r7, #15]
    break;
 8007602:	e008      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
    break;
 8007608:	e005      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800760a:	2303      	movs	r3, #3
 800760c:	73fb      	strb	r3, [r7, #15]
    break;
 800760e:	e002      	b.n	8007616 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	73fb      	strb	r3, [r7, #15]
    break;
 8007614:	bf00      	nop
  }
  return usb_status;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <memset>:
 8007624:	4402      	add	r2, r0
 8007626:	4603      	mov	r3, r0
 8007628:	4293      	cmp	r3, r2
 800762a:	d100      	bne.n	800762e <memset+0xa>
 800762c:	4770      	bx	lr
 800762e:	f803 1b01 	strb.w	r1, [r3], #1
 8007632:	e7f9      	b.n	8007628 <memset+0x4>

08007634 <__libc_init_array>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	4d0d      	ldr	r5, [pc, #52]	@ (800766c <__libc_init_array+0x38>)
 8007638:	4c0d      	ldr	r4, [pc, #52]	@ (8007670 <__libc_init_array+0x3c>)
 800763a:	1b64      	subs	r4, r4, r5
 800763c:	10a4      	asrs	r4, r4, #2
 800763e:	2600      	movs	r6, #0
 8007640:	42a6      	cmp	r6, r4
 8007642:	d109      	bne.n	8007658 <__libc_init_array+0x24>
 8007644:	4d0b      	ldr	r5, [pc, #44]	@ (8007674 <__libc_init_array+0x40>)
 8007646:	4c0c      	ldr	r4, [pc, #48]	@ (8007678 <__libc_init_array+0x44>)
 8007648:	f000 f818 	bl	800767c <_init>
 800764c:	1b64      	subs	r4, r4, r5
 800764e:	10a4      	asrs	r4, r4, #2
 8007650:	2600      	movs	r6, #0
 8007652:	42a6      	cmp	r6, r4
 8007654:	d105      	bne.n	8007662 <__libc_init_array+0x2e>
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	f855 3b04 	ldr.w	r3, [r5], #4
 800765c:	4798      	blx	r3
 800765e:	3601      	adds	r6, #1
 8007660:	e7ee      	b.n	8007640 <__libc_init_array+0xc>
 8007662:	f855 3b04 	ldr.w	r3, [r5], #4
 8007666:	4798      	blx	r3
 8007668:	3601      	adds	r6, #1
 800766a:	e7f2      	b.n	8007652 <__libc_init_array+0x1e>
 800766c:	080076f0 	.word	0x080076f0
 8007670:	080076f0 	.word	0x080076f0
 8007674:	080076f0 	.word	0x080076f0
 8007678:	080076f4 	.word	0x080076f4

0800767c <_init>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr

08007688 <_fini>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr
