
STM32_MyndSearch_PWM_Gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800776c  0800776c  0000876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c0  080077c0  0000910c  2**0
                  CONTENTS
  4 .ARM          00000008  080077c0  080077c0  000087c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c8  080077c8  0000910c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c8  080077c8  000087c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077cc  080077cc  000087cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  080077d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  2000010c  080078dc  0000910c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d10  080078dc  00009d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5ac  00000000  00000000  0000913c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1b  00000000  00000000  000176e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0001a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d7  00000000  00000000  0001af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023581  00000000  00000000  0001b7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b25  00000000  00000000  0003ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9ba3  00000000  00000000  0004f87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119420  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f94  00000000  00000000  00119464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0011c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007754 	.word	0x08007754

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08007754 	.word	0x08007754

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Flash_LED>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void Flash_LED(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin (GPIOB, LED1_Pin);
 80004f8:	2101      	movs	r1, #1
 80004fa:	4809      	ldr	r0, [pc, #36]	@ (8000520 <Flash_LED+0x2c>)
 80004fc:	f000 fd0f 	bl	8000f1e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOB, LED2_Pin);
 8000500:	2180      	movs	r1, #128	@ 0x80
 8000502:	4807      	ldr	r0, [pc, #28]	@ (8000520 <Flash_LED+0x2c>)
 8000504:	f000 fd0b 	bl	8000f1e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOB, LED3_Pin);
 8000508:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800050c:	4804      	ldr	r0, [pc, #16]	@ (8000520 <Flash_LED+0x2c>)
 800050e:	f000 fd06 	bl	8000f1e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000512:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000516:	f000 fa1f 	bl	8000958 <HAL_Delay>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400

08000524 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
	if(*Buf == 0) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d104      	bne.n	8000540 <USB_CDC_RxHandler+0x1c>
		HAL_GPIO_TogglePin (GPIOB, LED1_Pin);
 8000536:	2101      	movs	r1, #1
 8000538:	4815      	ldr	r0, [pc, #84]	@ (8000590 <USB_CDC_RxHandler+0x6c>)
 800053a:	f000 fcf0 	bl	8000f1e <HAL_GPIO_TogglePin>
 800053e:	e01f      	b.n	8000580 <USB_CDC_RxHandler+0x5c>
	}
	else if(*Buf == 1) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d104      	bne.n	8000552 <USB_CDC_RxHandler+0x2e>
		HAL_GPIO_TogglePin (GPIOB, LED2_Pin);
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	4811      	ldr	r0, [pc, #68]	@ (8000590 <USB_CDC_RxHandler+0x6c>)
 800054c:	f000 fce7 	bl	8000f1e <HAL_GPIO_TogglePin>
 8000550:	e016      	b.n	8000580 <USB_CDC_RxHandler+0x5c>
	}
	else if(*Buf == 2) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d105      	bne.n	8000566 <USB_CDC_RxHandler+0x42>
		HAL_GPIO_TogglePin (GPIOB, LED3_Pin);
 800055a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800055e:	480c      	ldr	r0, [pc, #48]	@ (8000590 <USB_CDC_RxHandler+0x6c>)
 8000560:	f000 fcdd 	bl	8000f1e <HAL_GPIO_TogglePin>
 8000564:	e00c      	b.n	8000580 <USB_CDC_RxHandler+0x5c>
	}
	else {
		HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8000566:	2101      	movs	r1, #1
 8000568:	4809      	ldr	r0, [pc, #36]	@ (8000590 <USB_CDC_RxHandler+0x6c>)
 800056a:	f000 fcd8 	bl	8000f1e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 800056e:	2180      	movs	r1, #128	@ 0x80
 8000570:	4807      	ldr	r0, [pc, #28]	@ (8000590 <USB_CDC_RxHandler+0x6c>)
 8000572:	f000 fcd4 	bl	8000f1e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000576:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <USB_CDC_RxHandler+0x6c>)
 800057c:	f000 fccf 	bl	8000f1e <HAL_GPIO_TogglePin>
	}
    CDC_Transmit_FS(Buf, Len);
 8000580:	6839      	ldr	r1, [r7, #0]
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f006 fbe8 	bl	8006d58 <CDC_Transmit_FS>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020400 	.word	0x40020400

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 f96c 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f808 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f872 	bl	8000688 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005a4:	f006 fb16 	bl	8006bd4 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Basic LED Blink Test to make sure that your MCU can be programmed
	  Flash_LED();
 80005a8:	f7ff ffa4 	bl	80004f4 <Flash_LED>
 80005ac:	e7fc      	b.n	80005a8 <main+0x14>
	...

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2234      	movs	r2, #52	@ 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 f89c 	bl	80076fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <SystemClock_Config+0xd0>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a28      	ldr	r2, [pc, #160]	@ (8000680 <SystemClock_Config+0xd0>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <SystemClock_Config+0xd0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b23      	ldr	r3, [pc, #140]	@ (8000684 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005fc:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <SystemClock_Config+0xd4>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <SystemClock_Config+0xd4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000624:	2305      	movs	r3, #5
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000628:	2348      	movs	r3, #72	@ 0x48
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000630:	2303      	movs	r3, #3
 8000632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fced 	bl	800301c <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000648:	f000 f870 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 ff12 	bl	8002490 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000672:	f000 f85b 	bl	800072c <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	@ 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a11      	ldr	r2, [pc, #68]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_GPIO_Init+0x9c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006f8:	480b      	ldr	r0, [pc, #44]	@ (8000728 <MX_GPIO_Init+0xa0>)
 80006fa:	f000 fbf7 	bl	8000eec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 80006fe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4619      	mov	r1, r3
 8000716:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_GPIO_Init+0xa0>)
 8000718:	f000 fa54 	bl	8000bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40020400 	.word	0x40020400

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074c:	6453      	str	r3, [r2, #68]	@ 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <NMI_Handler+0x4>

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <UsageFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 f89b 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <OTG_FS_IRQHandler+0x10>)
 80007ee:	f000 fcfb 	bl	80011e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000160c 	.word	0x2000160c

080007fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	@ (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000820:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000858 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000824:	f7ff ffea 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	@ (8000860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	@ (8000864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	@ (800086c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800084e:	f006 ff5d 	bl	800770c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000852:	f7ff fe9f 	bl	8000594 <main>
  bx  lr    
 8000856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000864:	080077d0 	.word	0x080077d0
  ldr r2, =_sbss
 8000868:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800086c:	20001d10 	.word	0x20001d10

08000870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_Init+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0d      	ldr	r2, [pc, #52]	@ (80008b4 <HAL_Init+0x40>)
 800087e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_Init+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <HAL_Init+0x40>)
 800088a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800088e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <HAL_Init+0x40>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	@ (80008b4 <HAL_Init+0x40>)
 8000896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800089a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f94f 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff ff46 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023c00 	.word	0x40023c00

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f967 	bl	8000baa <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f92f 	bl	8000b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	@ (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_IncTick+0x20>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HAL_IncTick+0x24>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_IncTick+0x24>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008
 800093c:	20000128 	.word	0x20000128

08000940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <HAL_GetTick+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000128 	.word	0x20000128

08000958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000960:	f7ff ffee 	bl	8000940 <HAL_GetTick>
 8000964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000970:	d005      	beq.n	800097e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <HAL_Delay+0x44>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800097e:	bf00      	nop
 8000980:	f7ff ffde 	bl	8000940 <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d8f7      	bhi.n	8000980 <HAL_Delay+0x28>
  {
  }
}
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008

080009a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	db0b      	blt.n	8000a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 021f 	and.w	r2, r3, #31
 8000a1c:	4907      	ldr	r1, [pc, #28]	@ (8000a3c <__NVIC_EnableIRQ+0x38>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	2001      	movs	r0, #1
 8000a26:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	@ 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	@ 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f7ff ff8e 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff29 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff3e 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff8e 	bl	8000a94 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff31 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffa2 	bl	8000afc <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	@ 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	e165      	b.n	8000eac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be0:	2201      	movs	r2, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	f040 8154 	bne.w	8000ea6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d005      	beq.n	8000c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d130      	bne.n	8000c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	091b      	lsrs	r3, r3, #4
 8000c62:	f003 0201 	and.w	r2, r3, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d017      	beq.n	8000cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d123      	bne.n	8000d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	08da      	lsrs	r2, r3, #3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3208      	adds	r2, #8
 8000d02:	69b9      	ldr	r1, [r7, #24]
 8000d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0203 	and.w	r2, r3, #3
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80ae 	beq.w	8000ea6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec4 <HAL_GPIO_Init+0x300>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	4a5c      	ldr	r2, [pc, #368]	@ (8000ec4 <HAL_GPIO_Init+0x300>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec4 <HAL_GPIO_Init+0x300>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d66:	4a58      	ldr	r2, [pc, #352]	@ (8000ec8 <HAL_GPIO_Init+0x304>)
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000ecc <HAL_GPIO_Init+0x308>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d025      	beq.n	8000dde <HAL_GPIO_Init+0x21a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4e      	ldr	r2, [pc, #312]	@ (8000ed0 <HAL_GPIO_Init+0x30c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01f      	beq.n	8000dda <HAL_GPIO_Init+0x216>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4d      	ldr	r2, [pc, #308]	@ (8000ed4 <HAL_GPIO_Init+0x310>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x212>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4c      	ldr	r2, [pc, #304]	@ (8000ed8 <HAL_GPIO_Init+0x314>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x20e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4b      	ldr	r2, [pc, #300]	@ (8000edc <HAL_GPIO_Init+0x318>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x20a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4a      	ldr	r2, [pc, #296]	@ (8000ee0 <HAL_GPIO_Init+0x31c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x206>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a49      	ldr	r2, [pc, #292]	@ (8000ee4 <HAL_GPIO_Init+0x320>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x202>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e00c      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e00a      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dca:	2305      	movs	r3, #5
 8000dcc:	e008      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e004      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dde:	2300      	movs	r3, #0
 8000de0:	69fa      	ldr	r2, [r7, #28]
 8000de2:	f002 0203 	and.w	r2, r2, #3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4093      	lsls	r3, r2
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df0:	4935      	ldr	r1, [pc, #212]	@ (8000ec8 <HAL_GPIO_Init+0x304>)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e22:	4a31      	ldr	r2, [pc, #196]	@ (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e4c:	4a26      	ldr	r2, [pc, #152]	@ (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e52:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea0:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <HAL_GPIO_Init+0x324>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	f67f ae96 	bls.w	8000be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3724      	adds	r7, #36	@ 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40021400 	.word	0x40021400
 8000ee4:	40021800 	.word	0x40021800
 8000ee8:	40013c00 	.word	0x40013c00

08000eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000efc:	787b      	ldrb	r3, [r7, #1]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f08:	e003      	b.n	8000f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	041a      	lsls	r2, r3, #16
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	619a      	str	r2, [r3, #24]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f30:	887a      	ldrh	r2, [r7, #2]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4013      	ands	r3, r2
 8000f36:	041a      	lsls	r2, r3, #16
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	400b      	ands	r3, r1
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	619a      	str	r2, [r3, #24]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af02      	add	r7, sp, #8
 8000f58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e108      	b.n	8001176 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f006 f844 	bl	800700c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2203      	movs	r2, #3
 8000f88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f92:	d102      	bne.n	8000f9a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fbf1 	bl	8003786 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7c1a      	ldrb	r2, [r3, #16]
 8000fac:	f88d 2000 	strb.w	r2, [sp]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb4:	f002 fad0 	bl	8003558 <USB_CoreInit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e0d5      	b.n	8001176 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fbe9 	bl	80037a8 <USB_SetCurrentMode>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e0c6      	b.n	8001176 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e04a      	b.n	8001084 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3315      	adds	r3, #21
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	3314      	adds	r3, #20
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	b298      	uxth	r0, r3
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	332e      	adds	r3, #46	@ 0x2e
 800102a:	4602      	mov	r2, r0
 800102c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	3318      	adds	r3, #24
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	331c      	adds	r3, #28
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	3320      	adds	r3, #32
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	3324      	adds	r3, #36	@ 0x24
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	3301      	adds	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3af      	bcc.n	8000fee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e044      	b.n	800111e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3b5      	bcc.n	8001094 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7c1a      	ldrb	r2, [r3, #16]
 8001130:	f88d 2000 	strb.w	r2, [sp]
 8001134:	3304      	adds	r3, #4
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	f002 fb82 	bl	8003840 <USB_DevInit>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e013      	b.n	8001176 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7b1b      	ldrb	r3, [r3, #12]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f001 f96f 	bl	8002448 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fbbf 	bl	80048f2 <USB_DevDisconnect>

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_PCD_Start+0x1c>
 8001196:	2302      	movs	r3, #2
 8001198:	e022      	b.n	80011e0 <HAL_PCD_Start+0x62>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d105      	bne.n	80011c2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 facc 	bl	8003764 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fb6d 	bl	80048b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b08d      	sub	sp, #52	@ 0x34
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fc2b 	bl	8004a5a <USB_GetMode>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 84b9 	bne.w	8001b7e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fb8f 	bl	8004934 <USB_ReadInterrupts>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 84af 	beq.w	8001b7c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f003 fb7c 	bl	8004934 <USB_ReadInterrupts>
 800123c:	4603      	mov	r3, r0
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b02      	cmp	r3, #2
 8001244:	d107      	bne.n	8001256 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	695a      	ldr	r2, [r3, #20]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f002 0202 	and.w	r2, r2, #2
 8001254:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fb6a 	bl	8004934 <USB_ReadInterrupts>
 8001260:	4603      	mov	r3, r0
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b10      	cmp	r3, #16
 8001268:	d161      	bne.n	800132e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699a      	ldr	r2, [r3, #24]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0210 	bic.w	r2, r2, #16
 8001278:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	f003 020f 	and.w	r2, r3, #15
 8001286:	4613      	mov	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	3304      	adds	r3, #4
 8001298:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	0c5b      	lsrs	r3, r3, #17
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d124      	bne.n	80012f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d035      	beq.n	800131e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	6a38      	ldr	r0, [r7, #32]
 80012c6:	f003 f9a1 	bl	800460c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d6:	441a      	add	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e8:	441a      	add	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	e016      	b.n	800131e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	0c5b      	lsrs	r3, r3, #17
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	2b06      	cmp	r3, #6
 80012fa:	d110      	bne.n	800131e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001302:	2208      	movs	r2, #8
 8001304:	4619      	mov	r1, r3
 8001306:	6a38      	ldr	r0, [r7, #32]
 8001308:	f003 f980 	bl	800460c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001318:	441a      	add	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0210 	orr.w	r2, r2, #16
 800132c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fafe 	bl	8004934 <USB_ReadInterrupts>
 8001338:	4603      	mov	r3, r0
 800133a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800133e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001342:	f040 80a7 	bne.w	8001494 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fb03 	bl	800495a <USB_ReadDevAllOutEpInterrupt>
 8001354:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001356:	e099      	b.n	800148c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 808e 	beq.w	8001480 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fb27 	bl	80049c2 <USB_ReadDevOutEPInterrupt>
 8001374:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00c      	beq.n	800139a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	015a      	lsls	r2, r3, #5
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	4413      	add	r3, r2
 8001388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800138c:	461a      	mov	r2, r3
 800138e:	2301      	movs	r3, #1
 8001390:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001392:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fed1 	bl	800213c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00c      	beq.n	80013be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	015a      	lsls	r2, r3, #5
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013b0:	461a      	mov	r2, r3
 80013b2:	2308      	movs	r3, #8
 80013b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 ffa7 	bl	800230c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ca:	015a      	lsls	r2, r3, #5
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013d4:	461a      	mov	r2, r3
 80013d6:	2310      	movs	r3, #16
 80013d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d030      	beq.n	8001446 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ec:	2b80      	cmp	r3, #128	@ 0x80
 80013ee:	d109      	bne.n	8001404 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001402:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	3304      	adds	r3, #4
 8001418:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	78db      	ldrb	r3, [r3, #3]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d108      	bne.n	8001434 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2200      	movs	r2, #0
 8001426:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4619      	mov	r1, r3
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f005 ff08 	bl	8007244 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001440:	461a      	mov	r2, r3
 8001442:	2302      	movs	r3, #2
 8001444:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	015a      	lsls	r2, r3, #5
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800145c:	461a      	mov	r2, r3
 800145e:	2320      	movs	r3, #32
 8001460:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d009      	beq.n	8001480 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001478:	461a      	mov	r2, r3
 800147a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	3301      	adds	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800148c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148e:	2b00      	cmp	r3, #0
 8001490:	f47f af62 	bne.w	8001358 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f003 fa4b 	bl	8004934 <USB_ReadInterrupts>
 800149e:	4603      	mov	r3, r0
 80014a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014a8:	f040 80db 	bne.w	8001662 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 fa6c 	bl	800498e <USB_ReadDevAllInEpInterrupt>
 80014b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014bc:	e0cd      	b.n	800165a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80c2 	beq.w	800164e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fa92 	bl	80049fe <USB_ReadDevInEPInterrupt>
 80014da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d057      	beq.n	8001596 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	2201      	movs	r2, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69f9      	ldr	r1, [r7, #28]
 8001502:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001506:	4013      	ands	r3, r2
 8001508:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001516:	461a      	mov	r2, r3
 8001518:	2301      	movs	r3, #1
 800151a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	799b      	ldrb	r3, [r3, #6]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d132      	bne.n	800158a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3320      	adds	r3, #32
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4403      	add	r3, r0
 8001544:	331c      	adds	r3, #28
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4419      	add	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4403      	add	r3, r0
 8001558:	3320      	adds	r3, #32
 800155a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	2b00      	cmp	r3, #0
 8001560:	d113      	bne.n	800158a <HAL_PCD_IRQHandler+0x3a2>
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3324      	adds	r3, #36	@ 0x24
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d108      	bne.n	800158a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001582:	461a      	mov	r2, r3
 8001584:	2101      	movs	r1, #1
 8001586:	f003 fa99 	bl	8004abc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	b2db      	uxtb	r3, r3
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f005 fdd2 	bl	800713a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ac:	461a      	mov	r2, r3
 80015ae:	2308      	movs	r3, #8
 80015b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015c8:	461a      	mov	r2, r3
 80015ca:	2310      	movs	r3, #16
 80015cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	015a      	lsls	r2, r3, #5
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e4:	461a      	mov	r2, r3
 80015e6:	2340      	movs	r3, #64	@ 0x40
 80015e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d023      	beq.n	800163c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015f6:	6a38      	ldr	r0, [r7, #32]
 80015f8:	f002 fa80 	bl	8003afc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3310      	adds	r3, #16
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	3304      	adds	r3, #4
 800160e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	78db      	ldrb	r3, [r3, #3]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2200      	movs	r2, #0
 800161c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f005 fe1f 	bl	8007268 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001636:	461a      	mov	r2, r3
 8001638:	2302      	movs	r3, #2
 800163a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001646:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fcea 	bl	8002022 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	3301      	adds	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800165a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f af2e 	bne.w	80014be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f003 f964 	bl	8004934 <USB_ReadInterrupts>
 800166c:	4603      	mov	r3, r0
 800166e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001676:	d122      	bne.n	80016be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800169e:	2100      	movs	r1, #0
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f005 ff99 	bl	80075d8 <HAL_PCDEx_LPM_Callback>
 80016a6:	e002      	b.n	80016ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f005 fdbd 	bl	8007228 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 f936 	bl	8004934 <USB_ReadInterrupts>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016d2:	d112      	bne.n	80016fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d102      	bne.n	80016ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f005 fd79 	bl	80071dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80016f8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 f918 	bl	8004934 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800170a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800170e:	d121      	bne.n	8001754 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800171e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001726:	2b00      	cmp	r3, #0
 8001728:	d111      	bne.n	800174e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	f003 020f 	and.w	r2, r3, #15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001744:	2101      	movs	r1, #1
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f005 ff46 	bl	80075d8 <HAL_PCDEx_LPM_Callback>
 800174c:	e002      	b.n	8001754 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f005 fd44 	bl	80071dc <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f8eb 	bl	8004934 <USB_ReadInterrupts>
 800175e:	4603      	mov	r3, r0
 8001760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001768:	f040 80b7 	bne.w	80018da <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2110      	movs	r1, #16
 8001786:	4618      	mov	r0, r3
 8001788:	f002 f9b8 	bl	8003afc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001790:	e046      	b.n	8001820 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800179e:	461a      	mov	r2, r3
 80017a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017b6:	0151      	lsls	r1, r2, #5
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	440a      	add	r2, r1
 80017bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017d2:	461a      	mov	r2, r3
 80017d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ea:	0151      	lsls	r1, r2, #5
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	440a      	add	r2, r1
 80017f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800180a:	0151      	lsls	r1, r2, #5
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	440a      	add	r2, r1
 8001810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001814:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001818:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181c:	3301      	adds	r3, #1
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	461a      	mov	r2, r3
 8001826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001828:	4293      	cmp	r3, r2
 800182a:	d3b2      	bcc.n	8001792 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800183a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800183e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7bdb      	ldrb	r3, [r3, #15]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d016      	beq.n	8001876 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001858:	f043 030b 	orr.w	r3, r3, #11
 800185c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800186e:	f043 030b 	orr.w	r3, r3, #11
 8001872:	6453      	str	r3, [r2, #68]	@ 0x44
 8001874:	e015      	b.n	80018a2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001884:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001888:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800188c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800189c:	f043 030b 	orr.w	r3, r3, #11
 80018a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018c4:	461a      	mov	r2, r3
 80018c6:	f003 f8f9 	bl	8004abc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80018d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 f828 	bl	8004934 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018ee:	d123      	bne.n	8001938 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 f8be 	bl	8004a76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 f975 	bl	8003bee <USB_GetDevSpeed>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681c      	ldr	r4, [r3, #0]
 8001910:	f000 fea4 	bl	800265c <HAL_RCC_GetHCLKFreq>
 8001914:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800191a:	461a      	mov	r2, r3
 800191c:	4620      	mov	r0, r4
 800191e:	f001 fe7f 	bl	8003620 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f005 fc31 	bl	800718a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001936:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fff9 	bl	8004934 <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b08      	cmp	r3, #8
 800194a:	d10a      	bne.n	8001962 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f005 fc0e 	bl	800716e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f002 0208 	and.w	r2, r2, #8
 8001960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 ffe4 	bl	8004934 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001972:	2b80      	cmp	r3, #128	@ 0x80
 8001974:	d123      	bne.n	80019be <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001982:	2301      	movs	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
 8001986:	e014      	b.n	80019b2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4619      	mov	r1, r3
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fb0a 	bl	8001fc0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	3301      	adds	r3, #1
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	461a      	mov	r2, r3
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d3e4      	bcc.n	8001988 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 ffb6 	bl	8004934 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019d2:	d13c      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d4:	2301      	movs	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d8:	e02b      	b.n	8001a32 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	015a      	lsls	r2, r3, #5
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	3318      	adds	r3, #24
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d115      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	da12      	bge.n	8001a2c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3317      	adds	r3, #23
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 faca 	bl	8001fc0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	3301      	adds	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	791b      	ldrb	r3, [r3, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d3cd      	bcc.n	80019da <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 ff6e 	bl	8004934 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a62:	d156      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a68:	e045      	b.n	8001af6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	015a      	lsls	r2, r3, #5
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d12e      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	da2b      	bge.n	8001af0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001aa4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d121      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10a      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ae8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aec:	6053      	str	r3, [r2, #4]
            break;
 8001aee:	e008      	b.n	8001b02 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	3301      	adds	r3, #1
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	791b      	ldrb	r3, [r3, #4]
 8001afa:	461a      	mov	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d3b3      	bcc.n	8001a6a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 ff0c 	bl	8004934 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b26:	d10a      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f005 fbaf 	bl	800728c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fef6 	bl	8004934 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d115      	bne.n	8001b7e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f005 fb9f 	bl	80072a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	e000      	b.n	8001b7e <HAL_PCD_IRQHandler+0x996>
      return;
 8001b7c:	bf00      	nop
    }
  }
}
 8001b7e:	3734      	adds	r7, #52	@ 0x34
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_PCD_SetAddress+0x1a>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e012      	b.n	8001bc4 <HAL_PCD_SetAddress+0x40>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fe55 	bl	8004864 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	70fb      	strb	r3, [r7, #3]
 8001bde:	460b      	mov	r3, r1
 8001be0:	803b      	strh	r3, [r7, #0]
 8001be2:	4613      	mov	r3, r2
 8001be4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da0f      	bge.n	8001c12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	f003 020f 	and.w	r2, r3, #15
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3310      	adds	r3, #16
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	3304      	adds	r3, #4
 8001c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	705a      	strb	r2, [r3, #1]
 8001c10:	e00f      	b.n	8001c32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 020f 	and.w	r2, r3, #15
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c3e:	883b      	ldrh	r3, [r7, #0]
 8001c40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	78ba      	ldrb	r2, [r7, #2]
 8001c4c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c60:	78bb      	ldrb	r3, [r7, #2]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d102      	bne.n	8001c6c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_PCD_EP_Open+0xae>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e00e      	b.n	8001c98 <HAL_PCD_EP_Open+0xcc>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68f9      	ldr	r1, [r7, #12]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 ffd5 	bl	8003c38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c96:	7afb      	ldrb	r3, [r7, #11]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da0f      	bge.n	8001cd4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	3310      	adds	r3, #16
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	705a      	strb	r2, [r3, #1]
 8001cd2:	e00f      	b.n	8001cf4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	f003 020f 	and.w	r2, r3, #15
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	3304      	adds	r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_PCD_EP_Close+0x6e>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e00e      	b.n	8001d2c <HAL_PCD_EP_Close+0x8c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68f9      	ldr	r1, [r7, #12]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 f813 	bl	8003d48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	460b      	mov	r3, r1
 8001d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2200      	movs	r2, #0
 8001d74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d76:	7afb      	ldrb	r3, [r7, #11]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	799b      	ldrb	r3, [r3, #6]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	799b      	ldrb	r3, [r3, #6]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	6979      	ldr	r1, [r7, #20]
 8001d9c:	f002 f8b0 	bl	8003f00 <USB_EPStartXfer>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001dcc:	681b      	ldr	r3, [r3, #0]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	460b      	mov	r3, r1
 8001de8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	3310      	adds	r3, #16
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2201      	movs	r2, #1
 8001e18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	799b      	ldrb	r3, [r3, #6]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d102      	bne.n	8001e34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	799b      	ldrb	r3, [r3, #6]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6979      	ldr	r1, [r7, #20]
 8001e40:	f002 f85e 	bl	8003f00 <USB_EPStartXfer>

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	7912      	ldrb	r2, [r2, #4]
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e04f      	b.n	8001f0c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da0f      	bge.n	8001e94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	f003 020f 	and.w	r2, r3, #15
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	3310      	adds	r3, #16
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	705a      	strb	r2, [r3, #1]
 8001e92:	e00d      	b.n	8001eb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_PCD_EP_SetStall+0x82>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e01d      	b.n	8001f0c <HAL_PCD_EP_SetStall+0xbe>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68f9      	ldr	r1, [r7, #12]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fbec 	bl	80046bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7999      	ldrb	r1, [r3, #6]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001efc:	461a      	mov	r2, r3
 8001efe:	f002 fddd 	bl	8004abc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	7912      	ldrb	r2, [r2, #4]
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e042      	b.n	8001fb8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	da0f      	bge.n	8001f5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 020f 	and.w	r2, r3, #15
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	3310      	adds	r3, #16
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3304      	adds	r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	705a      	strb	r2, [r3, #1]
 8001f58:	e00f      	b.n	8001f7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 020f 	and.w	r2, r3, #15
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	3304      	adds	r3, #4
 8001f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_PCD_EP_ClrStall+0x86>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e00e      	b.n	8001fb8 <HAL_PCD_EP_ClrStall+0xa4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68f9      	ldr	r1, [r7, #12]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fbf5 	bl	8004798 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da0c      	bge.n	8001fee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 020f 	and.w	r2, r3, #15
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	3310      	adds	r3, #16
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e00c      	b.n	8002008 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68f9      	ldr	r1, [r7, #12]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fa14 	bl	800443c <USB_EPStopXfer>
 8002014:	4603      	mov	r3, r0
 8002016:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002018:	7afb      	ldrb	r3, [r7, #11]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b08a      	sub	sp, #40	@ 0x28
 8002026:	af02      	add	r7, sp, #8
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3310      	adds	r3, #16
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	429a      	cmp	r2, r3
 8002054:	d901      	bls.n	800205a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e06b      	b.n	8002132 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	d902      	bls.n	8002076 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3303      	adds	r3, #3
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800207e:	e02a      	b.n	80020d6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	429a      	cmp	r2, r3
 8002094:	d902      	bls.n	800209c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3303      	adds	r3, #3
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68d9      	ldr	r1, [r3, #12]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4603      	mov	r3, r0
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f002 fa69 	bl	8004590 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	441a      	add	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	441a      	add	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d809      	bhi.n	8002100 <PCD_WriteEmptyTxFifo+0xde>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d203      	bcs.n	8002100 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1bf      	bne.n	8002080 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	d811      	bhi.n	8002130 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	2201      	movs	r2, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	43db      	mvns	r3, r3
 8002126:	6939      	ldr	r1, [r7, #16]
 8002128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800212c:	4013      	ands	r3, r2
 800212e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	333c      	adds	r3, #60	@ 0x3c
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	799b      	ldrb	r3, [r3, #6]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d17b      	bne.n	800226a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4a61      	ldr	r2, [pc, #388]	@ (8002304 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	f240 80b9 	bls.w	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80b3 	beq.w	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800219e:	461a      	mov	r2, r3
 80021a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021a4:	6093      	str	r3, [r2, #8]
 80021a6:	e0a7      	b.n	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021be:	461a      	mov	r2, r3
 80021c0:	2320      	movs	r3, #32
 80021c2:	6093      	str	r3, [r2, #8]
 80021c4:	e098      	b.n	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 8093 	bne.w	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002304 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d90f      	bls.n	80021fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	015a      	lsls	r2, r3, #5
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	4413      	add	r3, r2
 80021ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f0:	461a      	mov	r2, r3
 80021f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021f6:	6093      	str	r3, [r2, #8]
 80021f8:	e07e      	b.n	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	0159      	lsls	r1, r3, #5
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	440b      	add	r3, r1
 800221c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	1ad2      	subs	r2, r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d114      	bne.n	800225c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002244:	461a      	mov	r2, r3
 8002246:	2101      	movs	r1, #1
 8002248:	f002 fc38 	bl	8004abc <USB_EP0_OutStart>
 800224c:	e006      	b.n	800225c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	441a      	add	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f004 ff4e 	bl	8007104 <HAL_PCD_DataOutStageCallback>
 8002268:	e046      	b.n	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4a26      	ldr	r2, [pc, #152]	@ (8002308 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d124      	bne.n	80022bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002288:	461a      	mov	r2, r3
 800228a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800228e:	6093      	str	r3, [r2, #8]
 8002290:	e032      	b.n	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a8:	461a      	mov	r2, r3
 80022aa:	2320      	movs	r3, #32
 80022ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f004 ff25 	bl	8007104 <HAL_PCD_DataOutStageCallback>
 80022ba:	e01d      	b.n	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d114      	bne.n	80022ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d108      	bne.n	80022ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022e4:	461a      	mov	r2, r3
 80022e6:	2100      	movs	r1, #0
 80022e8:	f002 fbe8 	bl	8004abc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f004 ff06 	bl	8007104 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	4f54300a 	.word	0x4f54300a
 8002308:	4f54310a 	.word	0x4f54310a

0800230c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	333c      	adds	r3, #60	@ 0x3c
 8002324:	3304      	adds	r3, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a15      	ldr	r2, [pc, #84]	@ (8002394 <PCD_EP_OutSetupPacket_int+0x88>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d90e      	bls.n	8002360 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002358:	461a      	mov	r2, r3
 800235a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800235e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f004 febd 	bl	80070e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <PCD_EP_OutSetupPacket_int+0x88>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d90c      	bls.n	8002388 <PCD_EP_OutSetupPacket_int+0x7c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	799b      	ldrb	r3, [r3, #6]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d108      	bne.n	8002388 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002380:	461a      	mov	r2, r3
 8002382:	2101      	movs	r1, #1
 8002384:	f002 fb9a 	bl	8004abc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	4f54300a 	.word	0x4f54300a

08002398 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
 80023a4:	4613      	mov	r3, r2
 80023a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023b6:	883b      	ldrh	r3, [r7, #0]
 80023b8:	0419      	lsls	r1, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80023c4:	e028      	b.n	8002418 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	4413      	add	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e00d      	b.n	80023f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	3340      	adds	r3, #64	@ 0x40
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	3301      	adds	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3ec      	bcc.n	80023da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002400:	883b      	ldrh	r3, [r7, #0]
 8002402:	0418      	lsls	r0, r3, #16
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	3b01      	subs	r3, #1
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	4302      	orrs	r2, r0
 8002410:	3340      	adds	r3, #64	@ 0x40
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247a:	f043 0303 	orr.w	r3, r3, #3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0cc      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b68      	ldr	r3, [pc, #416]	@ (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d90c      	bls.n	80024cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b65      	ldr	r3, [pc, #404]	@ (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b63      	ldr	r3, [pc, #396]	@ (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b8      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e4:	4b59      	ldr	r3, [pc, #356]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a58      	ldr	r2, [pc, #352]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fc:	4b53      	ldr	r3, [pc, #332]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a52      	ldr	r2, [pc, #328]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b50      	ldr	r3, [pc, #320]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	494d      	ldr	r1, [pc, #308]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d044      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b47      	ldr	r3, [pc, #284]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d119      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d003      	beq.n	800254e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	2b03      	cmp	r3, #3
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b3f      	ldr	r3, [pc, #252]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b3b      	ldr	r3, [pc, #236]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e067      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b37      	ldr	r3, [pc, #220]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4934      	ldr	r1, [pc, #208]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7fe f9de 	bl	8000940 <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe f9da 	bl	8000940 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e04f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2b      	ldr	r3, [pc, #172]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d20c      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e032      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4916      	ldr	r1, [pc, #88]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002602:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490e      	ldr	r1, [pc, #56]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002616:	f000 fb57 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490a      	ldr	r1, [pc, #40]	@ (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a09      	ldr	r2, [pc, #36]	@ (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe f93e 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00
 800264c:	40023800 	.word	0x40023800
 8002650:	080077b0 	.word	0x080077b0
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b03      	ldr	r3, [pc, #12]	@ (8002670 <HAL_RCC_GetHCLKFreq+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	@ 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d010      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80026ac:	4b6f      	ldr	r3, [pc, #444]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	496c      	ldr	r1, [pc, #432]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d010      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026da:	4b64      	ldr	r3, [pc, #400]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	4960      	ldr	r1, [pc, #384]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80026f8:	2301      	movs	r3, #1
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d017      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002708:	4b58      	ldr	r3, [pc, #352]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800270e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4955      	ldr	r1, [pc, #340]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002726:	d101      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002728:	2301      	movs	r3, #1
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002734:	2301      	movs	r3, #1
 8002736:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002744:	4b49      	ldr	r3, [pc, #292]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800274a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002752:	4946      	ldr	r1, [pc, #280]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002762:	d101      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002764:	2301      	movs	r3, #1
 8002766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002770:	2301      	movs	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 808a 	beq.w	8002896 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b39      	ldr	r3, [pc, #228]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	4a38      	ldr	r2, [pc, #224]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	@ 0x40
 8002792:	4b36      	ldr	r3, [pc, #216]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800279e:	4b34      	ldr	r3, [pc, #208]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a33      	ldr	r2, [pc, #204]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027aa:	f7fe f8c9 	bl	8000940 <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7fe f8c5 	bl	8000940 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e278      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d0:	4b26      	ldr	r3, [pc, #152]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d02f      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e8:	6a3a      	ldr	r2, [r7, #32]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d028      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ee:	4b1f      	ldr	r3, [pc, #124]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027f6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002804:	4a19      	ldr	r2, [pc, #100]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800280a:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d114      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe f893 	bl	8000940 <HAL_GetTick>
 800281a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe f88f 	bl	8000940 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e240      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ee      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002848:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800284c:	d114      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800285e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002862:	4902      	ldr	r1, [pc, #8]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
 8002868:	e00c      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000
 8002874:	42470e40 	.word	0x42470e40
 8002878:	4b4a      	ldr	r3, [pc, #296]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a49      	ldr	r2, [pc, #292]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800287e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002882:	6093      	str	r3, [r2, #8]
 8002884:	4b47      	ldr	r3, [pc, #284]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002886:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	4944      	ldr	r1, [pc, #272]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002892:	4313      	orrs	r3, r2
 8002894:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80028a8:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80028aa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028b8:	4b3a      	ldr	r3, [pc, #232]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	4937      	ldr	r1, [pc, #220]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028da:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e8:	492e      	ldr	r1, [pc, #184]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d011      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028fc:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002902:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290a:	4926      	ldr	r1, [pc, #152]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800291a:	d101      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800292c:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002932:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	491a      	ldr	r1, [pc, #104]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d011      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800294e:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002954:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295c:	4911      	ldr	r1, [pc, #68]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800296e:	2301      	movs	r3, #1
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d005      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002980:	f040 80ff 	bne.w	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800298a:	f7fd ffd9 	bl	8000940 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002990:	e00e      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002992:	f7fd ffd5 	bl	8000940 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d907      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e188      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	424711e0 	.word	0x424711e0
 80029ac:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029b0:	4b7e      	ldr	r3, [pc, #504]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ea      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d028      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d124      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029e4:	4b71      	ldr	r3, [pc, #452]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ea:	0c1b      	lsrs	r3, r3, #16
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	3301      	adds	r3, #1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029f6:	4b6d      	ldr	r3, [pc, #436]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029fc:	0e1b      	lsrs	r3, r3, #24
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	071b      	lsls	r3, r3, #28
 8002a26:	4961      	ldr	r1, [pc, #388]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d035      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a58:	d130      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a5a:	4b54      	ldr	r3, [pc, #336]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a72:	0f1b      	lsrs	r3, r3, #28
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	019b      	lsls	r3, r3, #6
 8002a84:	431a      	orrs	r2, r3
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	071b      	lsls	r3, r3, #28
 8002a9c:	4943      	ldr	r1, [pc, #268]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002aa4:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aaa:	f023 021f 	bic.w	r2, r3, #31
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	493d      	ldr	r1, [pc, #244]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d029      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ad0:	d124      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ad2:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae4:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aea:	0f1b      	lsrs	r3, r3, #28
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	019b      	lsls	r3, r3, #6
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	3b01      	subs	r3, #1
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	071b      	lsls	r3, r3, #28
 8002b14:	4925      	ldr	r1, [pc, #148]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d016      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	4917      	ldr	r1, [pc, #92]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b56:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7fd fef0 	bl	8000940 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b64:	f7fd feec 	bl	8000940 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e09f      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	f040 8095 	bne.w	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fd fed6 	bl	8000940 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b98:	f7fd fed2 	bl	8000940 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d908      	bls.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e085      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	42470068 	.word	0x42470068
 8002bb4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb8:	4b41      	ldr	r3, [pc, #260]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bc4:	d0e8      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d02b      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d127      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002bee:	4b34      	ldr	r3, [pc, #208]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	019b      	lsls	r3, r3, #6
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	3b01      	subs	r3, #1
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	4928      	ldr	r1, [pc, #160]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c24:	4b26      	ldr	r3, [pc, #152]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	3b01      	subs	r3, #1
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	4922      	ldr	r1, [pc, #136]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01d      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c52:	d118      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c54:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	0e1b      	lsrs	r3, r3, #24
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	019b      	lsls	r3, r3, #6
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	041b      	lsls	r3, r3, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	4910      	ldr	r1, [pc, #64]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c86:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c8c:	f7fd fe58 	bl	8000940 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c94:	f7fd fe54 	bl	8000940 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e007      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cb2:	d1ef      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3730      	adds	r7, #48	@ 0x30
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	42470070 	.word	0x42470070

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b0a6      	sub	sp, #152	@ 0x98
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cee:	4bc8      	ldr	r3, [pc, #800]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	f200 817e 	bhi.w	8002ff8 <HAL_RCC_GetSysClockFreq+0x330>
 8002cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08002ff9 	.word	0x08002ff9
 8002d0c:	08002ff9 	.word	0x08002ff9
 8002d10:	08002ff9 	.word	0x08002ff9
 8002d14:	08002d41 	.word	0x08002d41
 8002d18:	08002ff9 	.word	0x08002ff9
 8002d1c:	08002ff9 	.word	0x08002ff9
 8002d20:	08002ff9 	.word	0x08002ff9
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08002ff9 	.word	0x08002ff9
 8002d2c:	08002ff9 	.word	0x08002ff9
 8002d30:	08002ff9 	.word	0x08002ff9
 8002d34:	08002eb3 	.word	0x08002eb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4bb6      	ldr	r3, [pc, #728]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d3e:	e15f      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d40:	4bb5      	ldr	r3, [pc, #724]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002d46:	e15b      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d48:	4bb1      	ldr	r3, [pc, #708]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d54:	4bae      	ldr	r3, [pc, #696]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d031      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d60:	4bab      	ldr	r3, [pc, #684]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	2200      	movs	r2, #0
 8002d68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d72:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d74:	2300      	movs	r3, #0
 8002d76:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d78:	4ba7      	ldr	r3, [pc, #668]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d7a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d7e:	462a      	mov	r2, r5
 8002d80:	fb03 f202 	mul.w	r2, r3, r2
 8002d84:	2300      	movs	r3, #0
 8002d86:	4621      	mov	r1, r4
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4aa2      	ldr	r2, [pc, #648]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d90:	4621      	mov	r1, r4
 8002d92:	fba1 1202 	umull	r1, r2, r1, r2
 8002d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d98:	460a      	mov	r2, r1
 8002d9a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002d9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d9e:	4413      	add	r3, r2
 8002da0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da6:	2200      	movs	r2, #0
 8002da8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002daa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002db0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002db4:	f7fd fa26 	bl	8000204 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dc2:	e064      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	4b92      	ldr	r3, [pc, #584]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	2200      	movs	r2, #0
 8002dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dce:	657a      	str	r2, [r7, #84]	@ 0x54
 8002dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dd8:	2300      	movs	r3, #0
 8002dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ddc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002de0:	4622      	mov	r2, r4
 8002de2:	462b      	mov	r3, r5
 8002de4:	f04f 0000 	mov.w	r0, #0
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	0159      	lsls	r1, r3, #5
 8002dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df2:	0150      	lsls	r0, r2, #5
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4621      	mov	r1, r4
 8002dfa:	1a51      	subs	r1, r2, r1
 8002dfc:	6139      	str	r1, [r7, #16]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	eb63 0301 	sbc.w	r3, r3, r1
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e12:	4659      	mov	r1, fp
 8002e14:	018b      	lsls	r3, r1, #6
 8002e16:	4651      	mov	r1, sl
 8002e18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	018a      	lsls	r2, r1, #6
 8002e20:	4651      	mov	r1, sl
 8002e22:	ebb2 0801 	subs.w	r8, r2, r1
 8002e26:	4659      	mov	r1, fp
 8002e28:	eb63 0901 	sbc.w	r9, r3, r1
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e40:	4690      	mov	r8, r2
 8002e42:	4699      	mov	r9, r3
 8002e44:	4623      	mov	r3, r4
 8002e46:	eb18 0303 	adds.w	r3, r8, r3
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	462b      	mov	r3, r5
 8002e4e:	eb49 0303 	adc.w	r3, r9, r3
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e60:	4629      	mov	r1, r5
 8002e62:	028b      	lsls	r3, r1, #10
 8002e64:	4621      	mov	r1, r4
 8002e66:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	028a      	lsls	r2, r1, #10
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e76:	2200      	movs	r2, #0
 8002e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e80:	f7fd f9c0 	bl	8000204 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e8e:	4b60      	ldr	r3, [pc, #384]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002ea0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002eb0:	e0a6      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb2:	4b57      	ldr	r3, [pc, #348]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebe:	4b54      	ldr	r3, [pc, #336]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d02a      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b51      	ldr	r3, [pc, #324]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002edc:	2100      	movs	r1, #0
 8002ede:	4b4e      	ldr	r3, [pc, #312]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ee0:	fb03 f201 	mul.w	r2, r3, r1
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	4a4a      	ldr	r2, [pc, #296]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x350>)
 8002eee:	fba0 1202 	umull	r1, r2, r0, r2
 8002ef2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ef4:	460a      	mov	r2, r1
 8002ef6:	673a      	str	r2, [r7, #112]	@ 0x70
 8002ef8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002efa:	4413      	add	r3, r2
 8002efc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f02:	2200      	movs	r2, #0
 8002f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f06:	637a      	str	r2, [r7, #52]	@ 0x34
 8002f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002f0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002f10:	f7fd f978 	bl	8000204 <__aeabi_uldivmod>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4613      	mov	r3, r2
 8002f1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f1e:	e05b      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f20:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	2200      	movs	r2, #0
 8002f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	f04f 0000 	mov.w	r0, #0
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	0159      	lsls	r1, r3, #5
 8002f4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4e:	0150      	lsls	r0, r2, #5
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4641      	mov	r1, r8
 8002f56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f74:	ebb2 040a 	subs.w	r4, r2, sl
 8002f78:	eb63 050b 	sbc.w	r5, r3, fp
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	00eb      	lsls	r3, r5, #3
 8002f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f8a:	00e2      	lsls	r2, r4, #3
 8002f8c:	4614      	mov	r4, r2
 8002f8e:	461d      	mov	r5, r3
 8002f90:	4643      	mov	r3, r8
 8002f92:	18e3      	adds	r3, r4, r3
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	464b      	mov	r3, r9
 8002f98:	eb45 0303 	adc.w	r3, r5, r3
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002faa:	4629      	mov	r1, r5
 8002fac:	028b      	lsls	r3, r1, #10
 8002fae:	4621      	mov	r1, r4
 8002fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	028a      	lsls	r2, r1, #10
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	61fa      	str	r2, [r7, #28]
 8002fc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fca:	f7fd f91b 	bl	8000204 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0f1b      	lsrs	r3, r3, #28
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002fe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ff6:	e003      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ffe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003000:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003004:	4618      	mov	r0, r3
 8003006:	3798      	adds	r7, #152	@ 0x98
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	00f42400 	.word	0x00f42400
 8003018:	00989680 	.word	0x00989680

0800301c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e28d      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8083 	beq.w	8003142 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800303c:	4b94      	ldr	r3, [pc, #592]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b04      	cmp	r3, #4
 8003046:	d019      	beq.n	800307c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003048:	4b91      	ldr	r3, [pc, #580]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003050:	2b08      	cmp	r3, #8
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003054:	4b8e      	ldr	r3, [pc, #568]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003060:	d00c      	beq.n	800307c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4b8b      	ldr	r3, [pc, #556]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d112      	bne.n	8003094 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306e:	4b88      	ldr	r3, [pc, #544]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800307a:	d10b      	bne.n	8003094 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	4b84      	ldr	r3, [pc, #528]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05b      	beq.n	8003140 <HAL_RCC_OscConfig+0x124>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d157      	bne.n	8003140 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e25a      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309c:	d106      	bne.n	80030ac <HAL_RCC_OscConfig+0x90>
 800309e:	4b7c      	ldr	r3, [pc, #496]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7b      	ldr	r2, [pc, #492]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xcc>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0xb4>
 80030b6:	4b76      	ldr	r3, [pc, #472]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b73      	ldr	r3, [pc, #460]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a72      	ldr	r2, [pc, #456]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xcc>
 80030d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fd fc26 	bl	8000940 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fd fc22 	bl	8000940 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e21f      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b61      	ldr	r3, [pc, #388]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xdc>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fd fc12 	bl	8000940 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7fd fc0e 	bl	8000940 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e20b      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b57      	ldr	r3, [pc, #348]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x104>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d06f      	beq.n	800322e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800314e:	4b50      	ldr	r3, [pc, #320]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d017      	beq.n	800318a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800315a:	4b4d      	ldr	r3, [pc, #308]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003162:	2b08      	cmp	r3, #8
 8003164:	d105      	bne.n	8003172 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003166:	4b4a      	ldr	r3, [pc, #296]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b47      	ldr	r3, [pc, #284]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b44      	ldr	r3, [pc, #272]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b41      	ldr	r3, [pc, #260]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x186>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1d3      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4937      	ldr	r1, [pc, #220]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x278>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fd fbbb 	bl	8000940 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fd fbb7 	bl	8000940 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1b4      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4925      	ldr	r1, [pc, #148]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_RCC_OscConfig+0x278>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd fb9a 	bl	8000940 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fd fb96 	bl	8000940 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e193      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d036      	beq.n	80032a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fd fb7a 	bl	8000940 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7fd fb76 	bl	8000940 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e173      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCC_OscConfig+0x274>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x234>
 800326e:	e01b      	b.n	80032a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003270:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fd fb63 	bl	8000940 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	e00e      	b.n	800329c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327e:	f7fd fb5f 	bl	8000940 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d907      	bls.n	800329c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e15c      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b8a      	ldr	r3, [pc, #552]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ea      	bne.n	800327e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8097 	beq.w	80033e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b83      	ldr	r3, [pc, #524]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b7f      	ldr	r3, [pc, #508]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	4a7e      	ldr	r2, [pc, #504]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d6:	4b7c      	ldr	r3, [pc, #496]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b79      	ldr	r3, [pc, #484]	@ (80034cc <HAL_RCC_OscConfig+0x4b0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d118      	bne.n	8003324 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f2:	4b76      	ldr	r3, [pc, #472]	@ (80034cc <HAL_RCC_OscConfig+0x4b0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a75      	ldr	r2, [pc, #468]	@ (80034cc <HAL_RCC_OscConfig+0x4b0>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fe:	f7fd fb1f 	bl	8000940 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fd fb1b 	bl	8000940 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e118      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	4b6c      	ldr	r3, [pc, #432]	@ (80034cc <HAL_RCC_OscConfig+0x4b0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x31e>
 800332c:	4b66      	ldr	r3, [pc, #408]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a65      	ldr	r2, [pc, #404]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
 8003338:	e01c      	b.n	8003374 <HAL_RCC_OscConfig+0x358>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x340>
 8003342:	4b61      	ldr	r3, [pc, #388]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	4a60      	ldr	r2, [pc, #384]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6713      	str	r3, [r2, #112]	@ 0x70
 800334e:	4b5e      	ldr	r3, [pc, #376]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	4a5d      	ldr	r2, [pc, #372]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x358>
 800335c:	4b5a      	ldr	r3, [pc, #360]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a59      	ldr	r2, [pc, #356]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
 8003368:	4b57      	ldr	r3, [pc, #348]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	4a56      	ldr	r2, [pc, #344]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fd fae0 	bl	8000940 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fd fadc 	bl	8000940 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0d7      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	4b4b      	ldr	r3, [pc, #300]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ee      	beq.n	8003384 <HAL_RCC_OscConfig+0x368>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fd faca 	bl	8000940 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fd fac6 	bl	8000940 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0c1      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	4b40      	ldr	r3, [pc, #256]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ee      	bne.n	80033b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b3b      	ldr	r3, [pc, #236]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	4a3a      	ldr	r2, [pc, #232]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80ad 	beq.w	8003548 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ee:	4b36      	ldr	r3, [pc, #216]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d060      	beq.n	80034bc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d145      	bne.n	800348e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b33      	ldr	r3, [pc, #204]	@ (80034d0 <HAL_RCC_OscConfig+0x4b4>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd fa9a 	bl	8000940 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fd fa96 	bl	8000940 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e093      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	071b      	lsls	r3, r3, #28
 800345a:	491b      	ldr	r1, [pc, #108]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003460:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <HAL_RCC_OscConfig+0x4b4>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fd fa6b 	bl	8000940 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fd fa67 	bl	8000940 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e064      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x452>
 800348c:	e05c      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_RCC_OscConfig+0x4b4>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fd fa54 	bl	8000940 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd fa50 	bl	8000940 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e04d      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x480>
 80034ba:	e045      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e040      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40007000 	.word	0x40007000
 80034d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003554 <HAL_RCC_OscConfig+0x538>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d030      	beq.n	8003544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d129      	bne.n	8003544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d122      	bne.n	8003544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800350a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800350c:	4293      	cmp	r3, r2
 800350e:	d119      	bne.n	8003544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	3b01      	subs	r3, #1
 800351e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d10f      	bne.n	8003544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800

08003558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003558:	b084      	sub	sp, #16
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	f107 001c 	add.w	r0, r7, #28
 8003566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800356a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800356e:	2b01      	cmp	r3, #1
 8003570:	d123      	bne.n	80035ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003576:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800359a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f001 fae2 	bl	8004b78 <USB_CoreReset>
 80035b4:	4603      	mov	r3, r0
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e01b      	b.n	80035f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f001 fad6 	bl	8004b78 <USB_CoreReset>
 80035cc:	4603      	mov	r3, r0
 80035ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80035e4:	e005      	b.n	80035f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035f2:	7fbb      	ldrb	r3, [r7, #30]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d10b      	bne.n	8003610 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f043 0206 	orr.w	r2, r3, #6
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800361c:	b004      	add	sp, #16
 800361e:	4770      	bx	lr

08003620 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d165      	bne.n	8003700 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4a41      	ldr	r2, [pc, #260]	@ (800373c <USB_SetTurnaroundTime+0x11c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d906      	bls.n	800364a <USB_SetTurnaroundTime+0x2a>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4a40      	ldr	r2, [pc, #256]	@ (8003740 <USB_SetTurnaroundTime+0x120>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d202      	bcs.n	800364a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003644:	230f      	movs	r3, #15
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e062      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4a3c      	ldr	r2, [pc, #240]	@ (8003740 <USB_SetTurnaroundTime+0x120>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d306      	bcc.n	8003660 <USB_SetTurnaroundTime+0x40>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4a3b      	ldr	r2, [pc, #236]	@ (8003744 <USB_SetTurnaroundTime+0x124>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d202      	bcs.n	8003660 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800365a:	230e      	movs	r3, #14
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e057      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4a38      	ldr	r2, [pc, #224]	@ (8003744 <USB_SetTurnaroundTime+0x124>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d306      	bcc.n	8003676 <USB_SetTurnaroundTime+0x56>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a37      	ldr	r2, [pc, #220]	@ (8003748 <USB_SetTurnaroundTime+0x128>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d202      	bcs.n	8003676 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003670:	230d      	movs	r3, #13
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e04c      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4a33      	ldr	r2, [pc, #204]	@ (8003748 <USB_SetTurnaroundTime+0x128>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d306      	bcc.n	800368c <USB_SetTurnaroundTime+0x6c>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4a32      	ldr	r2, [pc, #200]	@ (800374c <USB_SetTurnaroundTime+0x12c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d802      	bhi.n	800368c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003686:	230c      	movs	r3, #12
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e041      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a2f      	ldr	r2, [pc, #188]	@ (800374c <USB_SetTurnaroundTime+0x12c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d906      	bls.n	80036a2 <USB_SetTurnaroundTime+0x82>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a2e      	ldr	r2, [pc, #184]	@ (8003750 <USB_SetTurnaroundTime+0x130>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d802      	bhi.n	80036a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800369c:	230b      	movs	r3, #11
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e036      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003750 <USB_SetTurnaroundTime+0x130>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d906      	bls.n	80036b8 <USB_SetTurnaroundTime+0x98>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4a29      	ldr	r2, [pc, #164]	@ (8003754 <USB_SetTurnaroundTime+0x134>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d802      	bhi.n	80036b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036b2:	230a      	movs	r3, #10
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e02b      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a26      	ldr	r2, [pc, #152]	@ (8003754 <USB_SetTurnaroundTime+0x134>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d906      	bls.n	80036ce <USB_SetTurnaroundTime+0xae>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a25      	ldr	r2, [pc, #148]	@ (8003758 <USB_SetTurnaroundTime+0x138>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d202      	bcs.n	80036ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036c8:	2309      	movs	r3, #9
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e020      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a21      	ldr	r2, [pc, #132]	@ (8003758 <USB_SetTurnaroundTime+0x138>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d306      	bcc.n	80036e4 <USB_SetTurnaroundTime+0xc4>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a20      	ldr	r2, [pc, #128]	@ (800375c <USB_SetTurnaroundTime+0x13c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d802      	bhi.n	80036e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036de:	2308      	movs	r3, #8
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e015      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a1d      	ldr	r2, [pc, #116]	@ (800375c <USB_SetTurnaroundTime+0x13c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d906      	bls.n	80036fa <USB_SetTurnaroundTime+0xda>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003760 <USB_SetTurnaroundTime+0x140>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d202      	bcs.n	80036fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80036f4:	2307      	movs	r3, #7
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e00a      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80036fa:	2306      	movs	r3, #6
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e007      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003706:	2309      	movs	r3, #9
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e001      	b.n	8003710 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800370c:	2309      	movs	r3, #9
 800370e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	029b      	lsls	r3, r3, #10
 8003724:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	00d8acbf 	.word	0x00d8acbf
 8003740:	00e4e1c0 	.word	0x00e4e1c0
 8003744:	00f42400 	.word	0x00f42400
 8003748:	01067380 	.word	0x01067380
 800374c:	011a499f 	.word	0x011a499f
 8003750:	01312cff 	.word	0x01312cff
 8003754:	014ca43f 	.word	0x014ca43f
 8003758:	016e3600 	.word	0x016e3600
 800375c:	01a6ab1f 	.word	0x01a6ab1f
 8003760:	01e84800 	.word	0x01e84800

08003764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f043 0201 	orr.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0201 	bic.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d115      	bne.n	80037f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037d6:	200a      	movs	r0, #10
 80037d8:	f7fd f8be 	bl	8000958 <HAL_Delay>
      ms += 10U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	330a      	adds	r3, #10
 80037e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f001 f939 	bl	8004a5a <USB_GetMode>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d01e      	beq.n	800382c <USB_SetCurrentMode+0x84>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80037f2:	d9f0      	bls.n	80037d6 <USB_SetCurrentMode+0x2e>
 80037f4:	e01a      	b.n	800382c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d115      	bne.n	8003828 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003808:	200a      	movs	r0, #10
 800380a:	f7fd f8a5 	bl	8000958 <HAL_Delay>
      ms += 10U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	330a      	adds	r3, #10
 8003812:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f001 f920 	bl	8004a5a <USB_GetMode>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <USB_SetCurrentMode+0x84>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2bc7      	cmp	r3, #199	@ 0xc7
 8003824:	d9f0      	bls.n	8003808 <USB_SetCurrentMode+0x60>
 8003826:	e001      	b.n	800382c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e005      	b.n	8003838 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003830:	d101      	bne.n	8003836 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003840:	b084      	sub	sp, #16
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800384e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	e009      	b.n	8003874 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	3340      	adds	r3, #64	@ 0x40
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	2200      	movs	r2, #0
 800386c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	3301      	adds	r3, #1
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b0e      	cmp	r3, #14
 8003878:	d9f2      	bls.n	8003860 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800387a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11c      	bne.n	80038bc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e005      	b.n	80038c8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80038ce:	461a      	mov	r2, r3
 80038d0:	2300      	movs	r3, #0
 80038d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d10d      	bne.n	80038f8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038e4:	2100      	movs	r1, #0
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f968 	bl	8003bbc <USB_SetDevSpeed>
 80038ec:	e008      	b.n	8003900 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038ee:	2101      	movs	r1, #1
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f963 	bl	8003bbc <USB_SetDevSpeed>
 80038f6:	e003      	b.n	8003900 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038f8:	2103      	movs	r1, #3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f95e 	bl	8003bbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003900:	2110      	movs	r1, #16
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f8fa 	bl	8003afc <USB_FlushTxFifo>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f924 	bl	8003b60 <USB_FlushRxFifo>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003928:	461a      	mov	r2, r3
 800392a:	2300      	movs	r3, #0
 800392c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003934:	461a      	mov	r2, r3
 8003936:	2300      	movs	r3, #0
 8003938:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003940:	461a      	mov	r2, r3
 8003942:	2300      	movs	r3, #0
 8003944:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e043      	b.n	80039d4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800395e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003962:	d118      	bne.n	8003996 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003976:	461a      	mov	r2, r3
 8003978:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e013      	b.n	80039a8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398c:	461a      	mov	r2, r3
 800398e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e008      	b.n	80039a8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b4:	461a      	mov	r2, r3
 80039b6:	2300      	movs	r3, #0
 80039b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c6:	461a      	mov	r2, r3
 80039c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3301      	adds	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039d8:	461a      	mov	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4293      	cmp	r3, r2
 80039de:	d3b5      	bcc.n	800394c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	e043      	b.n	8003a6e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039fc:	d118      	bne.n	8003a30 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e013      	b.n	8003a42 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a26:	461a      	mov	r2, r3
 8003a28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e008      	b.n	8003a42 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2300      	movs	r3, #0
 8003a52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a60:	461a      	mov	r2, r3
 8003a62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a72:	461a      	mov	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d3b5      	bcc.n	80039e6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d105      	bne.n	8003ab0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f043 0210 	orr.w	r2, r3, #16
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <USB_DevInit+0x2b8>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003abc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f043 0208 	orr.w	r2, r3, #8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ad0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d107      	bne.n	8003ae8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003af4:	b004      	add	sp, #16
 8003af6:	4770      	bx	lr
 8003af8:	803c3800 	.word	0x803c3800

08003afc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b16:	d901      	bls.n	8003b1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e01b      	b.n	8003b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	daf2      	bge.n	8003b0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	019b      	lsls	r3, r3, #6
 8003b2c:	f043 0220 	orr.w	r2, r3, #32
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3301      	adds	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b40:	d901      	bls.n	8003b46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e006      	b.n	8003b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d0f0      	beq.n	8003b34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b78:	d901      	bls.n	8003b7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e018      	b.n	8003bb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	daf2      	bge.n	8003b6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b9c:	d901      	bls.n	8003ba2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e006      	b.n	8003bb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d0f0      	beq.n	8003b90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	68f9      	ldr	r1, [r7, #12]
 8003bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0306 	and.w	r3, r3, #6
 8003c06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
 8003c12:	e00a      	b.n	8003c2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d002      	beq.n	8003c20 <USB_GetDevSpeed+0x32>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d102      	bne.n	8003c26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c20:	2302      	movs	r3, #2
 8003c22:	75fb      	strb	r3, [r7, #23]
 8003c24:	e001      	b.n	8003c2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c26:	230f      	movs	r3, #15
 8003c28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d13a      	bne.n	8003cca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2101      	movs	r1, #1
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	68f9      	ldr	r1, [r7, #12]
 8003c6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d155      	bne.n	8003d38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	791b      	ldrb	r3, [r3, #4]
 8003ca6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ca8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	059b      	lsls	r3, r3, #22
 8003cae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	0151      	lsls	r1, r2, #5
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	440a      	add	r2, r1
 8003cba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	e036      	b.n	8003d38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	2101      	movs	r1, #1
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11a      	bne.n	8003d38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	791b      	ldrb	r3, [r3, #4]
 8003d1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d161      	bne.n	8003e28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d7a:	d11f      	bne.n	8003dbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	0151      	lsls	r1, r2, #5
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	440a      	add	r2, r1
 8003d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003db6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ddc:	4013      	ands	r3, r2
 8003dde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e00:	4013      	ands	r3, r2
 8003e02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	0159      	lsls	r1, r3, #5
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4b35      	ldr	r3, [pc, #212]	@ (8003ef8 <USB_DeactivateEndpoint+0x1b0>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
 8003e26:	e060      	b.n	8003eea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e3e:	d11f      	bne.n	8003e80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	0159      	lsls	r1, r3, #5
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <USB_DeactivateEndpoint+0x1b4>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	ec337800 	.word	0xec337800
 8003efc:	eff37800 	.word	0xeff37800

08003f00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	@ 0x28
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	f040 817f 	bne.w	8004220 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d132      	bne.n	8003f90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f88:	0cdb      	lsrs	r3, r3, #19
 8003f8a:	04db      	lsls	r3, r3, #19
 8003f8c:	6113      	str	r3, [r2, #16]
 8003f8e:	e097      	b.n	80040c0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003faa:	0cdb      	lsrs	r3, r3, #19
 8003fac:	04db      	lsls	r3, r3, #19
 8003fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003fce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003fd2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11a      	bne.n	8004010 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d903      	bls.n	8003fee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004008:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800400c:	6113      	str	r3, [r2, #16]
 800400e:	e044      	b.n	800409a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4413      	add	r3, r2
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	8afb      	ldrh	r3, [r7, #22]
 8004036:	04d9      	lsls	r1, r3, #19
 8004038:	4ba4      	ldr	r3, [pc, #656]	@ (80042cc <USB_EPStartXfer+0x3cc>)
 800403a:	400b      	ands	r3, r1
 800403c:	69b9      	ldr	r1, [r7, #24]
 800403e:	0148      	lsls	r0, r1, #5
 8004040:	69f9      	ldr	r1, [r7, #28]
 8004042:	4401      	add	r1, r0
 8004044:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004048:	4313      	orrs	r3, r2
 800404a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	791b      	ldrb	r3, [r3, #4]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d122      	bne.n	800409a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	0151      	lsls	r1, r2, #5
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	440a      	add	r2, r1
 800406a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800406e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004072:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	8afb      	ldrh	r3, [r7, #22]
 8004084:	075b      	lsls	r3, r3, #29
 8004086:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800408a:	69b9      	ldr	r1, [r7, #24]
 800408c:	0148      	lsls	r0, r1, #5
 800408e:	69f9      	ldr	r1, [r7, #28]
 8004090:	4401      	add	r1, r0
 8004092:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004096:	4313      	orrs	r3, r2
 8004098:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b0:	69b9      	ldr	r1, [r7, #24]
 80040b2:	0148      	lsls	r0, r1, #5
 80040b4:	69f9      	ldr	r1, [r7, #28]
 80040b6:	4401      	add	r1, r0
 80040b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040bc:	4313      	orrs	r3, r2
 80040be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d14b      	bne.n	800415e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040da:	461a      	mov	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	791b      	ldrb	r3, [r3, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d128      	bne.n	800413c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d110      	bne.n	800411c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004114:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e00f      	b.n	800413c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004156:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	e166      	b.n	800442c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004178:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800417c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	791b      	ldrb	r3, [r3, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d015      	beq.n	80041b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 814e 	beq.w	800442c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	69f9      	ldr	r1, [r7, #28]
 80041a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041ac:	4313      	orrs	r3, r2
 80041ae:	634b      	str	r3, [r1, #52]	@ 0x34
 80041b0:	e13c      	b.n	800442c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d110      	bne.n	80041e4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e00f      	b.n	8004204 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004202:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	68d9      	ldr	r1, [r3, #12]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	b298      	uxth	r0, r3
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4603      	mov	r3, r0
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f9b9 	bl	8004590 <USB_WritePacket>
 800421e:	e105      	b.n	800442c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800423a:	0cdb      	lsrs	r3, r3, #19
 800423c:	04db      	lsls	r3, r3, #19
 800423e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800425a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800425e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004262:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d132      	bne.n	80042d0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	0148      	lsls	r0, r1, #5
 800429c:	69f9      	ldr	r1, [r7, #28]
 800429e:	4401      	add	r1, r0
 80042a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042a4:	4313      	orrs	r3, r2
 80042a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042c6:	6113      	str	r3, [r2, #16]
 80042c8:	e062      	b.n	8004390 <USB_EPStartXfer+0x490>
 80042ca:	bf00      	nop
 80042cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d123      	bne.n	8004320 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	0148      	lsls	r0, r1, #5
 80042f2:	69f9      	ldr	r1, [r7, #28]
 80042f4:	4401      	add	r1, r0
 80042f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042fa:	4313      	orrs	r3, r2
 80042fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	440a      	add	r2, r1
 8004314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004318:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800431c:	6113      	str	r3, [r2, #16]
 800431e:	e037      	b.n	8004390 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4413      	add	r3, r2
 800432a:	1e5a      	subs	r2, r3, #1
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	8afa      	ldrh	r2, [r7, #22]
 800433c:	fb03 f202 	mul.w	r2, r3, r2
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	8afb      	ldrh	r3, [r7, #22]
 8004354:	04d9      	lsls	r1, r3, #19
 8004356:	4b38      	ldr	r3, [pc, #224]	@ (8004438 <USB_EPStartXfer+0x538>)
 8004358:	400b      	ands	r3, r1
 800435a:	69b9      	ldr	r1, [r7, #24]
 800435c:	0148      	lsls	r0, r1, #5
 800435e:	69f9      	ldr	r1, [r7, #28]
 8004360:	4401      	add	r1, r0
 8004362:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	0148      	lsls	r0, r1, #5
 8004384:	69f9      	ldr	r1, [r7, #28]
 8004386:	4401      	add	r1, r0
 8004388:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800438c:	4313      	orrs	r3, r2
 800438e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10d      	bne.n	80043b2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ae:	460a      	mov	r2, r1
 80043b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	791b      	ldrb	r3, [r3, #4]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d128      	bne.n	800440c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d110      	bne.n	80043ec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e00f      	b.n	800440c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	440a      	add	r2, r1
 8004422:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004426:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800442a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	1ff80000 	.word	0x1ff80000

0800443c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d14a      	bne.n	80044f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800446e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004472:	f040 8086 	bne.w	8004582 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004494:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004498:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	7812      	ldrb	r2, [r2, #0]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d902      	bls.n	80044d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
          break;
 80044d2:	e056      	b.n	8004582 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ec:	d0e7      	beq.n	80044be <USB_EPStopXfer+0x82>
 80044ee:	e048      	b.n	8004582 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004508:	d13b      	bne.n	8004582 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004528:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800452c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800454c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004550:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3301      	adds	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800455e:	4293      	cmp	r3, r2
 8004560:	d902      	bls.n	8004568 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	75fb      	strb	r3, [r7, #23]
          break;
 8004566:	e00c      	b.n	8004582 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800457c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004580:	d0e7      	beq.n	8004552 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004582:	7dfb      	ldrb	r3, [r7, #23]
}
 8004584:	4618      	mov	r0, r3
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004590:	b480      	push	{r7}
 8004592:	b089      	sub	sp, #36	@ 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	4611      	mov	r1, r2
 800459c:	461a      	mov	r2, r3
 800459e:	460b      	mov	r3, r1
 80045a0:	71fb      	strb	r3, [r7, #7]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80045ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d123      	bne.n	80045fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045b6:	88bb      	ldrh	r3, [r7, #4]
 80045b8:	3303      	adds	r3, #3
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e018      	b.n	80045f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	031a      	lsls	r2, r3, #12
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d0:	461a      	mov	r2, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	3301      	adds	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3301      	adds	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3301      	adds	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	3301      	adds	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d3e2      	bcc.n	80045c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3724      	adds	r7, #36	@ 0x24
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800460c:	b480      	push	{r7}
 800460e:	b08b      	sub	sp, #44	@ 0x2c
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	b29b      	uxth	r3, r3
 8004628:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	623b      	str	r3, [r7, #32]
 8004636:	e014      	b.n	8004662 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	601a      	str	r2, [r3, #0]
    pDest++;
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	3301      	adds	r3, #1
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	3301      	adds	r3, #1
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	3301      	adds	r3, #1
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	3301      	adds	r3, #1
 800465a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	3301      	adds	r3, #1
 8004660:	623b      	str	r3, [r7, #32]
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	429a      	cmp	r2, r3
 8004668:	d3e6      	bcc.n	8004638 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800466a:	8bfb      	ldrh	r3, [r7, #30]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01e      	beq.n	80046ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467a:	461a      	mov	r2, r3
 800467c:	f107 0310 	add.w	r3, r7, #16
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
 8004690:	b2da      	uxtb	r2, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	701a      	strb	r2, [r3, #0]
      i++;
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	3301      	adds	r3, #1
 800469a:	623b      	str	r3, [r7, #32]
      pDest++;
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	3301      	adds	r3, #1
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80046a2:	8bfb      	ldrh	r3, [r7, #30]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80046a8:	8bfb      	ldrh	r3, [r7, #30]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ea      	bne.n	8004684 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	372c      	adds	r7, #44	@ 0x2c
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d12c      	bne.n	8004732 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db12      	blt.n	8004710 <USB_EPSetStall+0x54>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00f      	beq.n	8004710 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800470a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800470e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800472a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e02b      	b.n	800478a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	db12      	blt.n	800476a <USB_EPSetStall+0xae>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00f      	beq.n	800476a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	0151      	lsls	r1, r2, #5
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	440a      	add	r2, r1
 8004760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004764:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004768:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	440a      	add	r2, r1
 8004780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004788:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d128      	bne.n	8004806 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	791b      	ldrb	r3, [r3, #4]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d003      	beq.n	80047e4 <USB_EPClearStall+0x4c>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	791b      	ldrb	r3, [r3, #4]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d138      	bne.n	8004856 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e027      	b.n	8004856 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004820:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004824:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	791b      	ldrb	r3, [r3, #4]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d003      	beq.n	8004836 <USB_EPClearStall+0x9e>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	791b      	ldrb	r3, [r3, #4]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d10f      	bne.n	8004856 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004854:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004882:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004886:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004898:	68f9      	ldr	r1, [r7, #12]
 800489a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048de:	f023 0302 	bic.w	r3, r3, #2
 80048e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800490c:	f023 0303 	bic.w	r3, r3, #3
 8004910:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4013      	ands	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800494c:	68fb      	ldr	r3, [r7, #12]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0c1b      	lsrs	r3, r3, #16
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	b29b      	uxth	r3, r3
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049f0:	68bb      	ldr	r3, [r7, #8]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b087      	sub	sp, #28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	460b      	mov	r3, r1
 8004a08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	01db      	lsls	r3, r3, #7
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0301 	and.w	r3, r3, #1
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a94:	f023 0307 	bic.w	r3, r3, #7
 8004a98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	333c      	adds	r3, #60	@ 0x3c
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4a26      	ldr	r2, [pc, #152]	@ (8004b74 <USB_EP0_OutStart+0xb8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d90a      	bls.n	8004af6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004aec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004af0:	d101      	bne.n	8004af6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e037      	b.n	8004b66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b24:	f043 0318 	orr.w	r3, r3, #24
 8004b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b38:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004b3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b3e:	7afb      	ldrb	r3, [r7, #11]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10f      	bne.n	8004b64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b5e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	4f54300a 	.word	0x4f54300a

08004b78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b90:	d901      	bls.n	8004b96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e01b      	b.n	8004bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	daf2      	bge.n	8004b84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f043 0201 	orr.w	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bba:	d901      	bls.n	8004bc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e006      	b.n	8004bce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d0f0      	beq.n	8004bae <USB_CoreReset+0x36>

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004be8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004bec:	f002 fd42 	bl	8007674 <USBD_static_malloc>
 8004bf0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	32b0      	adds	r2, #176	@ 0xb0
 8004c02:	2100      	movs	r1, #0
 8004c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e0d4      	b.n	8004db6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004c0c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004c10:	2100      	movs	r1, #0
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f002 fd72 	bl	80076fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	32b0      	adds	r2, #176	@ 0xb0
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	32b0      	adds	r2, #176	@ 0xb0
 8004c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7c1b      	ldrb	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d138      	bne.n	8004cb6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c44:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc0 <USBD_CDC_Init+0x1e4>)
 8004c46:	7819      	ldrb	r1, [r3, #0]
 8004c48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f002 fb9f 	bl	8007392 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c54:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc0 <USBD_CDC_Init+0x1e4>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3324      	adds	r3, #36	@ 0x24
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c6e:	4b55      	ldr	r3, [pc, #340]	@ (8004dc4 <USBD_CDC_Init+0x1e8>)
 8004c70:	7819      	ldrb	r1, [r3, #0]
 8004c72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c76:	2202      	movs	r2, #2
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f002 fb8a 	bl	8007392 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c7e:	4b51      	ldr	r3, [pc, #324]	@ (8004dc4 <USBD_CDC_Init+0x1e8>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c96:	2201      	movs	r2, #1
 8004c98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc8 <USBD_CDC_Init+0x1ec>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	3326      	adds	r3, #38	@ 0x26
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	e035      	b.n	8004d22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004cb6:	4b42      	ldr	r3, [pc, #264]	@ (8004dc0 <USBD_CDC_Init+0x1e4>)
 8004cb8:	7819      	ldrb	r1, [r3, #0]
 8004cba:	2340      	movs	r3, #64	@ 0x40
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f002 fb67 	bl	8007392 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8004dc0 <USBD_CDC_Init+0x1e4>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f003 020f 	and.w	r2, r3, #15
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3324      	adds	r3, #36	@ 0x24
 8004cda:	2201      	movs	r2, #1
 8004cdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004cde:	4b39      	ldr	r3, [pc, #228]	@ (8004dc4 <USBD_CDC_Init+0x1e8>)
 8004ce0:	7819      	ldrb	r1, [r3, #0]
 8004ce2:	2340      	movs	r3, #64	@ 0x40
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f002 fb53 	bl	8007392 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004cec:	4b35      	ldr	r3, [pc, #212]	@ (8004dc4 <USBD_CDC_Init+0x1e8>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	f003 020f 	and.w	r2, r3, #15
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d04:	2201      	movs	r2, #1
 8004d06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d08:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc8 <USBD_CDC_Init+0x1ec>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f003 020f 	and.w	r2, r3, #15
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3326      	adds	r3, #38	@ 0x26
 8004d1e:	2210      	movs	r2, #16
 8004d20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d22:	4b29      	ldr	r3, [pc, #164]	@ (8004dc8 <USBD_CDC_Init+0x1ec>)
 8004d24:	7819      	ldrb	r1, [r3, #0]
 8004d26:	2308      	movs	r3, #8
 8004d28:	2203      	movs	r2, #3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f002 fb31 	bl	8007392 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004d30:	4b25      	ldr	r3, [pc, #148]	@ (8004dc8 <USBD_CDC_Init+0x1ec>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	f003 020f 	and.w	r2, r3, #15
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3324      	adds	r3, #36	@ 0x24
 8004d46:	2201      	movs	r2, #1
 8004d48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	33b0      	adds	r3, #176	@ 0xb0
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d80:	2302      	movs	r3, #2
 8004d82:	e018      	b.n	8004db6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7c1b      	ldrb	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <USBD_CDC_Init+0x1e8>)
 8004d8e:	7819      	ldrb	r1, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f002 fbe8 	bl	8007570 <USBD_LL_PrepareReceive>
 8004da0:	e008      	b.n	8004db4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <USBD_CDC_Init+0x1e8>)
 8004da4:	7819      	ldrb	r1, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004dac:	2340      	movs	r3, #64	@ 0x40
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f002 fbde 	bl	8007570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000093 	.word	0x20000093
 8004dc4:	20000094 	.word	0x20000094
 8004dc8:	20000095 	.word	0x20000095

08004dcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec4 <USBD_CDC_DeInit+0xf8>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f002 fafd 	bl	80073de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004de4:	4b37      	ldr	r3, [pc, #220]	@ (8004ec4 <USBD_CDC_DeInit+0xf8>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	3324      	adds	r3, #36	@ 0x24
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004dfe:	4b32      	ldr	r3, [pc, #200]	@ (8004ec8 <USBD_CDC_DeInit+0xfc>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f002 faea 	bl	80073de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec8 <USBD_CDC_DeInit+0xfc>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f003 020f 	and.w	r2, r3, #15
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e22:	2200      	movs	r2, #0
 8004e24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004e26:	4b29      	ldr	r3, [pc, #164]	@ (8004ecc <USBD_CDC_DeInit+0x100>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f002 fad6 	bl	80073de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004e32:	4b26      	ldr	r3, [pc, #152]	@ (8004ecc <USBD_CDC_DeInit+0x100>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	f003 020f 	and.w	r2, r3, #15
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3324      	adds	r3, #36	@ 0x24
 8004e48:	2200      	movs	r2, #0
 8004e4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ecc <USBD_CDC_DeInit+0x100>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	f003 020f 	and.w	r2, r3, #15
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	3326      	adds	r3, #38	@ 0x26
 8004e62:	2200      	movs	r2, #0
 8004e64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	32b0      	adds	r2, #176	@ 0xb0
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01f      	beq.n	8004eb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	33b0      	adds	r3, #176	@ 0xb0
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	32b0      	adds	r2, #176	@ 0xb0
 8004e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 fbf8 	bl	8007690 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	32b0      	adds	r2, #176	@ 0xb0
 8004eaa:	2100      	movs	r1, #0
 8004eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000093 	.word	0x20000093
 8004ec8:	20000094 	.word	0x20000094
 8004ecc:	20000095 	.word	0x20000095

08004ed0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	32b0      	adds	r2, #176	@ 0xb0
 8004ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0bf      	b.n	8005080 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d050      	beq.n	8004fae <USBD_CDC_Setup+0xde>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	f040 80af 	bne.w	8005070 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	88db      	ldrh	r3, [r3, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d03a      	beq.n	8004f90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	da1b      	bge.n	8004f5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	33b0      	adds	r3, #176	@ 0xb0
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004f3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	88d2      	ldrh	r2, [r2, #6]
 8004f40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	88db      	ldrh	r3, [r3, #6]
 8004f46:	2b07      	cmp	r3, #7
 8004f48:	bf28      	it	cs
 8004f4a:	2307      	movcs	r3, #7
 8004f4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	89fa      	ldrh	r2, [r7, #14]
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 fdbd 	bl	8006ad4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004f5a:	e090      	b.n	800507e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	785a      	ldrb	r2, [r3, #1]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	88db      	ldrh	r3, [r3, #6]
 8004f6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f6c:	d803      	bhi.n	8004f76 <USBD_CDC_Setup+0xa6>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	88db      	ldrh	r3, [r3, #6]
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	e000      	b.n	8004f78 <USBD_CDC_Setup+0xa8>
 8004f76:	2240      	movs	r2, #64	@ 0x40
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f7e:	6939      	ldr	r1, [r7, #16]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004f86:	461a      	mov	r2, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f001 fdcf 	bl	8006b2c <USBD_CtlPrepareRx>
      break;
 8004f8e:	e076      	b.n	800507e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	33b0      	adds	r3, #176	@ 0xb0
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	7850      	ldrb	r0, [r2, #1]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	4798      	blx	r3
      break;
 8004fac:	e067      	b.n	800507e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	2b0b      	cmp	r3, #11
 8004fb4:	d851      	bhi.n	800505a <USBD_CDC_Setup+0x18a>
 8004fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fbc <USBD_CDC_Setup+0xec>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fed 	.word	0x08004fed
 8004fc0:	08005069 	.word	0x08005069
 8004fc4:	0800505b 	.word	0x0800505b
 8004fc8:	0800505b 	.word	0x0800505b
 8004fcc:	0800505b 	.word	0x0800505b
 8004fd0:	0800505b 	.word	0x0800505b
 8004fd4:	0800505b 	.word	0x0800505b
 8004fd8:	0800505b 	.word	0x0800505b
 8004fdc:	0800505b 	.word	0x0800505b
 8004fe0:	0800505b 	.word	0x0800505b
 8004fe4:	08005017 	.word	0x08005017
 8004fe8:	08005041 	.word	0x08005041
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d107      	bne.n	8005008 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ff8:	f107 030a 	add.w	r3, r7, #10
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f001 fd67 	bl	8006ad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005006:	e032      	b.n	800506e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005008:	6839      	ldr	r1, [r7, #0]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 fce5 	bl	80069da <USBD_CtlError>
            ret = USBD_FAIL;
 8005010:	2303      	movs	r3, #3
 8005012:	75fb      	strb	r3, [r7, #23]
          break;
 8005014:	e02b      	b.n	800506e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b03      	cmp	r3, #3
 8005020:	d107      	bne.n	8005032 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005022:	f107 030d 	add.w	r3, r7, #13
 8005026:	2201      	movs	r2, #1
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 fd52 	bl	8006ad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005030:	e01d      	b.n	800506e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 fcd0 	bl	80069da <USBD_CtlError>
            ret = USBD_FAIL;
 800503a:	2303      	movs	r3, #3
 800503c:	75fb      	strb	r3, [r7, #23]
          break;
 800503e:	e016      	b.n	800506e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b03      	cmp	r3, #3
 800504a:	d00f      	beq.n	800506c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fcc3 	bl	80069da <USBD_CtlError>
            ret = USBD_FAIL;
 8005054:	2303      	movs	r3, #3
 8005056:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005058:	e008      	b.n	800506c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f001 fcbc 	bl	80069da <USBD_CtlError>
          ret = USBD_FAIL;
 8005062:	2303      	movs	r3, #3
 8005064:	75fb      	strb	r3, [r7, #23]
          break;
 8005066:	e002      	b.n	800506e <USBD_CDC_Setup+0x19e>
          break;
 8005068:	bf00      	nop
 800506a:	e008      	b.n	800507e <USBD_CDC_Setup+0x1ae>
          break;
 800506c:	bf00      	nop
      }
      break;
 800506e:	e006      	b.n	800507e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 fcb1 	bl	80069da <USBD_CtlError>
      ret = USBD_FAIL;
 8005078:	2303      	movs	r3, #3
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	bf00      	nop
  }

  return (uint8_t)ret;
 800507e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800509a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	32b0      	adds	r2, #176	@ 0xb0
 80050a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e065      	b.n	800517e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	32b0      	adds	r2, #176	@ 0xb0
 80050bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050c2:	78fb      	ldrb	r3, [r7, #3]
 80050c4:	f003 020f 	and.w	r2, r3, #15
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3318      	adds	r3, #24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d02f      	beq.n	800513c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	f003 020f 	and.w	r2, r3, #15
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	3318      	adds	r3, #24
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	f003 010f 	and.w	r1, r3, #15
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	460b      	mov	r3, r1
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4403      	add	r3, r0
 8005104:	331c      	adds	r3, #28
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	fbb2 f1f3 	udiv	r1, r2, r3
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005112:	2b00      	cmp	r3, #0
 8005114:	d112      	bne.n	800513c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	f003 020f 	and.w	r2, r3, #15
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	3318      	adds	r3, #24
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800512e:	78f9      	ldrb	r1, [r7, #3]
 8005130:	2300      	movs	r3, #0
 8005132:	2200      	movs	r2, #0
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f002 f9fa 	bl	800752e <USBD_LL_Transmit>
 800513a:	e01f      	b.n	800517c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	33b0      	adds	r3, #176	@ 0xb0
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d010      	beq.n	800517c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	33b0      	adds	r3, #176	@ 0xb0
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005178:	78fa      	ldrb	r2, [r7, #3]
 800517a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	32b0      	adds	r2, #176	@ 0xb0
 800519c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	32b0      	adds	r2, #176	@ 0xb0
 80051ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e01a      	b.n	80051ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f002 f9f8 	bl	80075b2 <USBD_LL_GetRxDataSize>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	33b0      	adds	r3, #176	@ 0xb0
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80051e8:	4611      	mov	r1, r2
 80051ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	32b0      	adds	r2, #176	@ 0xb0
 8005208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800520c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005214:	2303      	movs	r3, #3
 8005216:	e024      	b.n	8005262 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	33b0      	adds	r3, #176	@ 0xb0
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d019      	beq.n	8005260 <USBD_CDC_EP0_RxReady+0x6a>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005232:	2bff      	cmp	r3, #255	@ 0xff
 8005234:	d014      	beq.n	8005260 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	33b0      	adds	r3, #176	@ 0xb0
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800524e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005256:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	22ff      	movs	r2, #255	@ 0xff
 800525c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005274:	2182      	movs	r1, #130	@ 0x82
 8005276:	4818      	ldr	r0, [pc, #96]	@ (80052d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005278:	f000 fd4f 	bl	8005d1a <USBD_GetEpDesc>
 800527c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800527e:	2101      	movs	r1, #1
 8005280:	4815      	ldr	r0, [pc, #84]	@ (80052d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005282:	f000 fd4a 	bl	8005d1a <USBD_GetEpDesc>
 8005286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005288:	2181      	movs	r1, #129	@ 0x81
 800528a:	4813      	ldr	r0, [pc, #76]	@ (80052d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800528c:	f000 fd45 	bl	8005d1a <USBD_GetEpDesc>
 8005290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2210      	movs	r2, #16
 800529c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ac:	711a      	strb	r2, [r3, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052c0:	711a      	strb	r2, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2243      	movs	r2, #67	@ 0x43
 80052ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052cc:	4b02      	ldr	r3, [pc, #8]	@ (80052d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000050 	.word	0x20000050

080052dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052e4:	2182      	movs	r1, #130	@ 0x82
 80052e6:	4818      	ldr	r0, [pc, #96]	@ (8005348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052e8:	f000 fd17 	bl	8005d1a <USBD_GetEpDesc>
 80052ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052ee:	2101      	movs	r1, #1
 80052f0:	4815      	ldr	r0, [pc, #84]	@ (8005348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052f2:	f000 fd12 	bl	8005d1a <USBD_GetEpDesc>
 80052f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052f8:	2181      	movs	r1, #129	@ 0x81
 80052fa:	4813      	ldr	r0, [pc, #76]	@ (8005348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052fc:	f000 fd0d 	bl	8005d1a <USBD_GetEpDesc>
 8005300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2210      	movs	r2, #16
 800530c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2200      	movs	r2, #0
 8005318:	711a      	strb	r2, [r3, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f042 0202 	orr.w	r2, r2, #2
 8005320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	711a      	strb	r2, [r3, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f042 0202 	orr.w	r2, r2, #2
 8005334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2243      	movs	r2, #67	@ 0x43
 800533a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800533c:	4b02      	ldr	r3, [pc, #8]	@ (8005348 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000050 	.word	0x20000050

0800534c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005354:	2182      	movs	r1, #130	@ 0x82
 8005356:	4818      	ldr	r0, [pc, #96]	@ (80053b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005358:	f000 fcdf 	bl	8005d1a <USBD_GetEpDesc>
 800535c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800535e:	2101      	movs	r1, #1
 8005360:	4815      	ldr	r0, [pc, #84]	@ (80053b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005362:	f000 fcda 	bl	8005d1a <USBD_GetEpDesc>
 8005366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005368:	2181      	movs	r1, #129	@ 0x81
 800536a:	4813      	ldr	r0, [pc, #76]	@ (80053b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800536c:	f000 fcd5 	bl	8005d1a <USBD_GetEpDesc>
 8005370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2210      	movs	r2, #16
 800537c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d006      	beq.n	8005392 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2200      	movs	r2, #0
 8005388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800538c:	711a      	strb	r2, [r3, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053a0:	711a      	strb	r2, [r3, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2243      	movs	r2, #67	@ 0x43
 80053aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053ac:	4b02      	ldr	r3, [pc, #8]	@ (80053b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000050 	.word	0x20000050

080053bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	220a      	movs	r2, #10
 80053c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053ca:	4b03      	ldr	r3, [pc, #12]	@ (80053d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	2000000c 	.word	0x2000000c

080053dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e009      	b.n	8005404 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	33b0      	adds	r3, #176	@ 0xb0
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	32b0      	adds	r2, #176	@ 0xb0
 8005426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005432:	2303      	movs	r3, #3
 8005434:	e008      	b.n	8005448 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	32b0      	adds	r2, #176	@ 0xb0
 8005468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	e004      	b.n	8005482 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
	...

08005490 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	32b0      	adds	r2, #176	@ 0xb0
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e025      	b.n	8005502 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11f      	bne.n	8005500 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80054c8:	4b10      	ldr	r3, [pc, #64]	@ (800550c <USBD_CDC_TransmitPacket+0x7c>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 020f 	and.w	r2, r3, #15
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4403      	add	r3, r0
 80054e2:	3318      	adds	r3, #24
 80054e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80054e6:	4b09      	ldr	r3, [pc, #36]	@ (800550c <USBD_CDC_TransmitPacket+0x7c>)
 80054e8:	7819      	ldrb	r1, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f002 f819 	bl	800752e <USBD_LL_Transmit>

    ret = USBD_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000093 	.word	0x20000093

08005510 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	32b0      	adds	r2, #176	@ 0xb0
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	32b0      	adds	r2, #176	@ 0xb0
 8005532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800553a:	2303      	movs	r3, #3
 800553c:	e018      	b.n	8005570 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7c1b      	ldrb	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005546:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <USBD_CDC_ReceivePacket+0x68>)
 8005548:	7819      	ldrb	r1, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f002 f80b 	bl	8007570 <USBD_LL_PrepareReceive>
 800555a:	e008      	b.n	800556e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800555c:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <USBD_CDC_ReceivePacket+0x68>)
 800555e:	7819      	ldrb	r1, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005566:	2340      	movs	r3, #64	@ 0x40
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 f801 	bl	8007570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000094 	.word	0x20000094

0800557c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005590:	2303      	movs	r3, #3
 8005592:	e01f      	b.n	80055d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	79fa      	ldrb	r2, [r7, #7]
 80055c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f001 fe7b 	bl	80072c4 <USBD_LL_Init>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e025      	b.n	8005640 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	32ae      	adds	r2, #174	@ 0xae
 8005606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00f      	beq.n	8005630 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	32ae      	adds	r2, #174	@ 0xae
 800561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	f107 020e 	add.w	r2, r7, #14
 8005624:	4610      	mov	r0, r2
 8005626:	4798      	blx	r3
 8005628:	4602      	mov	r2, r0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 fe83 	bl	800735c <USBD_LL_Start>
 8005656:	4603      	mov	r3, r0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005668:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	4611      	mov	r1, r2
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	460b      	mov	r3, r1
 80056b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	4611      	mov	r1, r2
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 f936 	bl	8006966 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005708:	461a      	mov	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2b02      	cmp	r3, #2
 800571c:	d01a      	beq.n	8005754 <USBD_LL_SetupStage+0x72>
 800571e:	2b02      	cmp	r3, #2
 8005720:	d822      	bhi.n	8005768 <USBD_LL_SetupStage+0x86>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <USBD_LL_SetupStage+0x4a>
 8005726:	2b01      	cmp	r3, #1
 8005728:	d00a      	beq.n	8005740 <USBD_LL_SetupStage+0x5e>
 800572a:	e01d      	b.n	8005768 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fb63 	bl	8005e00 <USBD_StdDevReq>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
      break;
 800573e:	e020      	b.n	8005782 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fbcb 	bl	8005ee4 <USBD_StdItfReq>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]
      break;
 8005752:	e016      	b.n	8005782 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fc2d 	bl	8005fbc <USBD_StdEPReq>
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]
      break;
 8005766:	e00c      	b.n	8005782 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800576e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005772:	b2db      	uxtb	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fe50 	bl	800741c <USBD_LL_StallEP>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
      break;
 8005780:	bf00      	nop
  }

  return ret;
 8005782:	7bfb      	ldrb	r3, [r7, #15]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	460b      	mov	r3, r1
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800579e:	7afb      	ldrb	r3, [r7, #11]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d16e      	bne.n	8005882 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80057aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	f040 8098 	bne.w	80058e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d913      	bls.n	80057ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4293      	cmp	r3, r2
 80057dc:	bf28      	it	cs
 80057de:	4613      	movcs	r3, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f001 f9be 	bl	8006b66 <USBD_CtlContinueRx>
 80057ea:	e07d      	b.n	80058e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d014      	beq.n	8005824 <USBD_LL_DataOutStage+0x98>
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d81d      	bhi.n	800583a <USBD_LL_DataOutStage+0xae>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <USBD_LL_DataOutStage+0x7c>
 8005802:	2b01      	cmp	r3, #1
 8005804:	d003      	beq.n	800580e <USBD_LL_DataOutStage+0x82>
 8005806:	e018      	b.n	800583a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	75bb      	strb	r3, [r7, #22]
            break;
 800580c:	e018      	b.n	8005840 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005814:	b2db      	uxtb	r3, r3
 8005816:	4619      	mov	r1, r3
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fa64 	bl	8005ce6 <USBD_CoreFindIF>
 800581e:	4603      	mov	r3, r0
 8005820:	75bb      	strb	r3, [r7, #22]
            break;
 8005822:	e00d      	b.n	8005840 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fa66 	bl	8005d00 <USBD_CoreFindEP>
 8005834:	4603      	mov	r3, r0
 8005836:	75bb      	strb	r3, [r7, #22]
            break;
 8005838:	e002      	b.n	8005840 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	75bb      	strb	r3, [r7, #22]
            break;
 800583e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005840:	7dbb      	ldrb	r3, [r7, #22]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d119      	bne.n	800587a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b03      	cmp	r3, #3
 8005850:	d113      	bne.n	800587a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005852:	7dba      	ldrb	r2, [r7, #22]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	32ae      	adds	r2, #174	@ 0xae
 8005858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005862:	7dba      	ldrb	r2, [r7, #22]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800586a:	7dba      	ldrb	r2, [r7, #22]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	32ae      	adds	r2, #174	@ 0xae
 8005870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f001 f984 	bl	8006b88 <USBD_CtlSendStatus>
 8005880:	e032      	b.n	80058e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005888:	b2db      	uxtb	r3, r3
 800588a:	4619      	mov	r1, r3
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fa37 	bl	8005d00 <USBD_CoreFindEP>
 8005892:	4603      	mov	r3, r0
 8005894:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005896:	7dbb      	ldrb	r3, [r7, #22]
 8005898:	2bff      	cmp	r3, #255	@ 0xff
 800589a:	d025      	beq.n	80058e8 <USBD_LL_DataOutStage+0x15c>
 800589c:	7dbb      	ldrb	r3, [r7, #22]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d122      	bne.n	80058e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d117      	bne.n	80058de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80058ae:	7dba      	ldrb	r2, [r7, #22]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	32ae      	adds	r2, #174	@ 0xae
 80058b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00f      	beq.n	80058de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80058be:	7dba      	ldrb	r2, [r7, #22]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80058c6:	7dba      	ldrb	r2, [r7, #22]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	32ae      	adds	r2, #174	@ 0xae
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	7afa      	ldrb	r2, [r7, #11]
 80058d4:	4611      	mov	r1, r2
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	4798      	blx	r3
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	e000      	b.n	80058ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	460b      	mov	r3, r1
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005900:	7afb      	ldrb	r3, [r7, #11]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d16f      	bne.n	80059e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3314      	adds	r3, #20
 800590a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005912:	2b02      	cmp	r3, #2
 8005914:	d15a      	bne.n	80059cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	429a      	cmp	r2, r3
 8005920:	d914      	bls.n	800594c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	1ad2      	subs	r2, r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	461a      	mov	r2, r3
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f001 f8e6 	bl	8006b0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800593e:	2300      	movs	r3, #0
 8005940:	2200      	movs	r2, #0
 8005942:	2100      	movs	r1, #0
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f001 fe13 	bl	8007570 <USBD_LL_PrepareReceive>
 800594a:	e03f      	b.n	80059cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	d11c      	bne.n	8005992 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005960:	429a      	cmp	r2, r3
 8005962:	d316      	bcc.n	8005992 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800596e:	429a      	cmp	r2, r3
 8005970:	d20f      	bcs.n	8005992 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005972:	2200      	movs	r2, #0
 8005974:	2100      	movs	r1, #0
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f001 f8c7 	bl	8006b0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005984:	2300      	movs	r3, #0
 8005986:	2200      	movs	r2, #0
 8005988:	2100      	movs	r1, #0
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f001 fdf0 	bl	8007570 <USBD_LL_PrepareReceive>
 8005990:	e01c      	b.n	80059cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b03      	cmp	r3, #3
 800599c:	d10f      	bne.n	80059be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059be:	2180      	movs	r1, #128	@ 0x80
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f001 fd2b 	bl	800741c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f001 f8f1 	bl	8006bae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d03a      	beq.n	8005a4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff fe42 	bl	8005660 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80059e4:	e032      	b.n	8005a4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	4619      	mov	r1, r3
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f985 	bl	8005d00 <USBD_CoreFindEP>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	2bff      	cmp	r3, #255	@ 0xff
 80059fe:	d025      	beq.n	8005a4c <USBD_LL_DataInStage+0x15a>
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d122      	bne.n	8005a4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d11c      	bne.n	8005a4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a12:	7dfa      	ldrb	r2, [r7, #23]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	32ae      	adds	r2, #174	@ 0xae
 8005a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d014      	beq.n	8005a4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005a22:	7dfa      	ldrb	r2, [r7, #23]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a2a:	7dfa      	ldrb	r2, [r7, #23]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	32ae      	adds	r2, #174	@ 0xae
 8005a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	7afa      	ldrb	r2, [r7, #11]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	4798      	blx	r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a42:	7dbb      	ldrb	r3, [r7, #22]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a48:	7dbb      	ldrb	r3, [r7, #22]
 8005a4a:	e000      	b.n	8005a4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d014      	beq.n	8005abc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00e      	beq.n	8005abc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6852      	ldr	r2, [r2, #4]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	4611      	mov	r1, r2
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005abc:	2340      	movs	r3, #64	@ 0x40
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fc65 	bl	8007392 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2240      	movs	r2, #64	@ 0x40
 8005ad4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ad8:	2340      	movs	r3, #64	@ 0x40
 8005ada:	2200      	movs	r2, #0
 8005adc:	2180      	movs	r1, #128	@ 0x80
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 fc57 	bl	8007392 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2240      	movs	r2, #64	@ 0x40
 8005aee:	621a      	str	r2, [r3, #32]

  return ret;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d006      	beq.n	8005b3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2204      	movs	r2, #4
 8005b40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d106      	bne.n	8005b74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d110      	bne.n	8005bb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	32ae      	adds	r2, #174	@ 0xae
 8005bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e01c      	b.n	8005c1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d115      	bne.n	8005c1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	32ae      	adds	r2, #174	@ 0xae
 8005bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	32ae      	adds	r2, #174	@ 0xae
 8005c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	4611      	mov	r1, r2
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	32ae      	adds	r2, #174	@ 0xae
 8005c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e01c      	b.n	8005c82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d115      	bne.n	8005c80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	32ae      	adds	r2, #174	@ 0xae
 8005c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	32ae      	adds	r2, #174	@ 0xae
 8005c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00e      	beq.n	8005cdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6852      	ldr	r2, [r2, #4]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	4611      	mov	r1, r2
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	4798      	blx	r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	885b      	ldrh	r3, [r3, #2]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	7812      	ldrb	r2, [r2, #0]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d91f      	bls.n	8005d80 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d46:	e013      	b.n	8005d70 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d48:	f107 030a 	add.w	r3, r7, #10
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6978      	ldr	r0, [r7, #20]
 8005d50:	f000 f81b 	bl	8005d8a <USBD_GetNextDesc>
 8005d54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d108      	bne.n	8005d70 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	789b      	ldrb	r3, [r3, #2]
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d008      	beq.n	8005d7e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	885b      	ldrh	r3, [r3, #2]
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d8e5      	bhi.n	8005d48 <USBD_GetEpDesc+0x2e>
 8005d7c:	e000      	b.n	8005d80 <USBD_GetEpDesc+0x66>
          break;
 8005d7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d80:	693b      	ldr	r3, [r7, #16]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	7812      	ldrb	r2, [r2, #0]
 8005da0:	4413      	add	r3, r2
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b087      	sub	sp, #28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005de0:	8a3b      	ldrh	r3, [r7, #16]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	b21a      	sxth	r2, r3
 8005de6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b21b      	sxth	r3, r3
 8005dee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005df0:	89fb      	ldrh	r3, [r7, #14]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d005      	beq.n	8005e26 <USBD_StdDevReq+0x26>
 8005e1a:	2b40      	cmp	r3, #64	@ 0x40
 8005e1c:	d857      	bhi.n	8005ece <USBD_StdDevReq+0xce>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00f      	beq.n	8005e42 <USBD_StdDevReq+0x42>
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d153      	bne.n	8005ece <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	32ae      	adds	r2, #174	@ 0xae
 8005e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4798      	blx	r3
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e40:	e04a      	b.n	8005ed8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	785b      	ldrb	r3, [r3, #1]
 8005e46:	2b09      	cmp	r3, #9
 8005e48:	d83b      	bhi.n	8005ec2 <USBD_StdDevReq+0xc2>
 8005e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e50 <USBD_StdDevReq+0x50>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005ea5 	.word	0x08005ea5
 8005e54:	08005eb9 	.word	0x08005eb9
 8005e58:	08005ec3 	.word	0x08005ec3
 8005e5c:	08005eaf 	.word	0x08005eaf
 8005e60:	08005ec3 	.word	0x08005ec3
 8005e64:	08005e83 	.word	0x08005e83
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005ec3 	.word	0x08005ec3
 8005e70:	08005e9b 	.word	0x08005e9b
 8005e74:	08005e8d 	.word	0x08005e8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa3c 	bl	80062f8 <USBD_GetDescriptor>
          break;
 8005e80:	e024      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fbcb 	bl	8006620 <USBD_SetAddress>
          break;
 8005e8a:	e01f      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fc0a 	bl	80066a8 <USBD_SetConfig>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]
          break;
 8005e98:	e018      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fcad 	bl	80067fc <USBD_GetConfig>
          break;
 8005ea2:	e013      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fcde 	bl	8006868 <USBD_GetStatus>
          break;
 8005eac:	e00e      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fd0d 	bl	80068d0 <USBD_SetFeature>
          break;
 8005eb6:	e009      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fd31 	bl	8006922 <USBD_ClrFeature>
          break;
 8005ec0:	e004      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fd88 	bl	80069da <USBD_CtlError>
          break;
 8005eca:	bf00      	nop
      }
      break;
 8005ecc:	e004      	b.n	8005ed8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fd82 	bl	80069da <USBD_CtlError>
      break;
 8005ed6:	bf00      	nop
  }

  return ret;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop

08005ee4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d005      	beq.n	8005f0a <USBD_StdItfReq+0x26>
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d852      	bhi.n	8005fa8 <USBD_StdItfReq+0xc4>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <USBD_StdItfReq+0x26>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d14e      	bne.n	8005fa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d840      	bhi.n	8005f9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	889b      	ldrh	r3, [r3, #4]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d836      	bhi.n	8005f90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	889b      	ldrh	r3, [r3, #4]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fedb 	bl	8005ce6 <USBD_CoreFindIF>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	2bff      	cmp	r3, #255	@ 0xff
 8005f38:	d01d      	beq.n	8005f76 <USBD_StdItfReq+0x92>
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11a      	bne.n	8005f76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f40:	7bba      	ldrb	r2, [r7, #14]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	32ae      	adds	r2, #174	@ 0xae
 8005f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00f      	beq.n	8005f70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f50:	7bba      	ldrb	r2, [r7, #14]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f58:	7bba      	ldrb	r2, [r7, #14]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	32ae      	adds	r2, #174	@ 0xae
 8005f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f6e:	e004      	b.n	8005f7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f70:	2303      	movs	r3, #3
 8005f72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f74:	e001      	b.n	8005f7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f76:	2303      	movs	r3, #3
 8005f78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	88db      	ldrh	r3, [r3, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d110      	bne.n	8005fa4 <USBD_StdItfReq+0xc0>
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10d      	bne.n	8005fa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fdfd 	bl	8006b88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f8e:	e009      	b.n	8005fa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fd21 	bl	80069da <USBD_CtlError>
          break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fd1c 	bl	80069da <USBD_CtlError>
          break;
 8005fa2:	e000      	b.n	8005fa6 <USBD_StdItfReq+0xc2>
          break;
 8005fa4:	bf00      	nop
      }
      break;
 8005fa6:	e004      	b.n	8005fb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fd15 	bl	80069da <USBD_CtlError>
      break;
 8005fb0:	bf00      	nop
  }

  return ret;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	889b      	ldrh	r3, [r3, #4]
 8005fce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fd8:	2b40      	cmp	r3, #64	@ 0x40
 8005fda:	d007      	beq.n	8005fec <USBD_StdEPReq+0x30>
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	f200 817f 	bhi.w	80062e0 <USBD_StdEPReq+0x324>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d02a      	beq.n	800603c <USBD_StdEPReq+0x80>
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	f040 817a 	bne.w	80062e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff fe85 	bl	8005d00 <USBD_CoreFindEP>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ffa:	7b7b      	ldrb	r3, [r7, #13]
 8005ffc:	2bff      	cmp	r3, #255	@ 0xff
 8005ffe:	f000 8174 	beq.w	80062ea <USBD_StdEPReq+0x32e>
 8006002:	7b7b      	ldrb	r3, [r7, #13]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 8170 	bne.w	80062ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800600a:	7b7a      	ldrb	r2, [r7, #13]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006012:	7b7a      	ldrb	r2, [r7, #13]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	32ae      	adds	r2, #174	@ 0xae
 8006018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8163 	beq.w	80062ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006024:	7b7a      	ldrb	r2, [r7, #13]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32ae      	adds	r2, #174	@ 0xae
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800603a:	e156      	b.n	80062ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b03      	cmp	r3, #3
 8006042:	d008      	beq.n	8006056 <USBD_StdEPReq+0x9a>
 8006044:	2b03      	cmp	r3, #3
 8006046:	f300 8145 	bgt.w	80062d4 <USBD_StdEPReq+0x318>
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 809b 	beq.w	8006186 <USBD_StdEPReq+0x1ca>
 8006050:	2b01      	cmp	r3, #1
 8006052:	d03c      	beq.n	80060ce <USBD_StdEPReq+0x112>
 8006054:	e13e      	b.n	80062d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d002      	beq.n	8006068 <USBD_StdEPReq+0xac>
 8006062:	2b03      	cmp	r3, #3
 8006064:	d016      	beq.n	8006094 <USBD_StdEPReq+0xd8>
 8006066:	e02c      	b.n	80060c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <USBD_StdEPReq+0xce>
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	2b80      	cmp	r3, #128	@ 0x80
 8006072:	d00a      	beq.n	800608a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 f9cf 	bl	800741c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800607e:	2180      	movs	r1, #128	@ 0x80
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f9cb 	bl	800741c <USBD_LL_StallEP>
 8006086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006088:	e020      	b.n	80060cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fca4 	bl	80069da <USBD_CtlError>
              break;
 8006092:	e01b      	b.n	80060cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	885b      	ldrh	r3, [r3, #2]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10e      	bne.n	80060ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <USBD_StdEPReq+0xfe>
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b80      	cmp	r3, #128	@ 0x80
 80060a6:	d008      	beq.n	80060ba <USBD_StdEPReq+0xfe>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	88db      	ldrh	r3, [r3, #6]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 f9b1 	bl	800741c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fd64 	bl	8006b88 <USBD_CtlSendStatus>

              break;
 80060c0:	e004      	b.n	80060cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fc88 	bl	80069da <USBD_CtlError>
              break;
 80060ca:	bf00      	nop
          }
          break;
 80060cc:	e107      	b.n	80062de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d002      	beq.n	80060e0 <USBD_StdEPReq+0x124>
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d016      	beq.n	800610c <USBD_StdEPReq+0x150>
 80060de:	e04b      	b.n	8006178 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <USBD_StdEPReq+0x146>
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	2b80      	cmp	r3, #128	@ 0x80
 80060ea:	d00a      	beq.n	8006102 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 f993 	bl	800741c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060f6:	2180      	movs	r1, #128	@ 0x80
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 f98f 	bl	800741c <USBD_LL_StallEP>
 80060fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006100:	e040      	b.n	8006184 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fc68 	bl	80069da <USBD_CtlError>
              break;
 800610a:	e03b      	b.n	8006184 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	885b      	ldrh	r3, [r3, #2]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d136      	bne.n	8006182 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 f999 	bl	800745a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fd2d 	bl	8006b88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fde4 	bl	8005d00 <USBD_CoreFindEP>
 8006138:	4603      	mov	r3, r0
 800613a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800613c:	7b7b      	ldrb	r3, [r7, #13]
 800613e:	2bff      	cmp	r3, #255	@ 0xff
 8006140:	d01f      	beq.n	8006182 <USBD_StdEPReq+0x1c6>
 8006142:	7b7b      	ldrb	r3, [r7, #13]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11c      	bne.n	8006182 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006148:	7b7a      	ldrb	r2, [r7, #13]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006150:	7b7a      	ldrb	r2, [r7, #13]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32ae      	adds	r2, #174	@ 0xae
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006160:	7b7a      	ldrb	r2, [r7, #13]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32ae      	adds	r2, #174	@ 0xae
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006176:	e004      	b.n	8006182 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fc2d 	bl	80069da <USBD_CtlError>
              break;
 8006180:	e000      	b.n	8006184 <USBD_StdEPReq+0x1c8>
              break;
 8006182:	bf00      	nop
          }
          break;
 8006184:	e0ab      	b.n	80062de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d002      	beq.n	8006198 <USBD_StdEPReq+0x1dc>
 8006192:	2b03      	cmp	r3, #3
 8006194:	d032      	beq.n	80061fc <USBD_StdEPReq+0x240>
 8006196:	e097      	b.n	80062c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <USBD_StdEPReq+0x1f2>
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	2b80      	cmp	r3, #128	@ 0x80
 80061a2:	d004      	beq.n	80061ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fc17 	bl	80069da <USBD_CtlError>
                break;
 80061ac:	e091      	b.n	80062d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da0b      	bge.n	80061ce <USBD_StdEPReq+0x212>
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	3310      	adds	r3, #16
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	3304      	adds	r3, #4
 80061cc:	e00b      	b.n	80061e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	3304      	adds	r3, #4
 80061e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2202      	movs	r2, #2
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fc6d 	bl	8006ad4 <USBD_CtlSendData>
              break;
 80061fa:	e06a      	b.n	80062d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006200:	2b00      	cmp	r3, #0
 8006202:	da11      	bge.n	8006228 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	f003 020f 	and.w	r2, r3, #15
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	3324      	adds	r3, #36	@ 0x24
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d117      	bne.n	800624e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fbda 	bl	80069da <USBD_CtlError>
                  break;
 8006226:	e054      	b.n	80062d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fbc7 	bl	80069da <USBD_CtlError>
                  break;
 800624c:	e041      	b.n	80062d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800624e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006252:	2b00      	cmp	r3, #0
 8006254:	da0b      	bge.n	800626e <USBD_StdEPReq+0x2b2>
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	3310      	adds	r3, #16
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	3304      	adds	r3, #4
 800626c:	e00b      	b.n	8006286 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	4413      	add	r3, r2
 8006284:	3304      	adds	r3, #4
 8006286:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <USBD_StdEPReq+0x2d8>
 800628e:	7bbb      	ldrb	r3, [r7, #14]
 8006290:	2b80      	cmp	r3, #128	@ 0x80
 8006292:	d103      	bne.n	800629c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e00e      	b.n	80062ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800629c:	7bbb      	ldrb	r3, [r7, #14]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 f8f9 	bl	8007498 <USBD_LL_IsStallEP>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e002      	b.n	80062ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2202      	movs	r2, #2
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fc07 	bl	8006ad4 <USBD_CtlSendData>
              break;
 80062c6:	e004      	b.n	80062d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fb85 	bl	80069da <USBD_CtlError>
              break;
 80062d0:	bf00      	nop
          }
          break;
 80062d2:	e004      	b.n	80062de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb7f 	bl	80069da <USBD_CtlError>
          break;
 80062dc:	bf00      	nop
      }
      break;
 80062de:	e005      	b.n	80062ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fb79 	bl	80069da <USBD_CtlError>
      break;
 80062e8:	e000      	b.n	80062ec <USBD_StdEPReq+0x330>
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	885b      	ldrh	r3, [r3, #2]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	2b0e      	cmp	r3, #14
 800631a:	f200 8152 	bhi.w	80065c2 <USBD_GetDescriptor+0x2ca>
 800631e:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <USBD_GetDescriptor+0x2c>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006395 	.word	0x08006395
 8006328:	080063ad 	.word	0x080063ad
 800632c:	080063ed 	.word	0x080063ed
 8006330:	080065c3 	.word	0x080065c3
 8006334:	080065c3 	.word	0x080065c3
 8006338:	08006563 	.word	0x08006563
 800633c:	0800658f 	.word	0x0800658f
 8006340:	080065c3 	.word	0x080065c3
 8006344:	080065c3 	.word	0x080065c3
 8006348:	080065c3 	.word	0x080065c3
 800634c:	080065c3 	.word	0x080065c3
 8006350:	080065c3 	.word	0x080065c3
 8006354:	080065c3 	.word	0x080065c3
 8006358:	080065c3 	.word	0x080065c3
 800635c:	08006361 	.word	0x08006361
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	7c12      	ldrb	r2, [r2, #16]
 8006378:	f107 0108 	add.w	r1, r7, #8
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
 8006380:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006382:	e126      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fb27 	bl	80069da <USBD_CtlError>
        err++;
 800638c:	7afb      	ldrb	r3, [r7, #11]
 800638e:	3301      	adds	r3, #1
 8006390:	72fb      	strb	r3, [r7, #11]
      break;
 8006392:	e11e      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	7c12      	ldrb	r2, [r2, #16]
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	60f8      	str	r0, [r7, #12]
      break;
 80063aa:	e112      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	7c1b      	ldrb	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10d      	bne.n	80063d0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063bc:	f107 0208 	add.w	r2, r7, #8
 80063c0:	4610      	mov	r0, r2
 80063c2:	4798      	blx	r3
 80063c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	2202      	movs	r2, #2
 80063cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063ce:	e100      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	f107 0208 	add.w	r2, r7, #8
 80063dc:	4610      	mov	r0, r2
 80063de:	4798      	blx	r3
 80063e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	2202      	movs	r2, #2
 80063e8:	701a      	strb	r2, [r3, #0]
      break;
 80063ea:	e0f2      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	885b      	ldrh	r3, [r3, #2]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	f200 80ac 	bhi.w	8006550 <USBD_GetDescriptor+0x258>
 80063f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006400 <USBD_GetDescriptor+0x108>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006419 	.word	0x08006419
 8006404:	0800644d 	.word	0x0800644d
 8006408:	08006481 	.word	0x08006481
 800640c:	080064b5 	.word	0x080064b5
 8006410:	080064e9 	.word	0x080064e9
 8006414:	0800651d 	.word	0x0800651d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	7c12      	ldrb	r2, [r2, #16]
 8006430:	f107 0108 	add.w	r1, r7, #8
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800643a:	e091      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 facb 	bl	80069da <USBD_CtlError>
            err++;
 8006444:	7afb      	ldrb	r3, [r7, #11]
 8006446:	3301      	adds	r3, #1
 8006448:	72fb      	strb	r3, [r7, #11]
          break;
 800644a:	e089      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	7c12      	ldrb	r2, [r2, #16]
 8006464:	f107 0108 	add.w	r1, r7, #8
 8006468:	4610      	mov	r0, r2
 800646a:	4798      	blx	r3
 800646c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646e:	e077      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fab1 	bl	80069da <USBD_CtlError>
            err++;
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	3301      	adds	r3, #1
 800647c:	72fb      	strb	r3, [r7, #11]
          break;
 800647e:	e06f      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	7c12      	ldrb	r2, [r2, #16]
 8006498:	f107 0108 	add.w	r1, r7, #8
 800649c:	4610      	mov	r0, r2
 800649e:	4798      	blx	r3
 80064a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064a2:	e05d      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa97 	bl	80069da <USBD_CtlError>
            err++;
 80064ac:	7afb      	ldrb	r3, [r7, #11]
 80064ae:	3301      	adds	r3, #1
 80064b0:	72fb      	strb	r3, [r7, #11]
          break;
 80064b2:	e055      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	7c12      	ldrb	r2, [r2, #16]
 80064cc:	f107 0108 	add.w	r1, r7, #8
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
 80064d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064d6:	e043      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa7d 	bl	80069da <USBD_CtlError>
            err++;
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	3301      	adds	r3, #1
 80064e4:	72fb      	strb	r3, [r7, #11]
          break;
 80064e6:	e03b      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	7c12      	ldrb	r2, [r2, #16]
 8006500:	f107 0108 	add.w	r1, r7, #8
 8006504:	4610      	mov	r0, r2
 8006506:	4798      	blx	r3
 8006508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800650a:	e029      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa63 	bl	80069da <USBD_CtlError>
            err++;
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	3301      	adds	r3, #1
 8006518:	72fb      	strb	r3, [r7, #11]
          break;
 800651a:	e021      	b.n	8006560 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	7c12      	ldrb	r2, [r2, #16]
 8006534:	f107 0108 	add.w	r1, r7, #8
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800653e:	e00f      	b.n	8006560 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa49 	bl	80069da <USBD_CtlError>
            err++;
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	3301      	adds	r3, #1
 800654c:	72fb      	strb	r3, [r7, #11]
          break;
 800654e:	e007      	b.n	8006560 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa41 	bl	80069da <USBD_CtlError>
          err++;
 8006558:	7afb      	ldrb	r3, [r7, #11]
 800655a:	3301      	adds	r3, #1
 800655c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800655e:	bf00      	nop
      }
      break;
 8006560:	e037      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	7c1b      	ldrb	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006572:	f107 0208 	add.w	r2, r7, #8
 8006576:	4610      	mov	r0, r2
 8006578:	4798      	blx	r3
 800657a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800657c:	e029      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa2a 	bl	80069da <USBD_CtlError>
        err++;
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	3301      	adds	r3, #1
 800658a:	72fb      	strb	r3, [r7, #11]
      break;
 800658c:	e021      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	7c1b      	ldrb	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800659c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659e:	f107 0208 	add.w	r2, r7, #8
 80065a2:	4610      	mov	r0, r2
 80065a4:	4798      	blx	r3
 80065a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	2207      	movs	r2, #7
 80065ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065b0:	e00f      	b.n	80065d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fa10 	bl	80069da <USBD_CtlError>
        err++;
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	3301      	adds	r3, #1
 80065be:	72fb      	strb	r3, [r7, #11]
      break;
 80065c0:	e007      	b.n	80065d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fa08 	bl	80069da <USBD_CtlError>
      err++;
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	3301      	adds	r3, #1
 80065ce:	72fb      	strb	r3, [r7, #11]
      break;
 80065d0:	bf00      	nop
  }

  if (err != 0U)
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11e      	bne.n	8006616 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	88db      	ldrh	r3, [r3, #6]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d016      	beq.n	800660e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80065e0:	893b      	ldrh	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00e      	beq.n	8006604 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	88da      	ldrh	r2, [r3, #6]
 80065ea:	893b      	ldrh	r3, [r7, #8]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	bf28      	it	cs
 80065f0:	4613      	movcs	r3, r2
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065f6:	893b      	ldrh	r3, [r7, #8]
 80065f8:	461a      	mov	r2, r3
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa69 	bl	8006ad4 <USBD_CtlSendData>
 8006602:	e009      	b.n	8006618 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9e7 	bl	80069da <USBD_CtlError>
 800660c:	e004      	b.n	8006618 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 faba 	bl	8006b88 <USBD_CtlSendStatus>
 8006614:	e000      	b.n	8006618 <USBD_GetDescriptor+0x320>
    return;
 8006616:	bf00      	nop
  }
}
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop

08006620 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	889b      	ldrh	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d131      	bne.n	8006696 <USBD_SetAddress+0x76>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	88db      	ldrh	r3, [r3, #6]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d12d      	bne.n	8006696 <USBD_SetAddress+0x76>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	885b      	ldrh	r3, [r3, #2]
 800663e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006640:	d829      	bhi.n	8006696 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	885b      	ldrh	r3, [r3, #2]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800664c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d104      	bne.n	8006664 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f9bc 	bl	80069da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006662:	e01d      	b.n	80066a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7bfa      	ldrb	r2, [r7, #15]
 8006668:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 ff3d 	bl	80074f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa86 	bl	8006b88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668a:	e009      	b.n	80066a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006694:	e004      	b.n	80066a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f99e 	bl	80069da <USBD_CtlError>
  }
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	885b      	ldrh	r3, [r3, #2]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	4b4e      	ldr	r3, [pc, #312]	@ (80067f8 <USBD_SetConfig+0x150>)
 80066be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066c0:	4b4d      	ldr	r3, [pc, #308]	@ (80067f8 <USBD_SetConfig+0x150>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d905      	bls.n	80066d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f985 	bl	80069da <USBD_CtlError>
    return USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e08c      	b.n	80067ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d002      	beq.n	80066e6 <USBD_SetConfig+0x3e>
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d029      	beq.n	8006738 <USBD_SetConfig+0x90>
 80066e4:	e075      	b.n	80067d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066e6:	4b44      	ldr	r3, [pc, #272]	@ (80067f8 <USBD_SetConfig+0x150>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d020      	beq.n	8006730 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80066ee:	4b42      	ldr	r3, [pc, #264]	@ (80067f8 <USBD_SetConfig+0x150>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066f8:	4b3f      	ldr	r3, [pc, #252]	@ (80067f8 <USBD_SetConfig+0x150>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fe ffb9 	bl	8005676 <USBD_SetClassConfig>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f962 	bl	80069da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800671e:	e065      	b.n	80067ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fa31 	bl	8006b88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2203      	movs	r2, #3
 800672a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800672e:	e05d      	b.n	80067ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fa29 	bl	8006b88 <USBD_CtlSendStatus>
      break;
 8006736:	e059      	b.n	80067ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006738:	4b2f      	ldr	r3, [pc, #188]	@ (80067f8 <USBD_SetConfig+0x150>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d112      	bne.n	8006766 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006748:	4b2b      	ldr	r3, [pc, #172]	@ (80067f8 <USBD_SetConfig+0x150>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	461a      	mov	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006752:	4b29      	ldr	r3, [pc, #164]	@ (80067f8 <USBD_SetConfig+0x150>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fe ffa8 	bl	80056ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa12 	bl	8006b88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006764:	e042      	b.n	80067ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006766:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <USBD_SetConfig+0x150>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d02a      	beq.n	80067ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7fe ff96 	bl	80056ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006782:	4b1d      	ldr	r3, [pc, #116]	@ (80067f8 <USBD_SetConfig+0x150>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800678c:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <USBD_SetConfig+0x150>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fe ff6f 	bl	8005676 <USBD_SetClassConfig>
 8006798:	4603      	mov	r3, r0
 800679a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00f      	beq.n	80067c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f918 	bl	80069da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fe ff7b 	bl	80056ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80067c0:	e014      	b.n	80067ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9e0 	bl	8006b88 <USBD_CtlSendStatus>
      break;
 80067c8:	e010      	b.n	80067ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9dc 	bl	8006b88 <USBD_CtlSendStatus>
      break;
 80067d0:	e00c      	b.n	80067ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f900 	bl	80069da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067da:	4b07      	ldr	r3, [pc, #28]	@ (80067f8 <USBD_SetConfig+0x150>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fe ff64 	bl	80056ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80067e6:	2303      	movs	r3, #3
 80067e8:	73fb      	strb	r3, [r7, #15]
      break;
 80067ea:	bf00      	nop
  }

  return ret;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	2000012c 	.word	0x2000012c

080067fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	88db      	ldrh	r3, [r3, #6]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d004      	beq.n	8006818 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f8e2 	bl	80069da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006816:	e023      	b.n	8006860 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	dc02      	bgt.n	800682a <USBD_GetConfig+0x2e>
 8006824:	2b00      	cmp	r3, #0
 8006826:	dc03      	bgt.n	8006830 <USBD_GetConfig+0x34>
 8006828:	e015      	b.n	8006856 <USBD_GetConfig+0x5a>
 800682a:	2b03      	cmp	r3, #3
 800682c:	d00b      	beq.n	8006846 <USBD_GetConfig+0x4a>
 800682e:	e012      	b.n	8006856 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3308      	adds	r3, #8
 800683a:	2201      	movs	r2, #1
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f948 	bl	8006ad4 <USBD_CtlSendData>
        break;
 8006844:	e00c      	b.n	8006860 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3304      	adds	r3, #4
 800684a:	2201      	movs	r2, #1
 800684c:	4619      	mov	r1, r3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f940 	bl	8006ad4 <USBD_CtlSendData>
        break;
 8006854:	e004      	b.n	8006860 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f8be 	bl	80069da <USBD_CtlError>
        break;
 800685e:	bf00      	nop
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006878:	b2db      	uxtb	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	2b02      	cmp	r3, #2
 800687e:	d81e      	bhi.n	80068be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	88db      	ldrh	r3, [r3, #6]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d004      	beq.n	8006892 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f8a5 	bl	80069da <USBD_CtlError>
        break;
 8006890:	e01a      	b.n	80068c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f043 0202 	orr.w	r2, r3, #2
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	330c      	adds	r3, #12
 80068b2:	2202      	movs	r2, #2
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f90c 	bl	8006ad4 <USBD_CtlSendData>
      break;
 80068bc:	e004      	b.n	80068c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f88a 	bl	80069da <USBD_CtlError>
      break;
 80068c6:	bf00      	nop
  }
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	885b      	ldrh	r3, [r3, #2]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d107      	bne.n	80068f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f94c 	bl	8006b88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80068f0:	e013      	b.n	800691a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	885b      	ldrh	r3, [r3, #2]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d10b      	bne.n	8006912 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	889b      	ldrh	r3, [r3, #4]
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	b29b      	uxth	r3, r3
 8006902:	b2da      	uxtb	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f93c 	bl	8006b88 <USBD_CtlSendStatus>
}
 8006910:	e003      	b.n	800691a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f860 	bl	80069da <USBD_CtlError>
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006932:	b2db      	uxtb	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	2b02      	cmp	r3, #2
 8006938:	d80b      	bhi.n	8006952 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	885b      	ldrh	r3, [r3, #2]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d10c      	bne.n	800695c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f91c 	bl	8006b88 <USBD_CtlSendStatus>
      }
      break;
 8006950:	e004      	b.n	800695c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f840 	bl	80069da <USBD_CtlError>
      break;
 800695a:	e000      	b.n	800695e <USBD_ClrFeature+0x3c>
      break;
 800695c:	bf00      	nop
  }
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3301      	adds	r3, #1
 8006980:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff fa16 	bl	8005dc2 <SWAPBYTE>
 8006996:	4603      	mov	r3, r0
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3301      	adds	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fa09 	bl	8005dc2 <SWAPBYTE>
 80069b0:	4603      	mov	r3, r0
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3301      	adds	r3, #1
 80069bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff f9fc 	bl	8005dc2 <SWAPBYTE>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	80da      	strh	r2, [r3, #6]
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069e4:	2180      	movs	r1, #128	@ 0x80
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fd18 	bl	800741c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069ec:	2100      	movs	r1, #0
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fd14 	bl	800741c <USBD_LL_StallEP>
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d042      	beq.n	8006a98 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006a16:	6938      	ldr	r0, [r7, #16]
 8006a18:	f000 f842 	bl	8006aa0 <USBD_GetLen>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	3301      	adds	r3, #1
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a26:	d808      	bhi.n	8006a3a <USBD_GetString+0x3e>
 8006a28:	6938      	ldr	r0, [r7, #16]
 8006a2a:	f000 f839 	bl	8006aa0 <USBD_GetLen>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	3301      	adds	r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	e001      	b.n	8006a3e <USBD_GetString+0x42>
 8006a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	4413      	add	r3, r2
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	7812      	ldrb	r2, [r2, #0]
 8006a4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	3301      	adds	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	4413      	add	r3, r2
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	3301      	adds	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a64:	e013      	b.n	8006a8e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	7812      	ldrb	r2, [r2, #0]
 8006a70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
    idx++;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	4413      	add	r3, r2
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e7      	bne.n	8006a66 <USBD_GetString+0x6a>
 8006a96:	e000      	b.n	8006a9a <USBD_GetString+0x9e>
    return;
 8006a98:	bf00      	nop
  }
}
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ab0:	e005      	b.n	8006abe <USBD_GetLen+0x1e>
  {
    len++;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f5      	bne.n	8006ab2 <USBD_GetLen+0x12>
  }

  return len;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	2100      	movs	r1, #0
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fd17 	bl	800752e <USBD_LL_Transmit>

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fd06 	bl	800752e <USBD_LL_Transmit>

  return USBD_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	2100      	movs	r1, #0
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fd0a 	bl	8007570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	2100      	movs	r1, #0
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fcf9 	bl	8007570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2204      	movs	r2, #4
 8006b94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fcc5 	bl	800752e <USBD_LL_Transmit>

  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2205      	movs	r2, #5
 8006bba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fcd3 	bl	8007570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	4912      	ldr	r1, [pc, #72]	@ (8006c24 <MX_USB_DEVICE_Init+0x50>)
 8006bdc:	4812      	ldr	r0, [pc, #72]	@ (8006c28 <MX_USB_DEVICE_Init+0x54>)
 8006bde:	f7fe fccd 	bl	800557c <USBD_Init>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006be8:	f7f9 fda0 	bl	800072c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006bec:	490f      	ldr	r1, [pc, #60]	@ (8006c2c <MX_USB_DEVICE_Init+0x58>)
 8006bee:	480e      	ldr	r0, [pc, #56]	@ (8006c28 <MX_USB_DEVICE_Init+0x54>)
 8006bf0:	f7fe fcf4 	bl	80055dc <USBD_RegisterClass>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006bfa:	f7f9 fd97 	bl	800072c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006bfe:	490c      	ldr	r1, [pc, #48]	@ (8006c30 <MX_USB_DEVICE_Init+0x5c>)
 8006c00:	4809      	ldr	r0, [pc, #36]	@ (8006c28 <MX_USB_DEVICE_Init+0x54>)
 8006c02:	f7fe fbeb 	bl	80053dc <USBD_CDC_RegisterInterface>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c0c:	f7f9 fd8e 	bl	800072c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c10:	4805      	ldr	r0, [pc, #20]	@ (8006c28 <MX_USB_DEVICE_Init+0x54>)
 8006c12:	f7fe fd19 	bl	8005648 <USBD_Start>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c1c:	f7f9 fd86 	bl	800072c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c20:	bf00      	nop
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	200000ac 	.word	0x200000ac
 8006c28:	20000130 	.word	0x20000130
 8006c2c:	20000018 	.word	0x20000018
 8006c30:	20000098 	.word	0x20000098

08006c34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4905      	ldr	r1, [pc, #20]	@ (8006c50 <CDC_Init_FS+0x1c>)
 8006c3c:	4805      	ldr	r0, [pc, #20]	@ (8006c54 <CDC_Init_FS+0x20>)
 8006c3e:	f7fe fbe7 	bl	8005410 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c42:	4905      	ldr	r1, [pc, #20]	@ (8006c58 <CDC_Init_FS+0x24>)
 8006c44:	4803      	ldr	r0, [pc, #12]	@ (8006c54 <CDC_Init_FS+0x20>)
 8006c46:	f7fe fc05 	bl	8005454 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000c0c 	.word	0x20000c0c
 8006c54:	20000130 	.word	0x20000130
 8006c58:	2000040c 	.word	0x2000040c

08006c5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	6039      	str	r1, [r7, #0]
 8006c76:	71fb      	strb	r3, [r7, #7]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b23      	cmp	r3, #35	@ 0x23
 8006c80:	d84a      	bhi.n	8006d18 <CDC_Control_FS+0xac>
 8006c82:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <CDC_Control_FS+0x1c>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006d19 	.word	0x08006d19
 8006c8c:	08006d19 	.word	0x08006d19
 8006c90:	08006d19 	.word	0x08006d19
 8006c94:	08006d19 	.word	0x08006d19
 8006c98:	08006d19 	.word	0x08006d19
 8006c9c:	08006d19 	.word	0x08006d19
 8006ca0:	08006d19 	.word	0x08006d19
 8006ca4:	08006d19 	.word	0x08006d19
 8006ca8:	08006d19 	.word	0x08006d19
 8006cac:	08006d19 	.word	0x08006d19
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006d19 	.word	0x08006d19
 8006cb8:	08006d19 	.word	0x08006d19
 8006cbc:	08006d19 	.word	0x08006d19
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006d19 	.word	0x08006d19
 8006ccc:	08006d19 	.word	0x08006d19
 8006cd0:	08006d19 	.word	0x08006d19
 8006cd4:	08006d19 	.word	0x08006d19
 8006cd8:	08006d19 	.word	0x08006d19
 8006cdc:	08006d19 	.word	0x08006d19
 8006ce0:	08006d19 	.word	0x08006d19
 8006ce4:	08006d19 	.word	0x08006d19
 8006ce8:	08006d19 	.word	0x08006d19
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d19 	.word	0x08006d19
 8006cfc:	08006d19 	.word	0x08006d19
 8006d00:	08006d19 	.word	0x08006d19
 8006d04:	08006d19 	.word	0x08006d19
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d19 	.word	0x08006d19
 8006d10:	08006d19 	.word	0x08006d19
 8006d14:	08006d19 	.word	0x08006d19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d18:	bf00      	nop
  }

  return (USBD_OK);
 8006d1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  // Custom Handler for Dealing with this
  USB_CDC_RxHandler(Buf, Len);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7f9 fbf5 	bl	8000524 <USB_CDC_RxHandler>

  // Reset Buffer for further interrupts and reading
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	4805      	ldr	r0, [pc, #20]	@ (8006d54 <CDC_Receive_FS+0x2c>)
 8006d3e:	f7fe fb89 	bl	8005454 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d42:	4804      	ldr	r0, [pc, #16]	@ (8006d54 <CDC_Receive_FS+0x2c>)
 8006d44:	f7fe fbe4 	bl	8005510 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000130 	.word	0x20000130

08006d58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006d68:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <CDC_Transmit_FS+0x48>)
 8006d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e00b      	b.n	8006d96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006d7e:	887b      	ldrh	r3, [r7, #2]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4806      	ldr	r0, [pc, #24]	@ (8006da0 <CDC_Transmit_FS+0x48>)
 8006d86:	f7fe fb43 	bl	8005410 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006d8a:	4805      	ldr	r0, [pc, #20]	@ (8006da0 <CDC_Transmit_FS+0x48>)
 8006d8c:	f7fe fb80 	bl	8005490 <USBD_CDC_TransmitPacket>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000130 	.word	0x20000130

08006da4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
	...

08006dc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2212      	movs	r2, #18
 8006dd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dda:	4b03      	ldr	r3, [pc, #12]	@ (8006de8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	200000cc 	.word	0x200000cc

08006dec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	6039      	str	r1, [r7, #0]
 8006df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006dfe:	4b03      	ldr	r3, [pc, #12]	@ (8006e0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	200000ec 	.word	0x200000ec

08006e10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	6039      	str	r1, [r7, #0]
 8006e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d105      	bne.n	8006e2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	4907      	ldr	r1, [pc, #28]	@ (8006e44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e26:	4808      	ldr	r0, [pc, #32]	@ (8006e48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e28:	f7ff fde8 	bl	80069fc <USBD_GetString>
 8006e2c:	e004      	b.n	8006e38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	4904      	ldr	r1, [pc, #16]	@ (8006e44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e32:	4805      	ldr	r0, [pc, #20]	@ (8006e48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e34:	f7ff fde2 	bl	80069fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e38:	4b02      	ldr	r3, [pc, #8]	@ (8006e44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	2000140c 	.word	0x2000140c
 8006e48:	0800776c 	.word	0x0800776c

08006e4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	4904      	ldr	r1, [pc, #16]	@ (8006e6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e5c:	4804      	ldr	r0, [pc, #16]	@ (8006e70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e5e:	f7ff fdcd 	bl	80069fc <USBD_GetString>
  return USBD_StrDesc;
 8006e62:	4b02      	ldr	r3, [pc, #8]	@ (8006e6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	2000140c 	.word	0x2000140c
 8006e70:	08007780 	.word	0x08007780

08006e74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	6039      	str	r1, [r7, #0]
 8006e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	221a      	movs	r2, #26
 8006e84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e86:	f000 f855 	bl	8006f34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e8a:	4b02      	ldr	r3, [pc, #8]	@ (8006e94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	200000f0 	.word	0x200000f0

08006e98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	6039      	str	r1, [r7, #0]
 8006ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d105      	bne.n	8006eb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	4907      	ldr	r1, [pc, #28]	@ (8006ecc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eae:	4808      	ldr	r0, [pc, #32]	@ (8006ed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eb0:	f7ff fda4 	bl	80069fc <USBD_GetString>
 8006eb4:	e004      	b.n	8006ec0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	4904      	ldr	r1, [pc, #16]	@ (8006ecc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eba:	4805      	ldr	r0, [pc, #20]	@ (8006ed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ebc:	f7ff fd9e 	bl	80069fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ec0:	4b02      	ldr	r3, [pc, #8]	@ (8006ecc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	2000140c 	.word	0x2000140c
 8006ed0:	08007794 	.word	0x08007794

08006ed4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	4907      	ldr	r1, [pc, #28]	@ (8006f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eea:	4808      	ldr	r0, [pc, #32]	@ (8006f0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006eec:	f7ff fd86 	bl	80069fc <USBD_GetString>
 8006ef0:	e004      	b.n	8006efc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	4904      	ldr	r1, [pc, #16]	@ (8006f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ef6:	4805      	ldr	r0, [pc, #20]	@ (8006f0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ef8:	f7ff fd80 	bl	80069fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006efc:	4b02      	ldr	r3, [pc, #8]	@ (8006f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	2000140c 	.word	0x2000140c
 8006f0c:	080077a0 	.word	0x080077a0

08006f10 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	220c      	movs	r2, #12
 8006f20:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006f22:	4b03      	ldr	r3, [pc, #12]	@ (8006f30 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	200000e0 	.word	0x200000e0

08006f34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f78 <Get_SerialNum+0x44>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f40:	4b0e      	ldr	r3, [pc, #56]	@ (8006f7c <Get_SerialNum+0x48>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f46:	4b0e      	ldr	r3, [pc, #56]	@ (8006f80 <Get_SerialNum+0x4c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4413      	add	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	4909      	ldr	r1, [pc, #36]	@ (8006f84 <Get_SerialNum+0x50>)
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f814 	bl	8006f8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f64:	2204      	movs	r2, #4
 8006f66:	4908      	ldr	r1, [pc, #32]	@ (8006f88 <Get_SerialNum+0x54>)
 8006f68:	68b8      	ldr	r0, [r7, #8]
 8006f6a:	f000 f80f 	bl	8006f8c <IntToUnicode>
  }
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	1fff7a10 	.word	0x1fff7a10
 8006f7c:	1fff7a14 	.word	0x1fff7a14
 8006f80:	1fff7a18 	.word	0x1fff7a18
 8006f84:	200000f2 	.word	0x200000f2
 8006f88:	20000102 	.word	0x20000102

08006f8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
 8006fa2:	e027      	b.n	8006ff4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	0f1b      	lsrs	r3, r3, #28
 8006fa8:	2b09      	cmp	r3, #9
 8006faa:	d80b      	bhi.n	8006fc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	0f1b      	lsrs	r3, r3, #28
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	440b      	add	r3, r1
 8006fbc:	3230      	adds	r2, #48	@ 0x30
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e00a      	b.n	8006fda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	0f1b      	lsrs	r3, r3, #28
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	4619      	mov	r1, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	440b      	add	r3, r1
 8006fd4:	3237      	adds	r2, #55	@ 0x37
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	4413      	add	r3, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	75fb      	strb	r3, [r7, #23]
 8006ff4:	7dfa      	ldrb	r2, [r7, #23]
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d3d3      	bcc.n	8006fa4 <IntToUnicode+0x18>
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0a0      	sub	sp, #128	@ 0x80
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007014:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007024:	f107 0310 	add.w	r3, r7, #16
 8007028:	225c      	movs	r2, #92	@ 0x5c
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fb65 	bl	80076fc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800703a:	d149      	bne.n	80070d0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800703c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007040:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007042:	2300      	movs	r3, #0
 8007044:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007046:	f107 0310 	add.w	r3, r7, #16
 800704a:	4618      	mov	r0, r3
 800704c:	f7fb fb12 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007056:	f7f9 fb69 	bl	800072c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	4b1e      	ldr	r3, [pc, #120]	@ (80070d8 <HAL_PCD_MspInit+0xcc>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007062:	4a1d      	ldr	r2, [pc, #116]	@ (80070d8 <HAL_PCD_MspInit+0xcc>)
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	6313      	str	r3, [r2, #48]	@ 0x30
 800706a:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <HAL_PCD_MspInit+0xcc>)
 800706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007076:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800707a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800707c:	2302      	movs	r3, #2
 800707e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007080:	2300      	movs	r3, #0
 8007082:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007084:	2303      	movs	r3, #3
 8007086:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007088:	230a      	movs	r3, #10
 800708a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800708c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007090:	4619      	mov	r1, r3
 8007092:	4812      	ldr	r0, [pc, #72]	@ (80070dc <HAL_PCD_MspInit+0xd0>)
 8007094:	f7f9 fd96 	bl	8000bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007098:	4b0f      	ldr	r3, [pc, #60]	@ (80070d8 <HAL_PCD_MspInit+0xcc>)
 800709a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800709c:	4a0e      	ldr	r2, [pc, #56]	@ (80070d8 <HAL_PCD_MspInit+0xcc>)
 800709e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80070a4:	2300      	movs	r3, #0
 80070a6:	60bb      	str	r3, [r7, #8]
 80070a8:	4b0b      	ldr	r3, [pc, #44]	@ (80070d8 <HAL_PCD_MspInit+0xcc>)
 80070aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ac:	4a0a      	ldr	r2, [pc, #40]	@ (80070d8 <HAL_PCD_MspInit+0xcc>)
 80070ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80070b4:	4b08      	ldr	r3, [pc, #32]	@ (80070d8 <HAL_PCD_MspInit+0xcc>)
 80070b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	2043      	movs	r0, #67	@ 0x43
 80070c6:	f7f9 fd46 	bl	8000b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070ca:	2043      	movs	r0, #67	@ 0x43
 80070cc:	f7f9 fd5f 	bl	8000b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070d0:	bf00      	nop
 80070d2:	3780      	adds	r7, #128	@ 0x80
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40023800 	.word	0x40023800
 80070dc:	40020000 	.word	0x40020000

080070e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	f7fe faf3 	bl	80056e2 <USBD_LL_SetupStage>
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007116:	78fa      	ldrb	r2, [r7, #3]
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	4613      	mov	r3, r2
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	4619      	mov	r1, r3
 800712e:	f7fe fb2d 	bl	800578c <USBD_LL_DataOutStage>
}
 8007132:	bf00      	nop
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800714c:	78fa      	ldrb	r2, [r7, #3]
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	4613      	mov	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	3320      	adds	r3, #32
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	4619      	mov	r1, r3
 8007162:	f7fe fbc6 	bl	80058f2 <USBD_LL_DataInStage>
}
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fd00 	bl	8005b82 <USBD_LL_SOF>
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007192:	2301      	movs	r3, #1
 8007194:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	79db      	ldrb	r3, [r3, #7]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d102      	bne.n	80071a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
 80071a2:	e008      	b.n	80071b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	79db      	ldrb	r3, [r3, #7]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d102      	bne.n	80071b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
 80071b0:	e001      	b.n	80071b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80071b2:	f7f9 fabb 	bl	800072c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071bc:	7bfa      	ldrb	r2, [r7, #15]
 80071be:	4611      	mov	r1, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fc9a 	bl	8005afa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fc42 	bl	8005a56 <USBD_LL_Reset>
}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fc95 	bl	8005b1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7adb      	ldrb	r3, [r3, #11]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007210:	4b04      	ldr	r3, [pc, #16]	@ (8007224 <HAL_PCD_SuspendCallback+0x48>)
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	4a03      	ldr	r2, [pc, #12]	@ (8007224 <HAL_PCD_SuspendCallback+0x48>)
 8007216:	f043 0306 	orr.w	r3, r3, #6
 800721a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	e000ed00 	.word	0xe000ed00

08007228 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fc8b 	bl	8005b52 <USBD_LL_Resume>
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fce3 	bl	8005c26 <USBD_LL_IsoOUTIncomplete>
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	4611      	mov	r1, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fc9f 	bl	8005bc2 <USBD_LL_IsoINIncomplete>
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe fcf5 	bl	8005c8a <USBD_LL_DevConnected>
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fcf2 	bl	8005ca0 <USBD_LL_DevDisconnected>
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d13c      	bne.n	800734e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072d4:	4a20      	ldr	r2, [pc, #128]	@ (8007358 <USBD_LL_Init+0x94>)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a1e      	ldr	r2, [pc, #120]	@ (8007358 <USBD_LL_Init+0x94>)
 80072e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007358 <USBD_LL_Init+0x94>)
 80072e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80072ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80072ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007358 <USBD_LL_Init+0x94>)
 80072ee:	2206      	movs	r2, #6
 80072f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072f2:	4b19      	ldr	r3, [pc, #100]	@ (8007358 <USBD_LL_Init+0x94>)
 80072f4:	2202      	movs	r2, #2
 80072f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072f8:	4b17      	ldr	r3, [pc, #92]	@ (8007358 <USBD_LL_Init+0x94>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072fe:	4b16      	ldr	r3, [pc, #88]	@ (8007358 <USBD_LL_Init+0x94>)
 8007300:	2202      	movs	r2, #2
 8007302:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007304:	4b14      	ldr	r3, [pc, #80]	@ (8007358 <USBD_LL_Init+0x94>)
 8007306:	2200      	movs	r2, #0
 8007308:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800730a:	4b13      	ldr	r3, [pc, #76]	@ (8007358 <USBD_LL_Init+0x94>)
 800730c:	2200      	movs	r2, #0
 800730e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007310:	4b11      	ldr	r3, [pc, #68]	@ (8007358 <USBD_LL_Init+0x94>)
 8007312:	2200      	movs	r2, #0
 8007314:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007316:	4b10      	ldr	r3, [pc, #64]	@ (8007358 <USBD_LL_Init+0x94>)
 8007318:	2200      	movs	r2, #0
 800731a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800731c:	4b0e      	ldr	r3, [pc, #56]	@ (8007358 <USBD_LL_Init+0x94>)
 800731e:	2200      	movs	r2, #0
 8007320:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007322:	480d      	ldr	r0, [pc, #52]	@ (8007358 <USBD_LL_Init+0x94>)
 8007324:	f7f9 fe15 	bl	8000f52 <HAL_PCD_Init>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800732e:	f7f9 f9fd 	bl	800072c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007332:	2180      	movs	r1, #128	@ 0x80
 8007334:	4808      	ldr	r0, [pc, #32]	@ (8007358 <USBD_LL_Init+0x94>)
 8007336:	f7fb f876 	bl	8002426 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800733a:	2240      	movs	r2, #64	@ 0x40
 800733c:	2100      	movs	r1, #0
 800733e:	4806      	ldr	r0, [pc, #24]	@ (8007358 <USBD_LL_Init+0x94>)
 8007340:	f7fb f82a 	bl	8002398 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007344:	2280      	movs	r2, #128	@ 0x80
 8007346:	2101      	movs	r1, #1
 8007348:	4803      	ldr	r0, [pc, #12]	@ (8007358 <USBD_LL_Init+0x94>)
 800734a:	f7fb f825 	bl	8002398 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	2000160c 	.word	0x2000160c

0800735c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007372:	4618      	mov	r0, r3
 8007374:	f7f9 ff03 	bl	800117e <HAL_PCD_Start>
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 f990 	bl	80076a4 <USBD_Get_USB_Status>
 8007384:	4603      	mov	r3, r0
 8007386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007388:	7bbb      	ldrb	r3, [r7, #14]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	4608      	mov	r0, r1
 800739c:	4611      	mov	r1, r2
 800739e:	461a      	mov	r2, r3
 80073a0:	4603      	mov	r3, r0
 80073a2:	70fb      	strb	r3, [r7, #3]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70bb      	strb	r3, [r7, #2]
 80073a8:	4613      	mov	r3, r2
 80073aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80073ba:	78bb      	ldrb	r3, [r7, #2]
 80073bc:	883a      	ldrh	r2, [r7, #0]
 80073be:	78f9      	ldrb	r1, [r7, #3]
 80073c0:	f7fa fc04 	bl	8001bcc <HAL_PCD_EP_Open>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 f96a 	bl	80076a4 <USBD_Get_USB_Status>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fa fc4f 	bl	8001ca0 <HAL_PCD_EP_Close>
 8007402:	4603      	mov	r3, r0
 8007404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f94b 	bl	80076a4 <USBD_Get_USB_Status>
 800740e:	4603      	mov	r3, r0
 8007410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007412:	7bbb      	ldrb	r3, [r7, #14]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f7fa fd07 	bl	8001e4e <HAL_PCD_EP_SetStall>
 8007440:	4603      	mov	r3, r0
 8007442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 f92c 	bl	80076a4 <USBD_Get_USB_Status>
 800744c:	4603      	mov	r3, r0
 800744e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007450:	7bbb      	ldrb	r3, [r7, #14]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	460b      	mov	r3, r1
 8007464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	4611      	mov	r1, r2
 8007478:	4618      	mov	r0, r3
 800747a:	f7fa fd4b 	bl	8001f14 <HAL_PCD_EP_ClrStall>
 800747e:	4603      	mov	r3, r0
 8007480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	4618      	mov	r0, r3
 8007486:	f000 f90d 	bl	80076a4 <USBD_Get_USB_Status>
 800748a:	4603      	mov	r3, r0
 800748c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800748e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	da0b      	bge.n	80074cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	4613      	mov	r3, r2
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	3316      	adds	r3, #22
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	e00b      	b.n	80074e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80074e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800750a:	78fa      	ldrb	r2, [r7, #3]
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f7fa fb38 	bl	8001b84 <HAL_PCD_SetAddress>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f8c2 	bl	80076a4 <USBD_Get_USB_Status>
 8007520:	4603      	mov	r3, r0
 8007522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007524:	7bbb      	ldrb	r3, [r7, #14]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b086      	sub	sp, #24
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
 800753a:	460b      	mov	r3, r1
 800753c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800754c:	7af9      	ldrb	r1, [r7, #11]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	f7fa fc42 	bl	8001dda <HAL_PCD_EP_Transmit>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	4618      	mov	r0, r3
 800755e:	f000 f8a1 	bl	80076a4 <USBD_Get_USB_Status>
 8007562:	4603      	mov	r3, r0
 8007564:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007566:	7dbb      	ldrb	r3, [r7, #22]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	460b      	mov	r3, r1
 800757e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800758e:	7af9      	ldrb	r1, [r7, #11]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	f7fa fbce 	bl	8001d34 <HAL_PCD_EP_Receive>
 8007598:	4603      	mov	r3, r0
 800759a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f880 	bl	80076a4 <USBD_Get_USB_Status>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075c4:	78fa      	ldrb	r2, [r7, #3]
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fa fbee 	bl	8001daa <HAL_PCD_EP_GetRxCount>
 80075ce:	4603      	mov	r3, r0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_PCDEx_LPM_Callback+0x18>
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d01f      	beq.n	800762e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80075ee:	e03b      	b.n	8007668 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	7adb      	ldrb	r3, [r3, #11]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d007      	beq.n	8007608 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80075f8:	f7f8 ffda 	bl	80005b0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007670 <HAL_PCDEx_LPM_Callback+0x98>)
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	4a1b      	ldr	r2, [pc, #108]	@ (8007670 <HAL_PCDEx_LPM_Callback+0x98>)
 8007602:	f023 0306 	bic.w	r3, r3, #6
 8007606:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fa93 	bl	8005b52 <USBD_LL_Resume>
    break;
 800762c:	e01c      	b.n	8007668 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007640:	f043 0301 	orr.w	r3, r3, #1
 8007644:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe fa64 	bl	8005b1a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7adb      	ldrb	r3, [r3, #11]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800765a:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <HAL_PCDEx_LPM_Callback+0x98>)
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	4a04      	ldr	r2, [pc, #16]	@ (8007670 <HAL_PCDEx_LPM_Callback+0x98>)
 8007660:	f043 0306 	orr.w	r3, r3, #6
 8007664:	6113      	str	r3, [r2, #16]
    break;
 8007666:	bf00      	nop
}
 8007668:	bf00      	nop
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	e000ed00 	.word	0xe000ed00

08007674 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800767c:	4b03      	ldr	r3, [pc, #12]	@ (800768c <USBD_static_malloc+0x18>)
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	20001af0 	.word	0x20001af0

08007690 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]

}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d817      	bhi.n	80076e8 <USBD_Get_USB_Status+0x44>
 80076b8:	a201      	add	r2, pc, #4	@ (adr r2, 80076c0 <USBD_Get_USB_Status+0x1c>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	080076d7 	.word	0x080076d7
 80076c8:	080076dd 	.word	0x080076dd
 80076cc:	080076e3 	.word	0x080076e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
    break;
 80076d4:	e00b      	b.n	80076ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076d6:	2303      	movs	r3, #3
 80076d8:	73fb      	strb	r3, [r7, #15]
    break;
 80076da:	e008      	b.n	80076ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
    break;
 80076e0:	e005      	b.n	80076ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076e2:	2303      	movs	r3, #3
 80076e4:	73fb      	strb	r3, [r7, #15]
    break;
 80076e6:	e002      	b.n	80076ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076e8:	2303      	movs	r3, #3
 80076ea:	73fb      	strb	r3, [r7, #15]
    break;
 80076ec:	bf00      	nop
  }
  return usb_status;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <memset>:
 80076fc:	4402      	add	r2, r0
 80076fe:	4603      	mov	r3, r0
 8007700:	4293      	cmp	r3, r2
 8007702:	d100      	bne.n	8007706 <memset+0xa>
 8007704:	4770      	bx	lr
 8007706:	f803 1b01 	strb.w	r1, [r3], #1
 800770a:	e7f9      	b.n	8007700 <memset+0x4>

0800770c <__libc_init_array>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	4d0d      	ldr	r5, [pc, #52]	@ (8007744 <__libc_init_array+0x38>)
 8007710:	4c0d      	ldr	r4, [pc, #52]	@ (8007748 <__libc_init_array+0x3c>)
 8007712:	1b64      	subs	r4, r4, r5
 8007714:	10a4      	asrs	r4, r4, #2
 8007716:	2600      	movs	r6, #0
 8007718:	42a6      	cmp	r6, r4
 800771a:	d109      	bne.n	8007730 <__libc_init_array+0x24>
 800771c:	4d0b      	ldr	r5, [pc, #44]	@ (800774c <__libc_init_array+0x40>)
 800771e:	4c0c      	ldr	r4, [pc, #48]	@ (8007750 <__libc_init_array+0x44>)
 8007720:	f000 f818 	bl	8007754 <_init>
 8007724:	1b64      	subs	r4, r4, r5
 8007726:	10a4      	asrs	r4, r4, #2
 8007728:	2600      	movs	r6, #0
 800772a:	42a6      	cmp	r6, r4
 800772c:	d105      	bne.n	800773a <__libc_init_array+0x2e>
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	f855 3b04 	ldr.w	r3, [r5], #4
 8007734:	4798      	blx	r3
 8007736:	3601      	adds	r6, #1
 8007738:	e7ee      	b.n	8007718 <__libc_init_array+0xc>
 800773a:	f855 3b04 	ldr.w	r3, [r5], #4
 800773e:	4798      	blx	r3
 8007740:	3601      	adds	r6, #1
 8007742:	e7f2      	b.n	800772a <__libc_init_array+0x1e>
 8007744:	080077c8 	.word	0x080077c8
 8007748:	080077c8 	.word	0x080077c8
 800774c:	080077c8 	.word	0x080077c8
 8007750:	080077cc 	.word	0x080077cc

08007754 <_init>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr

08007760 <_fini>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr
